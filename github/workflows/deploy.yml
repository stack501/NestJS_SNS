name: 🚀 Deploy to NAS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 체크아웃
      uses: actions/checkout@v4
      
    - name: 📦 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 pnpm 설치
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: 📦 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
        
    - name: 📦 의존성 설치
      run: pnpm install --frozen-lockfile
      
    - name: 🔍 린트 검사
      run: pnpm run lint
      
    - name: 🧪 테스트 실행
      run: pnpm run test
      
    - name: 🏗️ 빌드 테스트
      run: pnpm run build

  deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔐 SSH Known Hosts 설정
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.NAS_IP }} >> ~/.ssh/known_hosts
        
    - name: 🚀 NAS 서버 배포
      uses: appleboy/ssh-action@v1.0.3
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        NAS_IP: ${{ secrets.NAS_IP }}  # ← Secrets에서 가져옴
      with:
        host: ${{ secrets.NAS_HOST }}
        username: ${{ secrets.NAS_USERNAME }}
        key: ${{ secrets.NAS_SSH_KEY }}
        port: ${{ secrets.NAS_PORT }}
        envs: GITHUB_SHA,GITHUB_REF,GITHUB_ACTOR,GITHUB_REPOSITORY,NAS_IP
        command_timeout: 15m
        script: |
          echo "======================================"
          echo "🚀 GitHub Actions 배포 시작"
          echo "======================================"
          echo "📊 배포 정보:"
          echo "  - Repository: $GITHUB_REPOSITORY"
          echo "  - Branch: ${GITHUB_REF#refs/heads/}"
          echo "  - Commit: ${GITHUB_SHA:0:8}"
          echo "  - Actor: $GITHUB_ACTOR"
          echo "  - NAS IP: $NAS_IP"
          echo "  - Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "======================================"
          
          cd ${{ secrets.NAS_PROJECT_PATH }}
          git log --oneline -3
          echo ""
          
          ./deploy.sh
          
          echo "======================================"
          echo "✅ GitHub Actions 배포 완료"
          echo "🌐 서비스 접근: http://$NAS_IP:3000"
          echo "📚 문서 접근: http://$NAS_IP:8080"
          echo "======================================"

  verify-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔍 배포 검증
      run: |
        echo "🔍 배포된 서비스 검증 중..."
        
        for i in {1..10}; do
          if curl -f -m 10 http://${{ secrets.NAS_IP }}:3000/health; then
            echo "✅ API 서비스 정상 동작 확인"
            break
          else
            echo "⏳ API 서비스 시작 대기 중... ($i/10)"
            sleep 30
          fi
        done
        
        if curl -f -m 10 http://${{ secrets.NAS_IP }}:8080/; then
          echo "✅ 문서 서비스 정상 동작 확인"
        else
          echo "❌ 문서 서비스 접근 실패"
          exit 1
        fi
        
        echo "🎉 배포 검증 완료!"

  deploy-summary:
    needs: [lint-and-test, deploy, verify-deployment]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 배포 결과 요약
      run: |
        echo "## 🚀 배포 결과 요약" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY  
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 코드 품질 검사 | ${{ needs.lint-and-test.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🚀 NAS 배포 | ${{ needs.deploy.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 배포 검증 | ${{ needs.verify-deployment.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 배포 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **커밋**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **작성자**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **시간**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 서비스 접근 링크" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 **API 서버**: [http://${{ secrets.NAS_IP }}:3000](http://${{ secrets.NAS_IP }}:3000)" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 **API 문서**: [http://${{ secrets.NAS_IP }}:8080](http://${{ secrets.NAS_IP }}:8080)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **헬스체크**: [http://${{ secrets.NAS_IP }}:3000/health](http://${{ secrets.NAS_IP }}:3000/health)" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 **Swagger**: [http://${{ secrets.NAS_IP }}:3000/api-docs](http://${{ secrets.NAS_IP }}:3000/api-docs)" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **GraphQL**: [http://${{ secrets.NAS_IP }}:3000/graphql](http://${{ secrets.NAS_IP }}:3000/graphql)" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌍 DDNS 접근 (포트포워딩 설정 시)" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 **API 서버**: [http://ark1105.synology.me:3000](http://ark1105.synology.me:3000)" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 **API 문서**: [http://ark1105.synology.me:8080](http://ark1105.synology.me:8080)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy.result }}" = "failure" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ 배포 실패" >> $GITHUB_STEP_SUMMARY
          echo "배포 중 오류가 발생했습니다. 로그를 확인하고 롤백을 고려하세요." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**롤백 명령어**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "ssh master@[NAS_IP]" >> $GITHUB_STEP_SUMMARY
          echo "cd /volume1/docker/NestJS_SNS" >> $GITHUB_STEP_SUMMARY
          echo "./rollback.sh" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi