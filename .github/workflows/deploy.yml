name: 🚀 Deploy to NAS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 체크아웃
      uses: actions/checkout@v4
      
    - name: 📦 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 pnpm 설치 (버전 통일)
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: 📦 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
        
    - name: 🔍 pnpm 및 lock 파일 정보 확인
      run: |
        echo "=== 환경 정보 ==="
        echo "Node.js 버전: $(node --version)"
        echo "pnpm 버전: $(pnpm --version)"
        echo "현재 디렉토리: $(pwd)"
        echo "=== lock 파일 상태 ==="
        if [ -f pnpm-lock.yaml ]; then
          echo "✅ pnpm-lock.yaml 존재"
          echo "파일 크기: $(wc -c < pnpm-lock.yaml) bytes"
          echo "첫 5줄:"
          head -5 pnpm-lock.yaml
        else
          echo "❌ pnpm-lock.yaml 없음"
        fi
        echo "=== package.json 확인 ==="
        if [ -f package.json ]; then
          echo "✅ package.json 존재"
        else
          echo "❌ package.json 없음"
        fi
        
    - name: 📦 의존성 설치
      run: |
        echo "=== 의존성 설치 시작 ==="
        if [ -f pnpm-lock.yaml ]; then
          echo "📦 pnpm-lock.yaml 발견 - lock 파일 검증 중..."
          # lock 파일 호환성 확인
          if pnpm install --frozen-lockfile --dry-run; then
            echo "✅ lock 파일 호환됨 - frozen-lockfile 모드 사용"
            pnpm install --frozen-lockfile
          else
            echo "⚠️ lock 파일 비호환 - lock 파일 재생성"
            rm pnpm-lock.yaml
            pnpm install
            echo "📝 새로운 pnpm-lock.yaml 생성됨"
          fi
        else
          echo "⚠️ pnpm-lock.yaml 없음 - 새로 생성"
          pnpm install
        fi
      
    - name: 🔍 린트 검사
      run: pnpm run lint
      
    - name: 🧪 테스트 실행
      run: pnpm run test
      
    - name: 🏗️ 빌드 테스트
      run: pnpm run build

  deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 NAS 서버 배포 및 검증
      uses: appleboy/ssh-action@v1.1.0
      with:
        host: ${{ secrets.NAS_HOST }}
        username: ${{ secrets.NAS_USERNAME }}
        password: ${{ secrets.NAS_PASSWORD }}
        port: ${{ secrets.NAS_PORT }}
        command_timeout: 30m
        script: |
          echo "======================================"
          echo "🚀 GitHub Actions 배포 시작"
          echo "======================================"
          echo "📊 배포 정보:"
          echo "  - Repository: ${{ github.repository }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Actor: ${{ github.actor }}"
          echo "  - Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "======================================"
          
          cd ${{ secrets.NAS_PROJECT_PATH }}
          git log --oneline -3
          echo ""
          
          # deploy.sh 실행 (이미 헬스체크 포함됨)
          ./deploy.sh "${{ secrets.NAS_PASSWORD }}"
          DEPLOY_EXIT_CODE=$?
          
          if [ $DEPLOY_EXIT_CODE -eq 0 ]; then
            echo "======================================"
            echo "✅ 배포 완료 - 추가 검증 수행"
            echo "======================================"
            
            # 내부에서 포트별 서비스 상태 확인
            echo "🔍 포트별 서비스 상태 확인"
            
            # API 서버 포트 확인
            if netstat -tuln | grep ":3000 " > /dev/null; then
              echo "✅ API 서버 포트 3000 활성화"
            else
              echo "❌ API 서버 포트 3000 비활성화"
              exit 1
            fi
            
            # 문서 서버 포트 확인
            if netstat -tuln | grep ":8080 " > /dev/null; then
              echo "✅ 문서 서버 포트 8080 활성화"
            else
              echo "⚠️ 문서 서버 포트 8080 비활성화 (선택적)"
            fi
            
            # 다양한 엔드포인트 테스트
            echo "🧪 API 엔드포인트 테스트"
            
            # 헬스체크
            if curl -f -s http://localhost:3000/health > /dev/null; then
              echo "✅ 헬스체크 API 정상"
            else
              echo "❌ 헬스체크 API 실패"
              exit 1
            fi
            
            # API 문서 확인 (있다면)
            if curl -f -s http://localhost:3000/api-docs > /dev/null; then
              echo "✅ Swagger 문서 접근 가능"
            else
              echo "⚠️ Swagger 문서 접근 불가 (선택적)"
            fi
            
            # GraphQL 확인 (있다면)
            if curl -f -s http://localhost:3000/graphql > /dev/null; then
              echo "✅ GraphQL 엔드포인트 접근 가능"
            else
              echo "⚠️ GraphQL 엔드포인트 접근 불가 (선택적)"
            fi
            
            # 컨테이너 상태 최종 확인
            echo "📋 최종 컨테이너 상태"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep sns-dev
            
            # 리소스 사용률 확인
            echo "📊 시스템 리소스 사용률"
            echo "메모리 사용률:"
            free -h | head -2
            echo "디스크 사용률:"
            df -h | grep -E "(/$|/volume1)"
            
            echo "======================================"
            echo "✅ GitHub Actions 배포 및 검증 완료"
            echo "🌐 서비스 접근: http://${{ secrets.NAS_HOST }}:3000"
            echo "📚 문서 접근: http://${{ secrets.NAS_HOST }}:8080"
            echo "🔍 헬스체크: http://${{ secrets.NAS_HOST }}:3000/health"
            echo "💡 외부 접근을 위해서는 방화벽 설정을 확인하세요"
            echo "======================================"
          else
            echo "❌ GitHub Actions 배포 실패 (Exit Code: $DEPLOY_EXIT_CODE)"
            exit $DEPLOY_EXIT_CODE
          fi

  deploy-summary:
    needs: [lint-and-test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 배포 결과 요약
      run: |
        echo "## 🚀 배포 결과 요약" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY  
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 코드 품질 검사 | ${{ needs.lint-and-test.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🚀 NAS 배포 및 검증 | ${{ needs.deploy.result == 'success' && '✅ 성공' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 배포 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **커밋**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **작성자**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **시간**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 서비스 접근 링크" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 **API 서버**: [http://${{ secrets.NAS_HOST }}:3000](http://${{ secrets.NAS_HOST }}:3000)" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 **API 문서**: [http://${{ secrets.NAS_HOST }}:8080](http://${{ secrets.NAS_HOST }}:8080)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **헬스체크**: [http://${{ secrets.NAS_HOST }}:3000/health](http://${{ secrets.NAS_HOST }}:3000/health)" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 **Swagger**: [http://${{ secrets.NAS_HOST }}:3000/api-docs](http://${{ secrets.NAS_HOST }}:3000/api-docs)" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **GraphQL**: [http://${{ secrets.NAS_HOST }}:3000/graphql](http://${{ secrets.NAS_HOST }}:3000/graphql)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 참고사항" >> $GITHUB_STEP_SUMMARY
          echo "- 내부 검증은 완료되었습니다" >> $GITHUB_STEP_SUMMARY
          echo "- 외부 접근을 위해서는 NAS 방화벽 설정을 확인하세요" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy.result }}" = "failure" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ 배포 실패" >> $GITHUB_STEP_SUMMARY
          echo "배포 중 오류가 발생했습니다. 로그를 확인하고 롤백을 고려하세요." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**롤백 명령어**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "ssh master@[NAS_HOST]" >> $GITHUB_STEP_SUMMARY
          echo "cd /volume1/docker/NestJS_SNS" >> $GITHUB_STEP_SUMMARY
          echo "./rollback.sh" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
