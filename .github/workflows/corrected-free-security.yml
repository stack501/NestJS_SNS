name: 🛡️ Corrected Free Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  free-security-scan:
    name: 🔍 Free Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: npm ci
    
    # ===== 코드 보안 분석 =====
    
    - name: 🔬 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
    
    - name: 🔬 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: 🔍 ESLint Security Scan
      run: |
        npm install --save-dev eslint-plugin-security || true
        npx eslint . --ext .ts,.js \
          --rule "no-eval: error" \
          --rule "no-implied-eval: error" \
          --rule "no-new-func: error" \
          --format @microsoft/eslint-formatter-sarif \
          --output-file eslint-security-results.sarif || true
      continue-on-error: true
    
    - name: 🛡️ Semgrep Security Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/nodejs
        generateSarif: "1"
      continue-on-error: true
    
    # ===== 의존성 보안 분석 =====
    
    - name: 📦 NPM Security Audit
      run: |
        echo "## 📦 NPM Audit Results" >> $GITHUB_STEP_SUMMARY
        
        npm audit --json > npm-audit-results.json 2>/dev/null || true
        npm audit --audit-level=moderate || echo "⚠️ Vulnerabilities found"
        
        if [[ -f npm-audit-results.json ]]; then
          CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit-results.json)
          HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit-results.json)
          MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit-results.json)
          
          echo "- **Critical:** $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- **High:** $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- **Moderate:** $MODERATE" >> $GITHUB_STEP_SUMMARY
          
          if [[ $CRITICAL -gt 0 ]] || [[ $HIGH -gt 3 ]]; then
            echo "::warning::High/Critical vulnerabilities found: Critical($CRITICAL), High($HIGH)"
          fi
        fi
    
    - name: 🔍 Dependency Security Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: critical
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, ISC, 0BSD, BSD-2-Clause
      continue-on-error: true
    
    # ===== 컨테이너 보안 분석 =====
    
    - name: 🐳 Dockerfile Security Check
      if: hashFiles('Dockerfile') != ''
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        failure-threshold: error
      continue-on-error: true
    
    - name: 🔍 Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true
    
    # ===== 시크릿 검출 =====
    
    - name: 🔍 GitLeaks Secret Detection
      uses: gitleaks/gitleaks-action@v2
      continue-on-error: true
    
    - name: 🐷 TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --only-verified
      continue-on-error: true
    
    # ===== SARIF 결과 업로드 =====
    - name: 📤 Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: .
    
    # ===== 결과 요약 =====
    - name: 📊 Generate Security Summary
      if: always()
      run: |
        echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🔍 Completed Scans" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Purpose | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | Static code analysis | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| ESLint Security | JavaScript security rules | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | Pattern-based security | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| NPM Audit | Node.js dependencies | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Review | GitHub dependency check | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Trivy | Filesystem vulnerabilities | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Hadolint | Dockerfile security | $([ -f 'Dockerfile' ] && echo '✅' || echo '⏭️') |" >> $GITHUB_STEP_SUMMARY
        echo "| GitLeaks | Git secret detection | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| TruffleHog | Secret pattern matching | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 💰 Total Cost: **\$0.00** 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 View Results" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **Security Tab**: [View all findings](${{ github.server_url }}/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 **Code Scanning**: [Detailed analysis](${{ github.server_url }}/${{ github.repository }}/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔐 **Secret Scanning**: [Secret detection results](${{ github.server_url }}/${{ github.repository }}/security/secret-scanning)" >> $GITHUB_STEP_SUMMARY
    
    # ===== 선택적 Slack 알림 (같은 Job 내에서) =====
    - name: 📱 Send Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # SLACK_WEBHOOK_URL이 설정된 경우에만 알림 전송
        if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
          echo "📱 Slack 알림 전송 중..."
          
          # Job 상태 결정
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="CLEAN"
          else
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="ISSUES FOUND"
          fi
          
          # Slack 메시지 생성
          MESSAGE="{
            \"text\": \"🛡️ **Free Security Scan Completed**\n\n**Repository:** ${{ github.repository }}\n**Status:** $STATUS_EMOJI $STATUS_TEXT\n**Branch:** ${{ github.ref_name }}\n**Cost:** \$0.00 💰\n\n**8 Security Tools Executed:**\n• CodeQL Static Analysis ✅\n• NPM Dependency Audit ✅\n• Container Security Check ✅\n• Secret Pattern Detection ✅\n• Infrastructure Security ✅\n• Dependency Review ✅\n• Pattern-based Security ✅\n• Git History Scanning ✅\n\n📊 **Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n🔍 **Security:** ${{ github.server_url }}/${{ github.repository }}/security\"
          }"
          
          # Slack으로 전송
          curl -X POST -H 'Content-type: application/json' \
            --data "$MESSAGE" \
            "$SLACK_WEBHOOK_URL" || echo "⚠️ Slack 알림 전송 실패"
          
          echo "✅ Slack 알림 전송 완료"
        else
          echo "ℹ️ SLACK_WEBHOOK_URL이 설정되지 않음 - 알림 스킵"
        fi
      continue-on-error: true
