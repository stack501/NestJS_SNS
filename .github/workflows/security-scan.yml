name: 🛡️ Security Scan (pnpm)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  security-scan:
    name: 🔍 Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        # npm cache 제거 - pnpm 사용
    
    # 🔧 pnpm 설치 및 설정
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        run_install: false
    
    - name: 🗂️ Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: 🚀 Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    # 🔧 pnpm으로 의존성 설치
    - name: 📦 Install Dependencies with pnpm
      run: |
        echo "📦 pnpm으로 의존성 설치 시작..."
        
        # pnpm-lock.yaml 존재 확인
        if [[ -f pnpm-lock.yaml ]]; then
          echo "✅ pnpm-lock.yaml 발견 - frozen lockfile로 설치"
          pnpm install --frozen-lockfile
        else
          echo "⚠️ pnpm-lock.yaml이 없음 - 새로 생성"
          pnpm install
        fi
        
        # 보안 취약점 확인 및 수정
        echo "🔍 보안 취약점 확인 중..."
        pnpm audit || echo "⚠️ 취약점 발견됨"
        
        # 보안 관련 dev dependencies 추가
        pnpm add -D eslint-plugin-security || true
        
        echo "✅ pnpm 의존성 설치 완료"
    
    # ===== 코드 보안 분석 =====
    
    - name: 🔬 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
    
    - name: 🔬 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: 🔍 ESLint Security Scan
      run: |
        echo "🔍 ESLint 보안 스캔 시작..."
        pnpm exec eslint . --ext .ts,.js \
          --rule "no-eval: error" \
          --rule "no-implied-eval: error" \
          --rule "no-new-func: error" \
          --format @microsoft/eslint-formatter-sarif \
          --output-file eslint-security-results.sarif || true
        
        if [[ -f eslint-security-results.sarif ]]; then
          echo "✅ ESLint SARIF 파일 생성됨"
        fi
      continue-on-error: true
    
    - name: 🛡️ Semgrep Security Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/nodejs
        generateSarif: "1"
      continue-on-error: true
    
    # ===== 의존성 보안 분석 (pnpm 버전) =====
    
    - name: 📦 pnpm Security Audit
      run: |
        echo "## 📦 pnpm Audit Results" >> $GITHUB_STEP_SUMMARY
        
        # pnpm audit 실행 (JSON 형식 지원하지 않으므로 텍스트로)
        echo "🔍 pnpm audit 실행 중..."
        pnpm audit > pnpm-audit-results.txt 2>&1 || echo "⚠️ 취약점 발견됨"
        
        # 결과 파싱 및 요약
        if [[ -f pnpm-audit-results.txt ]]; then
          AUDIT_OUTPUT=$(cat pnpm-audit-results.txt)
          
          # 취약점 개수 추출 (대략적)
          ISSUES=$(echo "$AUDIT_OUTPUT" | grep -c "│" || echo "0")
          
          echo "- **총 이슈 수:** $ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- **상세 결과:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -20 pnpm-audit-results.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # 경고 출력
          if [[ $ISSUES -gt 5 ]]; then
            echo "::warning::Multiple vulnerabilities found in dependencies"
          fi
        fi
        
        # npm audit도 추가로 실행 (호환성을 위해)
        echo "🔍 추가 npm audit 실행..."
        npm audit --json > npm-audit-results.json 2>/dev/null || true
        
        if [[ -f npm-audit-results.json ]] && [[ -s npm-audit-results.json ]]; then
          CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit-results.json)
          HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit-results.json)
          MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit-results.json)
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 npm audit 추가 분석" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical:** $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- **High:** $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- **Moderate:** $MODERATE" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 🔍 Dependency Security Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: critical
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, ISC, 0BSD, BSD-2-Clause
      continue-on-error: true
    
    # ===== 컨테이너 보안 분석 =====
    
    - name: 🐳 Dockerfile Security Check
      if: hashFiles('Dockerfile') != ''
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        failure-threshold: error
      continue-on-error: true
    
    - name: 🔍 Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true
    
    # ===== 시크릿 검출 =====
    
    - name: 🔍 GitLeaks Secret Detection
      uses: gitleaks/gitleaks-action@v2
      continue-on-error: true
    
    - name: 🐷 TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --only-verified
      continue-on-error: true
    
    # ===== SARIF 업로드 =====
    
    - name: 📤 Check and Upload SARIF Results
      if: always()
      run: |
        echo "📤 SARIF 파일 확인 중..."
        
        SARIF_FILES=$(find . -name "*.sarif" -type f 2>/dev/null || true)
        SARIF_COUNT=$(echo "$SARIF_FILES" | grep -c "\.sarif" || echo "0")
        
        if [[ $SARIF_COUNT -gt 0 ]]; then
          echo "✅ SARIF 파일 ${SARIF_COUNT}개 발견:"
          echo "$SARIF_FILES" | while read file; do
            if [[ -n "$file" ]]; then
              echo "  📄 $file ($(stat -c%s "$file" 2>/dev/null || echo "0") bytes)"
            fi
          done
          echo "SARIF_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "ℹ️ SARIF 파일이 없음 - 업로드 스킵"
          echo "SARIF_AVAILABLE=false" >> $GITHUB_ENV
        fi
    
    - name: 📤 Upload SARIF Files
      if: always() && env.SARIF_AVAILABLE == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: .
      continue-on-error: true
    
    # ===== 결과 요약 =====
    - name: 📊 Generate Security Summary
      if: always()
      run: |
        echo "# 🛡️ Security Scan Summary (pnpm)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package Manager:** pnpm 📦" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🔍 Completed Scans" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Purpose | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | Static code analysis | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| ESLint Security | JavaScript security rules | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | Pattern-based security | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| pnpm Audit | Node.js dependencies (pnpm) | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| npm Audit | Additional dependency check | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Review | GitHub dependency check | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Trivy | Filesystem vulnerabilities | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Hadolint | Dockerfile security | $([ -f 'Dockerfile' ] && echo '✅' || echo '⏭️') |" >> $GITHUB_STEP_SUMMARY
        echo "| GitLeaks | Git secret detection | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| TruffleHog | Secret pattern matching | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 💰 Total Cost: **\$0.00** 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 View Results" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **Security Tab**: [View all findings](${{ github.server_url }}/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 **Code Scanning**: [Detailed analysis](${{ github.server_url }}/${{ github.repository }}/security/code-scanning)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔐 **Secret Scanning**: [Secret detection results](${{ github.server_url }}/${{ github.repository }}/security/secret-scanning)" >> $GITHUB_STEP_SUMMARY
    
    # 🎨 예쁜 Slack 알림
    - name: 📱 Send Beautiful Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
          echo "📱 예쁜 Slack 알림 전송 중..."
          
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS_COLOR="good"
            STATUS_EMOJI="✅"
            STATUS_TEXT="PASSED"
            STATUS_DETAIL="모든 보안 스캔이 성공적으로 완료되었습니다. (pnpm 기반)"
          else
            STATUS_COLOR="warning"
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="ISSUES FOUND"
            STATUS_DETAIL="일부 보안 이슈가 발견되었습니다. 검토가 필요합니다. (pnpm 기반)"
          fi
          
          CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          COMMIT_SHORT="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHORT:0:7}"
          
          cat > slack_message.json << EOF
          {
            "username": "Security Scanner Bot (pnpm)",
            "icon_emoji": ":shield:",
            "attachments": [
              {
                "color": "$STATUS_COLOR",
                "fallback": "Security Scan Results for ${{ github.repository }}",
                "author_name": "🛡️ Security Scan Pipeline (pnpm)",
                "author_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "title": "$STATUS_EMOJI Security Scan $STATUS_TEXT",
                "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "text": "$STATUS_DETAIL",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "\`${{ github.repository }}\`",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "\`${{ github.ref_name }}\`",
                    "short": true
                  },
                  {
                    "title": "Package Manager",
                    "value": "📦 pnpm",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|$COMMIT_SHORT>",
                    "short": true
                  },
                  {
                    "title": "Triggered by",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Scan Time",
                    "value": "$CURRENT_TIME",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions Security Scanner (pnpm)",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              },
              {
                "color": "#36a64f",
                "title": "🔍 Security Tools Executed (9/9)",
                "fields": [
                  {
                    "title": "Static Analysis",
                    "value": "• CodeQL Analysis ✅\n• ESLint Security Rules ✅\n• Semgrep Pattern Matching ✅",
                    "short": true
                  },
                  {
                    "title": "Dependency Security",
                    "value": "• pnpm Audit ✅\n• npm Audit (추가) ✅\n• GitHub Dependency Review ✅",
                    "short": true
                  },
                  {
                    "title": "Container Security",
                    "value": "• Trivy Filesystem Scan ✅\n• Dockerfile Security Check ✅",
                    "short": true
                  },
                  {
                    "title": "Secret Detection",
                    "value": "• GitLeaks Detection ✅\n• TruffleHog Pattern Scan ✅",
                    "short": true
                  }
                ],
                "footer": "💰 Total Cost: \$0.00 (Free Tools Only) | 📦 Powered by pnpm"
              },
              {
                "color": "#1f77b4",
                "title": "📊 Quick Actions",
                "actions": [
                  {
                    "type": "button",
                    "text": "🔍 View Security Tab",
                    "url": "${{ github.server_url }}/${{ github.repository }}/security"
                  },
                  {
                    "type": "button",
                    "text": "📋 Detailed Results",
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "type": "button",
                    "text": "📈 Code Scanning",
                    "url": "${{ github.server_url }}/${{ github.repository }}/security/code-scanning"
                  }
                ]
              }
            ]
          }
          EOF
          
          if curl -X POST -H 'Content-type: application/json' \
            --data @slack_message.json \
            "$SLACK_WEBHOOK_URL"; then
            echo "✅ 예쁜 Slack 알림 전송 완료!"
          else
            echo "⚠️ Slack 알림 전송 실패"
          fi
          
          rm -f slack_message.json
        else
          echo "ℹ️ SLACK_WEBHOOK_URL이 설정되지 않음 - 알림 스킵"
        fi
      continue-on-error: true
