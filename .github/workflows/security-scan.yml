name: 🛡️ Security Scan (pnpm)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  security-scan:
    name: 🔍 Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        run_install: false
    
    - name: 🗂️ Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: 🚀 Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: 📦 Install Dependencies
      run: |
        echo "📦 pnpm으로 의존성 설치 시작..."
        
        if [[ -f pnpm-lock.yaml ]]; then
          echo "✅ pnpm-lock.yaml 발견 - frozen lockfile로 설치"
          pnpm install --frozen-lockfile
        else
          echo "⚠️ pnpm-lock.yaml이 없음 - 새로 생성"
          pnpm install
        fi
        
        echo "🔍 보안 취약점 확인 중..."
        pnpm audit || echo "⚠️ 취약점 발견됨"
        
        pnpm add -D eslint-plugin-security || true
        echo "✅ 의존성 설치 완료"
    
    # ===== 코드 보안 분석 =====
    
    - name: 🔬 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
    
    - name: 🔬 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: 🔍 ESLint Security Scan
      run: |
        echo "🔍 ESLint 보안 스캔 시작..."
        pnpm exec eslint . --ext .ts,.js \
          --rule "no-eval: error" \
          --rule "no-implied-eval: error" \
          --rule "no-new-func: error" \
          --format @microsoft/eslint-formatter-sarif \
          --output-file eslint-security-results.sarif || true
        
        if [[ -f eslint-security-results.sarif ]]; then
          echo "✅ ESLint SARIF 파일 생성됨"
        fi
      continue-on-error: true
    
    - name: 🛡️ Semgrep Security Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/nodejs
        generateSarif: "1"
      continue-on-error: true
    
    # ===== 의존성 보안 분석 =====
    
    - name: 📦 Security Audit
      run: |
        echo "## 📦 Security Audit Results" >> $GITHUB_STEP_SUMMARY
        
        echo "🔍 pnpm audit 실행 중..."
        pnpm audit > pnpm-audit-results.txt 2>&1 || echo "⚠️ 취약점 발견됨"
        
        if [[ -f pnpm-audit-results.txt ]]; then
          AUDIT_OUTPUT=$(cat pnpm-audit-results.txt)
          ISSUES=$(echo "$AUDIT_OUTPUT" | grep -c "│" || echo "0")
          
          echo "- **총 이슈 수:** $ISSUES" >> $GITHUB_STEP_SUMMARY
          
          if [[ $ISSUES -gt 5 ]]; then
            echo "::warning::Multiple vulnerabilities found in dependencies"
          fi
        fi
        
        echo "🔍 추가 npm audit 실행..."
        npm audit --json > npm-audit-results.json 2>/dev/null || true
        
        if [[ -f npm-audit-results.json ]] && [[ -s npm-audit-results.json ]]; then
          CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit-results.json)
          HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit-results.json)
          MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit-results.json)
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 npm audit 추가 분석" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical:** $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- **High:** $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- **Moderate:** $MODERATE" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 🔍 Dependency Security Review
      if: github.event_name == 'pull_request'
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: critical
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, ISC, 0BSD, BSD-2-Clause
      continue-on-error: true
    
    # ===== 컨테이너 보안 분석 =====
    
    - name: 🐳 Dockerfile Security Check
      if: hashFiles('Dockerfile') != ''
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        failure-threshold: error
      continue-on-error: true
    
    - name: 🔍 Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true
    
    # ===== 시크릿 검출 =====
    
    - name: 🔐 Secret Detection
      run: |
        echo "🔍 시크릿 검출 시작..."
        
        pip install detect-secrets
        
        if [[ ! -f .secrets.baseline ]]; then
          echo "📄 .secrets.baseline 생성 중..."
          detect-secrets scan --all-files --baseline .secrets.baseline || true
        fi
        
        echo "🔍 새로운 시크릿 검사 중..."
        detect-secrets scan --all-files --baseline .secrets.baseline --fail-on-found || echo "⚠️ 새로운 시크릿 발견"
        
        SECRET_COUNT=$(jq '.results | to_entries | length' .secrets.baseline 2>/dev/null || echo "0")
        echo "## 🔐 Secret Detection Results" >> $GITHUB_STEP_SUMMARY
        echo "- **잠재적 시크릿 수:** $SECRET_COUNT" >> $GITHUB_STEP_SUMMARY
        
        if [[ $SECRET_COUNT -gt 0 ]]; then
          echo "::warning::Potential secrets detected: $SECRET_COUNT"
        fi
      continue-on-error: true
    
    - name: 🐷 TruffleHog Secret Scan
      if: github.event_name == 'pull_request'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}
        extra_args: --only-verified
      continue-on-error: true
    
    - name: 🐷 TruffleHog Filesystem Scan
      if: github.event_name == 'push'
      run: |
        echo "🐷 TruffleHog 전체 파일시스템 스캔..."
        
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
        trufflehog filesystem . --only-verified --json > trufflehog-results.json || true
        
        if [[ -f trufflehog-results.json ]]; then
          SECRET_FOUND=$(jq '. | length' trufflehog-results.json 2>/dev/null || echo "0")
          echo "## 🐷 TruffleHog Results" >> $GITHUB_STEP_SUMMARY
          echo "- **검증된 시크릿:** $SECRET_FOUND" >> $GITHUB_STEP_SUMMARY
          
          if [[ $SECRET_FOUND -gt 0 ]]; then
            echo "::warning::Verified secrets found: $SECRET_FOUND"
          fi
        fi
      continue-on-error: true
    
    # ===== SARIF 업로드 =====
    
    - name: 📤 Check SARIF Files
      if: always()
      run: |
        echo "📤 SARIF 파일 확인 중..."
        
        SARIF_FILES=$(find . -name "*.sarif" -type f 2>/dev/null || true)
        SARIF_COUNT=$(echo "$SARIF_FILES" | grep -c "\.sarif" || echo "0")
        
        if [[ $SARIF_COUNT -gt 0 ]]; then
          echo "✅ SARIF 파일 ${SARIF_COUNT}개 발견"
          echo "SARIF_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "ℹ️ SARIF 파일이 없음"
          echo "SARIF_AVAILABLE=false" >> $GITHUB_ENV
        fi
    
    - name: 📤 Upload SARIF Files
      if: always() && env.SARIF_AVAILABLE == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: .
      continue-on-error: true
    
    # ===== 결과 요약 =====
    
    - name: 📊 Generate Summary
      if: always()
      run: |
        echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package Manager:** pnpm 📦" >> $GITHUB_STEP_SUMMARY
        echo "**Event Type:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🔍 Completed Scans" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Purpose | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | Static code analysis | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| ESLint Security | JavaScript security rules | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | Pattern-based security | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| pnpm Audit | Node.js dependencies | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Review | GitHub dependency check | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| Trivy | Filesystem vulnerabilities | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| detect-secrets | Secret pattern detection | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| TruffleHog | Advanced secret scanning | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 💰 Total Cost: **\$0.00** 🎉" >> $GITHUB_STEP_SUMMARY
    
    # ===== 간단한 Slack 알림 =====
    
    - name: 📱 Slack Notification
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
          echo "📱 Slack 알림 전송 중..."
          
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="PASSED"
            STATUS_COLOR="good"
          else
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="ISSUES FOUND"
            STATUS_COLOR="warning"
          fi
          
          # jq를 사용한 안전한 JSON 생성
          jq -n \
            --arg text "🛡️ Security Scan $STATUS_TEXT" \
            --arg color "$STATUS_COLOR" \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg status "$STATUS_EMOJI $STATUS_TEXT" \
            --arg event "${{ github.event_name }}" \
            --arg actor "${{ github.actor }}" \
            --arg url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg security_url "${{ github.server_url }}/${{ github.repository }}/security" \
            '{
              username: "Security Scanner Bot",
              icon_emoji: ":shield:",
              text: $text,
              attachments: [{
                color: $color,
                title: "Security Scan Results",
                title_link: $url,
                fields: [
                  {title: "Repository", value: $repo, short: true},
                  {title: "Branch", value: $branch, short: true},
                  {title: "Status", value: $status, short: true},
                  {title: "Event", value: $event, short: true},
                  {title: "Triggered by", value: $actor, short: true},
                  {title: "Package Manager", value: "📦 pnpm", short: true}
                ],
                actions: [
                  {type: "button", text: "🔍 Security Tab", url: $security_url},
                  {type: "button", text: "📋 Detailed Results", url: $url}
                ],
                footer: "GitHub Actions Security Scanner | 💰 Cost: $0.00"
              }]
            }' | \
          curl -X POST -H 'Content-type: application/json' \
            --data @- \
            "$SLACK_WEBHOOK_URL"
          
          echo "✅ Slack 알림 전송 완료"
        else
          echo "ℹ️ SLACK_WEBHOOK_URL 설정되지 않음 - 알림 스킵"
        fi
      continue-on-error: true
