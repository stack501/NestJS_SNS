var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.496,1,2.451]],["body/injectables/AccessTokenGuard.html",[0,0.718,1,3.546,2,0.967,3,0.088,4,0.088,5,0.078,6,3.223,7,1.879,8,0.391,9,4.667,10,0.013,11,5.142,12,1.575,13,0.139,14,0.776,15,1.645,16,2.919,17,2.919,18,3.145,19,0.217,20,2.956,21,0.536,22,0.5,23,0.231,24,0.359,25,2.762,26,1,27,2.389,28,0.205,29,3.602,30,0.374,31,2.517,32,1.879,33,2.517,34,1.682,35,3.602,36,1.774,37,2.002,38,1.682,39,1.879,40,1.682,41,1.774,42,1.879,43,2.818,44,1.399,45,3.546,46,2.002,47,2.578,48,2.996,49,3.838,50,0.159,51,0.139,52,1.001,53,0.769,54,4.199,55,1.138,56,0.964,57,1.929,58,1.439,59,4.199,60,3.602,61,3.602,62,1.204,63,1.85,64,3.602,65,3.381,66,3.271,67,4.001,68,2.627,69,2.483,70,1.903,71,4.199,72,3.381,73,4.997,74,2.66,75,2.002,76,2.334,77,3.602,78,1.879,79,1.774,80,1.639,81,2.002,82,1.75,83,2.334,84,2.334,85,2.334,86,2.334,87,3.5,88,2.002,89,2.334,90,4.997,91,1.111,92,3.5,93,1.29,94,3.002,95,1.241,96,2.334,97,2.334,98,3.5,99,2.19,100,2.334,101,4.5,102,2.818,103,2.334,104,0.007,105,0.007]],["title/controllers/AppController.html",[106,1.591,107,2.969]],["body/controllers/AppController.html",[3,0.19,4,0.19,5,0.169,10,0.013,28,0.221,30,0.807,50,0.19,51,0.167,55,1.366,104,0.011,105,0.011,106,2.891,107,5.394,108,2.58,109,5.572,110,4.986,111,5.572,112,3.456]],["title/modules/AppModule.html",[113,1.591,114,2.969]],["body/modules/AppModule.html",[1,2.68,3,0.089,4,0.089,5,0.079,10,0.013,23,0.13,24,0.363,28,0.25,30,0.377,36,1.792,44,1.413,48,3.008,50,0.133,51,0.117,52,1.011,58,0.56,62,0.541,63,1.791,70,0.802,91,2.389,93,1.949,104,0.007,105,0.007,107,3.889,108,1.805,110,4.24,111,2.606,113,2.085,114,5.888,115,1.475,116,1.475,117,1.616,118,1.616,119,1.475,120,2.896,121,1.616,122,2.606,123,2.606,124,2.606,125,3.611,126,4.517,127,4.517,128,3.796,129,4.24,130,4.517,131,3.446,132,2.418,133,1.616,134,1.616,135,2.985,136,3.044,137,4.465,138,2.985,139,2.985,140,3.024,141,1.475,142,2.206,143,2.606,144,2.985,145,1.74,146,2.985,147,2.985,148,2.985,149,5.349,150,5.349,151,3.525,152,6.036,153,1.616,154,2.985,155,2.606,156,2.606,157,3.525,158,2.985,159,2.541,160,2.985,161,3.247,162,2.985,163,2.985,164,2.541,165,2.985,166,2.206,167,2.985,168,2.307,169,2.985,170,2.985,171,3.247,172,2.985,173,2.985,174,2.606,175,2.839,176,2.985,177,2.357,178,2.985,179,3.525,180,2.985,181,4.465,182,2.985,183,3.247,184,2.985,185,2.985,186,4.465,187,2.985,188,2.606,189,2.022,190,2.68,191,2.985,192,2.606,193,2.606,194,4.465,195,4.465,196,4.465,197,3.617,198,5.549,199,4.465,200,2.985,201,2.985,202,2.985,203,2.985,204,2.985,205,2.985,206,4.465,207,2.985,208,2.985,209,2.985,210,2.985,211,2.985,212,2.985,213,2.985,214,2.985,215,2.985,216,2.985,217,1.898,218,2.985,219,1.436,220,2.985,221,2.985,222,4.465,223,4.465,224,2.985,225,2.985,226,2.985,227,2.985,228,2.606,229,2.985,230,2.985,231,2.606,232,4.465,233,2.985,234,4.465,235,2.985,236,2.357,237,2.985,238,2.985,239,2.985,240,2.985,241,2.985,242,2.985,243,1.616,244,2.606,245,4.465,246,2.985,247,2.985,248,2.985,249,2.022,250,2.985,251,2.606,252,2.985,253,2.606,254,2.985,255,1.792,256,2.985,257,2.985,258,2.985,259,1.616,260,4.465,261,2.985,262,2.985,263,2.985,264,4.465,265,3.623,266,2.985,267,2.606,268,2.985,269,4.465,270,2.985,271,2.985,272,2.606,273,1.011,274,2.985,275,5.184,276,5.937,277,2.606,278,2.606,279,2.606,280,2.985,281,2.985,282,2.606,283,2.985]],["title/injectables/AppService.html",[0,0.496,110,2.596]],["body/injectables/AppService.html",[0,0.894,2,2.057,3,0.187,4,0.187,5,0.167,10,0.013,13,0.296,14,1.288,19,0.462,26,1.064,28,0.187,30,0.795,50,0.187,51,0.165,62,1.139,104,0.011,105,0.011,110,4.674,284,5.488,285,8.035,286,6.286,287,1.974,288,6.286,289,6.286]],["title/controllers/AuthController.html",[106,1.591,290,2.969]],["body/controllers/AuthController.html",[3,0.071,4,0.071,5,0.063,8,0.472,10,0.013,13,0.112,14,0.656,19,0.511,21,1.197,22,1.117,23,0.303,24,0.802,26,1.301,28,0.226,30,0.3,31,2.194,32,1.509,38,1.351,39,1.509,40,1.351,41,1.425,42,1.509,47,2.881,49,1.285,50,0.071,51,0.062,53,0.617,55,0.801,56,1.197,58,1.274,62,1.155,63,1.245,66,2.965,74,2.247,75,2.536,77,2.995,78,2.38,82,1.887,99,3.006,102,1.509,104,0.006,105,0.006,106,0.925,108,0.96,145,2.483,153,1.285,174,2.073,243,1.285,287,1.245,290,2.722,291,2.073,292,1.351,293,2.073,294,1.849,295,4.175,296,5.263,297,3.744,298,4.595,299,3.744,300,3.744,301,3.744,302,3.744,303,4.636,304,4.636,305,4.636,306,1.751,307,2.374,308,2.374,309,2.947,310,2.374,311,2.374,312,2.374,313,2.374,314,2.374,315,2.374,316,4.632,317,2.374,318,2.374,319,4.05,320,2.374,321,2.374,322,2.374,323,3.744,324,2.374,325,2.374,326,2.374,327,2.374,328,4.197,329,2.374,330,5.263,331,5.263,332,3.744,333,2.374,334,5.158,335,4.94,336,5.492,337,2.374,338,1.665,339,2.374,340,3.879,341,2.374,342,2.374,343,2.374,344,4.522,345,2.374,346,2.374,347,5.263,348,3.744,349,2.374,350,2.374,351,2.374,352,3.744,353,2.374,354,1.036,355,1.726,356,2.374,357,2.073,358,2.073,359,1.509,360,4.636,361,2.374,362,3.641,363,1.173,364,2.073,365,1.425,366,1.425,367,1.509,368,1.726,369,2.374,370,3.744,371,1.874,372,1.123,373,2.722,374,2.374,375,1.874,376,1.874,377,2.536,378,1.509,379,2.374,380,1.073,381,2.073,382,1.608,383,2.374,384,3.744,385,3.346,386,3.744,387,3.744,388,5.263,389,3.744,390,1.226,391,2.374,392,2.374,393,3.744,394,3.744,395,2.374,396,2.374,397,2.374,398,2.374,399,2.374,400,3.744,401,3.744,402,2.374,403,2.374,404,2.374,405,3.744,406,2.374,407,3.744,408,2.374,409,2.374,410,2.374,411,2.374,412,2.374,413,2.374,414,2.374,415,1.608,416,2.374,417,2.374,418,2.374,419,2.374,420,2.374,421,2.374,422,2.374,423,2.374]],["title/modules/AuthModule.html",[113,1.591,125,2.211]],["body/modules/AuthModule.html",[3,0.159,4,0.159,5,0.141,10,0.013,28,0.248,30,0.674,31,3.972,32,3.39,50,0.159,51,0.14,104,0.01,105,0.01,108,2.691,113,2.828,115,2.634,116,2.634,117,2.887,118,2.887,119,2.634,120,3.929,121,3.929,125,4.563,131,4.121,132,3.604,133,2.887,134,2.887,136,3.788,151,4.21,153,2.887,290,5.276,375,4.21,376,4.21,424,4.655,425,5.332,426,4.655,427,4.655,428,5.402,429,5.402,430,5.332,431,5.332,432,5.332,433,4.21,434,3.611,435,5.332,436,4.655,437,4.655,438,5.332,439,5.332,440,5.332,441,5.332]],["title/injectables/AuthService.html",[0,0.496,31,1.933]],["body/injectables/AuthService.html",[0,0.411,2,0.683,3,0.062,4,0.062,5,0.055,8,0.39,9,2.289,10,0.013,13,0.098,14,0.592,15,1.693,19,0.491,21,1.212,22,1.132,23,0.304,24,0.813,26,1.259,28,0.194,29,3.893,30,0.264,31,1.6,33,2.865,34,1.189,45,2.936,46,3.639,47,1.475,50,0.062,51,0.055,53,0.879,55,0.911,56,1.212,57,1.95,58,1.348,62,1.212,63,1.314,69,2.015,70,1.544,77,3.587,80,1.491,82,1.703,91,1.6,93,2.135,95,0.877,101,3.313,104,0.005,105,0.005,145,0.814,153,1.131,179,1.649,243,1.131,255,3.225,265,1.414,287,1.872,292,1.923,328,4.349,334,4.181,335,4.181,338,1.82,340,3.313,357,1.824,358,1.824,364,1.824,372,0.988,377,3.313,380,1.402,382,2.883,390,2.527,433,1.649,442,1.824,443,3.38,444,3.38,445,3.38,446,3.38,447,3.38,448,4.257,449,3.38,450,3.38,451,3.38,452,2.089,453,5.75,454,2.089,455,3.38,456,2.089,457,2.103,458,3.38,459,2.089,460,4.779,461,3.38,462,4.257,463,3.445,464,3.38,465,5.374,466,3.706,467,2.089,468,3.717,469,3.38,470,5.374,471,2.089,472,3.38,473,2.089,474,3.38,475,2.089,476,3.38,477,5.84,478,2.089,479,2.089,480,2.089,481,3.38,482,2.089,483,2.951,484,1.824,485,1.824,486,3.361,487,2.089,488,1.328,489,4.257,490,1.414,491,2.089,492,2.089,493,2.089,494,2.089,495,2.089,496,2.089,497,2.089,498,2.089,499,4.257,500,2.089,501,2.089,502,1.649,503,2.089,504,1.824,505,2.089,506,2.089,507,1.519,508,1.824,509,1.824,510,1.254,511,1.824,512,1.131,513,2.089,514,2.089,515,2.089,516,3.38,517,3.38,518,1.328,519,2.089,520,2.089,521,0.561,522,2.089,523,2.089,524,1.328,525,1.649,526,2.089,527,1.649,528,2.089,529,2.089,530,2.089,531,2.089,532,2.089,533,3.38,534,4.893,535,2.089,536,4.893,537,3.38,538,2.089,539,2.089,540,2.089,541,2.089,542,2.089,543,2.089,544,2.089,545,2.089,546,2.089,547,2.089]],["title/classes/BaseModel.html",[51,0.107,548,2.017]],["body/classes/BaseModel.html",[3,0.15,4,0.15,5,0.134,8,0.312,10,0.013,13,0.237,19,0.519,23,0.308,28,0.192,44,2.386,48,3.041,50,0.15,51,0.132,104,0.01,105,0.01,219,1.725,273,1.707,306,1.78,521,2.066,548,3.174,549,1.707,550,4.402,551,1.67,552,5.584,553,5.584,554,6.502,555,5.042,556,5.042,557,5.042,558,5.042,559,6.426,560,4.352,561,5.042,562,5.042,563,5.044,564,5.073,565,6.426,566,6.426,567,6.426,568,5.042]],["title/classes/BasePaginationDto.html",[51,0.107,569,2.11]],["body/classes/BasePaginationDto.html",[3,0.126,4,0.126,5,0.112,8,0.262,10,0.013,13,0.2,19,0.534,23,0.317,24,0.911,28,0.126,50,0.126,51,0.15,58,0.795,104,0.009,105,0.009,219,2.093,306,1.83,338,1.815,508,3.703,509,3.703,510,2.545,511,3.703,512,2.296,521,2.145,549,1.436,551,1.491,569,2.963,570,4.266,571,3.703,572,4.725,573,4.401,574,4.401,575,4.401,576,4.401,577,5.279,578,5.288,579,2.408,580,2.408,581,4.17,582,3.084,583,4.241,584,4.715,585,4.241,586,4.178,587,4.241,588,4.241,589,4.241,590,4.241,591,4.624,592,4.766,593,1.781,594,4.241]],["title/guards/BasicTokenGuard.html",[595,2.211,596,3.224]],["body/guards/BasicTokenGuard.html",[0,0.706,3,0.129,4,0.129,5,0.114,7,2.745,8,0.405,10,0.013,13,0.203,14,1.017,15,1.705,16,3.464,17,2.868,18,3.319,19,0.426,21,1.052,22,0.983,23,0.253,24,0.706,25,2.533,26,0.983,27,2.347,28,0.173,29,3.732,30,0.546,31,3.566,32,2.745,47,1.884,50,0.129,51,0.113,52,1.462,53,1.122,55,0.924,56,0.783,57,1.567,58,1.372,62,0.783,63,1.159,66,1.884,68,2.133,69,1.513,70,1.159,74,2.591,75,2.924,77,2.457,78,2.745,80,1.198,82,2.077,88,4.441,91,1.623,93,1.884,95,1.813,104,0.009,105,0.009,112,2.338,255,4.523,390,2.231,460,5.95,463,4.288,468,5.069,486,5.777,488,2.745,490,2.924,596,4.583,597,2.457,598,5.726,599,5.805,600,5.805,601,5.805,602,3.409,603,4.318,604,4.318,605,4.318,606,4.318,607,3.77,608,4.318,609,4.318]],["title/guards/BearerTokenGuard.html",[11,2.766,595,2.211]],["body/guards/BearerTokenGuard.html",[0,0.711,1,3.152,3,0.086,4,0.086,5,0.077,6,3.818,7,1.84,8,0.388,9,4.248,10,0.013,11,5.052,12,1.292,13,0.136,14,0.764,15,1.631,16,2.888,17,2.888,18,3.12,19,0.32,21,0.791,22,0.738,23,0.254,24,0.53,25,2.737,26,0.989,27,2.364,28,0.204,29,3.57,30,0.366,31,3.12,32,1.84,33,3.238,34,1.647,35,4.634,36,1.737,37,1.96,38,1.647,39,1.84,40,1.647,41,1.737,42,1.84,43,2.774,44,1.37,45,3.765,46,1.96,47,2.877,48,3.238,49,3.902,50,0.157,51,0.137,52,0.98,53,1.134,54,4.146,55,1.124,56,0.952,57,1.905,58,1.433,59,4.146,60,3.556,61,3.556,62,1.195,63,1.837,64,3.556,65,3.338,66,3.255,67,3.959,68,2.594,69,2.468,70,1.891,71,4.146,72,3.338,73,4.952,74,2.619,75,1.96,76,2.285,77,3.57,78,1.84,79,1.737,80,1.622,81,1.96,82,1.731,83,2.285,84,2.285,85,2.285,86,2.285,87,3.445,88,1.96,89,2.285,90,4.952,91,1.088,92,3.445,93,1.263,94,2.955,95,1.215,96,2.285,97,2.285,98,3.445,99,2.155,100,2.285,101,4.465,102,2.774,103,2.285,104,0.006,105,0.006,597,1.647,602,2.285,610,2.895,611,2.895]],["title/controllers/ChatsController.html",[106,1.591,612,2.969]],["body/controllers/ChatsController.html",[3,0.152,4,0.152,5,0.135,8,0.462,10,0.013,13,0.24,14,1.132,19,0.374,21,0.922,22,0.861,23,0.221,24,0.618,26,1.094,28,0.23,30,0.643,50,0.152,51,0.133,55,1.089,56,0.922,62,0.922,104,0.01,105,0.01,106,1.983,108,2.057,112,2.755,197,3.678,292,2.896,294,3.193,306,1.281,338,2.441,359,3.235,362,4.109,363,2.513,365,3.054,366,3.054,367,3.235,385,3.235,612,4.699,613,4.442,614,3.699,615,7.103,616,5.088,617,5.061,618,3.699,619,6.463,620,5.088,621,4.263,622,4.017,623,3.446,624,4.017,625,5.088,626,3.446,627,5.088]],["title/classes/ChatsGateway.html",[51,0.107,628,2.969]],["body/classes/ChatsGateway.html",[3,0.066,4,0.066,5,0.058,8,0.397,10,0.013,13,0.104,14,0.617,15,1.839,19,0.472,21,1.121,22,1.047,23,0.269,24,0.752,26,1.122,28,0.214,30,0.278,31,3.041,33,3.041,34,1.252,45,1.32,46,2.387,50,0.066,51,0.058,52,1.193,53,0.916,55,1.079,56,1.302,57,1.279,58,1.274,62,0.399,63,1.581,69,1.545,70,1.354,74,2.646,77,1.252,80,1.783,81,1.49,82,1.963,104,0.005,105,0.005,145,2.294,166,1.741,189,2.986,217,2.803,228,3.85,287,0.591,306,1.269,309,2.241,338,1.395,372,1.041,380,1.445,457,1.087,507,1.6,518,1.399,521,1.899,525,1.737,549,0.745,551,0.916,614,2.563,621,3.711,622,1.737,624,2.783,628,2.563,629,1.921,630,4.648,631,4.409,632,4.409,633,4.409,634,6.426,635,3.525,636,3.85,637,4.409,638,3.525,639,3.525,640,4.409,641,2.2,642,4.402,643,2.869,644,2.2,645,4.409,646,2.2,647,3.525,648,2.2,649,2.2,650,3.415,651,6.209,652,3.525,653,2.2,654,4.496,655,2.2,656,3.666,657,3.525,658,2.2,659,3.525,660,2.2,661,3.525,662,2.2,663,2.2,664,3.206,665,3.525,666,2.2,667,5.042,668,5.042,669,2.2,670,3.525,671,5.14,672,1.6,673,1.921,674,1.252,675,2.2,676,2.2,677,3.525,678,3.525,679,1.6,680,1.6,681,1.737,682,2.2,683,2.2,684,1.737,685,1.921,686,1.737,687,1.921,688,3.525,689,1.49,690,2.2,691,2.2,692,2.2,693,2.2,694,2.2,695,2.2,696,2.2,697,2.2,698,2.2,699,3.525,700,2.2,701,3.525,702,3.525,703,2.2,704,1.921,705,1.921,706,2.2,707,1.921,708,3.525,709,2.2,710,1.921,711,1.921,712,2.2,713,1.921,714,2.2,715,3.026,716,2.2,717,1.921,718,3.666,719,2.2,720,1.6,721,2.2,722,1.921,723,3.041,724,2.2,725,2.2,726,2.2,727,2.115,728,2.783,729,1.821,730,2.2,731,2.2,732,2.2,733,2.2,734,3.481,735,2.2,736,2.2,737,2.2,738,3.077,739,2.2,740,4.409,741,2.2,742,1.921,743,2.2,744,2.2,745,5.042,746,2.2,747,2.2,748,2.2,749,3.077,750,2.2]],["title/injectables/ChatsMessagesService.html",[0,0.496,643,2.324]],["body/injectables/ChatsMessagesService.html",[0,0.666,2,1.299,3,0.118,4,0.118,5,0.105,8,0.388,10,0.013,13,0.187,14,0.96,15,1.632,19,0.461,21,1.138,22,1.063,23,0.273,24,0.763,26,1.146,28,0.225,30,0.502,50,0.118,51,0.104,53,1.425,55,1.173,56,1.227,58,1.027,62,0.993,63,1.472,80,1.101,104,0.008,105,0.008,141,1.96,166,1.96,219,1.973,273,1.344,287,1.066,338,2.52,380,1.571,457,1.96,521,2.092,569,3.498,570,2.259,643,3.119,664,4.305,674,2.259,684,3.133,715,3.29,723,3.243,727,3.29,728,4.957,729,2.831,734,4.957,751,3.133,752,5.482,753,5.482,754,3.969,755,4.305,756,3.89,757,3.969,758,4.786,759,3.969,760,5.61,761,3.969,762,3.969,763,5.61,764,4.923,765,3.969,766,2.688,767,3.133,768,2.886,769,2.382,770,2.259,771,4.565,772,2.708,773,4.327,774,3.465,775,3.465,776,3.465,777,3.465,778,3.465,779,3.465,780,3.465,781,2.523,782,3.133,783,3.465,784,2.688]],["title/entities/ChatsModel.html",[164,2.324,785,1.714]],["body/entities/ChatsModel.html",[3,0.153,4,0.153,5,0.136,8,0.317,10,0.013,12,1.521,13,0.242,19,0.477,23,0.283,28,0.224,50,0.153,51,0.134,82,1.925,104,0.01,105,0.01,145,3.079,164,3.699,166,3.903,259,2.78,273,1.738,306,1.636,372,2.43,548,3.211,551,1.69,686,4.054,723,3.358,742,5.676,784,4.831,785,2.729,786,4.483,787,5.632,788,4.054,789,5.135,790,5.676,791,6.899,792,4.483,793,6.501,794,5.135,795,3.264,796,5.676,797,5.132]],["title/modules/ChatsModule.html",[113,1.591,126,2.766]],["body/modules/ChatsModule.html",[3,0.156,4,0.156,5,0.138,10,0.013,28,0.25,30,0.66,50,0.156,51,0.137,104,0.01,105,0.01,108,2.657,113,2.802,115,2.58,116,2.58,117,2.828,118,2.828,119,2.58,120,3.893,121,2.828,125,4.297,126,5.714,128,4.516,131,4.1,132,3.558,133,2.828,134,2.828,136,3.739,140,3.537,141,2.58,164,2.973,166,3.246,434,3.537,612,5.227,621,4.763,622,4.124,628,4.778,643,4.516,685,4.561,686,4.124,798,4.561,799,4.561,800,5.223,801,5.223,802,5.227,803,5.223,804,5.223,805,4.561,806,4.124,807,5.223,808,3.798,809,5.223]],["title/injectables/ChatsService.html",[0,0.496,621,2.451]],["body/injectables/ChatsService.html",[0,0.688,2,1.362,3,0.124,4,0.124,5,0.11,8,0.427,10,0.013,13,0.196,14,0.992,15,1.938,19,0.507,21,1.252,22,1.169,23,0.301,24,0.84,26,1.262,28,0.227,30,0.526,50,0.124,51,0.109,53,1.472,55,1.212,56,1.166,58,1.061,62,1.166,63,1.118,80,1.154,104,0.008,105,0.008,141,2.056,164,2.368,219,1.728,273,1.409,338,2.456,380,1.623,457,2.797,521,2.048,614,3.026,617,4.678,621,3.398,623,2.818,624,4.471,636,4.944,650,4.678,674,2.368,715,2.498,718,4.679,720,4.117,755,4.392,756,3.94,766,2.818,768,3.026,781,2.646,787,4.471,805,3.634,810,3.634,811,5.662,812,5.662,813,4.162,814,4.162,815,5.662,816,5.662,817,4.162,818,5.662,819,4.162,820,5.662,821,4.162,822,4.162,823,4.162,824,4.162,825,4.162,826,4.162,827,4.162,828,4.162,829,4.162]],["title/controllers/CommentsController.html",[106,1.591,830,2.969]],["body/controllers/CommentsController.html",[3,0.078,4,0.078,5,0.069,8,0.476,10,0.013,13,0.123,14,0.706,15,1.818,19,0.44,21,1.085,22,1.014,23,0.261,24,0.728,26,1.209,28,0.23,30,0.33,38,1.485,39,1.659,40,1.485,41,1.566,42,1.659,49,1.413,50,0.078,51,0.068,53,0.678,55,0.863,56,1.396,58,0.923,62,1.085,80,1.661,82,1.954,91,1.515,104,0.006,105,0.006,106,1.017,108,1.055,145,2.159,197,3.602,219,2.162,273,0.883,292,1.485,294,1.991,306,1.507,336,4.374,338,1.753,344,5.742,354,1.759,355,1.897,359,1.659,362,4.024,363,1.289,365,1.566,366,1.566,367,1.659,371,2.06,372,1.235,380,1.155,385,3.807,457,2.433,521,2.145,618,1.897,623,1.767,626,4.056,674,1.485,830,2.931,831,2.278,832,2.61,833,3.52,834,4.301,835,4.926,836,4.926,837,4.926,838,4.926,839,2.278,840,6.03,841,4.935,842,4.288,843,2.61,844,4.031,845,2.61,846,5.683,847,2.61,848,2.61,849,2.61,850,2.61,851,3.752,852,2.61,853,2.61,854,3.752,855,2.61,856,2.61,857,2.61,858,3.522,859,2.278,860,4.028,861,2.61,862,2.06,863,5.086,864,2.06,865,1.897,866,2.956,867,2.06,868,3.889,869,2.06,870,1.897,871,2.278,872,2.545,873,1.767,874,2.278,875,1.566,876,2.06,877,3.752,878,1.767,879,2.06,880,2.294,881,1.767,882,2.61,883,2.06,884,5.989,885,2.61,886,2.61,887,4.926,888,2.61,889,5.54,890,2.61,891,2.61,892,3.52,893,2.61,894,4.031,895,2.61,896,2.61,897,2.61,898,2.61]],["title/entities/CommentsModel.html",[168,2.11,785,1.714]],["body/entities/CommentsModel.html",[3,0.139,4,0.139,5,0.124,8,0.288,10,0.013,12,1.383,13,0.22,19,0.531,23,0.315,28,0.224,50,0.139,51,0.16,82,1.811,104,0.009,105,0.009,142,3.806,145,3.002,168,3.158,219,1.642,259,2.528,273,1.58,287,1.642,306,1.821,354,3.277,372,2.209,548,3.02,551,1.589,579,1.96,591,3.887,593,1.96,772,3.368,785,2.567,790,6.316,791,6.316,795,2.968,872,3.522,899,4.076,900,5.952,901,4.445,902,6.114,903,4.668,904,4.076,905,4.668,906,3.686,907,4.668,908,4.668,909,6.114,910,4.668,911,3.158,912,3.686,913,4.334,914,4.617,915,2.306]],["title/modules/CommentsModule.html",[113,1.591,127,2.766]],["body/modules/CommentsModule.html",[3,0.152,4,0.152,5,0.135,10,0.013,14,0.894,19,0.375,21,0.925,22,0.864,23,0.222,24,0.62,26,0.864,28,0.246,30,0.645,50,0.152,51,0.134,52,1.728,104,0.01,105,0.01,108,2.618,113,2.772,115,2.521,116,2.521,117,2.763,118,2.763,119,2.521,120,3.851,121,2.763,125,4.272,127,5.698,128,4.49,129,5.015,131,4.075,132,3.506,133,2.763,134,2.763,136,3.685,140,3.456,141,2.521,168,3.345,277,5.654,278,5.654,279,6.531,309,3.245,434,3.456,806,4.029,808,3.711,830,5.171,866,4.735,867,4.029,916,4.456,917,4.456,918,5.104,919,5.104,920,5.104,921,5.104,922,5.104,923,5.104,924,4.029,925,3.711,926,5.104,927,5.104,928,5.104,929,4.456,930,5.104]],["title/injectables/CommentsService.html",[0,0.496,866,2.451]],["body/injectables/CommentsService.html",[0,0.47,2,0.809,3,0.074,4,0.074,5,0.066,8,0.414,10,0.013,13,0.116,14,0.677,15,2.013,19,0.492,21,1.213,22,1.133,23,0.291,24,0.814,26,1.265,28,0.21,30,0.313,50,0.074,51,0.065,53,1.005,55,0.827,56,1.413,57,1.402,58,1.213,62,1.172,63,1.278,69,1.354,70,1.038,80,1.795,104,0.006,105,0.006,141,1.221,145,2.097,168,1.277,219,2.19,273,0.837,338,2.433,354,2.077,372,1.17,380,1.108,390,1.997,457,3.058,521,2.184,623,1.674,674,1.407,755,4.375,756,3.342,766,1.674,768,1.798,772,3.196,781,1.572,782,1.952,833,3.375,834,4.155,839,2.159,840,6.286,841,5.013,842,4.576,846,5.703,851,3.645,854,3.645,858,3.421,866,2.32,868,3.758,869,1.952,872,3.017,924,1.952,931,2.159,932,4.759,933,3.865,934,3.375,935,3.865,936,3.865,937,4.759,938,2.472,939,2.472,940,3.865,941,2.472,942,2.472,943,4.246,944,2.472,945,3.865,946,2.472,947,3.375,948,2.472,949,3.865,950,2.472,951,3.46,952,3.865,953,2.472,954,2.472,955,2.472,956,3.017,957,3.758,958,2.472,959,1.952,960,2.472,961,2.472,962,3.865,963,2.472,964,3.375,965,2.472,966,2.472,967,3.375,968,3.865,969,4.759,970,2.472,971,3.865,972,2.472,973,2.472]],["title/controllers/CommonController.html",[106,1.591,974,2.969]],["body/controllers/CommonController.html",[3,0.16,4,0.16,5,0.202,8,0.413,10,0.013,13,0.253,14,1.172,19,0.395,21,0.974,22,0.91,23,0.234,24,0.653,26,1.132,28,0.217,30,0.679,50,0.16,51,0.141,55,1.15,56,0.974,62,0.974,104,0.01,105,0.01,106,2.095,108,2.173,112,2.91,292,3.059,306,1.353,354,2.346,378,3.417,756,3.763,865,3.908,974,4.864,975,4.693,976,5.375,977,7.283,978,5.375,979,7.283,980,5.375,981,5.375,982,5.282,983,6.69,984,4.693,985,5.375,986,4.244,987,5.375,988,5.375,989,5.375,990,5.375]],["title/modules/CommonModule.html",[113,1.591,128,2.324]],["body/modules/CommonModule.html",[3,0.134,4,0.134,5,0.177,10,0.013,28,0.243,30,0.567,50,0.134,51,0.117,58,0.841,62,1.079,63,1.599,66,1.958,70,1.205,104,0.009,105,0.009,108,2.408,113,2.605,115,2.216,116,2.216,117,2.429,118,2.429,119,2.216,120,3.62,121,3.62,125,4.125,128,4.63,131,3.936,132,3.225,133,2.429,134,2.429,136,3.389,190,2.693,231,3.917,319,2.852,378,2.852,390,2.318,434,3.038,466,3.389,756,4.231,808,3.262,956,2.318,974,4.861,982,3.542,984,3.917,986,3.542,991,3.917,992,3.917,993,4.486,994,3.917,995,4.486,996,4.486,997,4.486,998,4.486,999,5.2,1000,4.486,1001,5.2,1002,4.486,1003,4.486,1004,3.917,1005,4.33,1006,3.917,1007,5.955,1008,4.486,1009,4.486,1010,4.486,1011,4.486,1012,4.486,1013,5.955,1014,3.262,1015,4.486,1016,7.412,1017,5.955,1018,6.685,1019,4.486,1020,4.486,1021,4.486,1022,4.486,1023,4.486,1024,6.685,1025,4.486,1026,4.486,1027,4.486,1028,5.955,1029,4.486]],["title/injectables/CommonService.html",[0,0.496,756,2.11]],["body/injectables/CommonService.html",[0,0.444,2,0.753,3,0.069,4,0.069,5,0.061,8,0.371,10,0.013,13,0.108,14,0.64,15,1.561,19,0.441,21,1.275,22,1.016,23,0.306,24,0.73,26,1.166,27,2.427,28,0.188,30,0.291,50,0.069,51,0.06,53,0.949,55,0.492,56,1.386,57,0.835,58,1.422,62,1.088,69,0.806,70,0.981,72,1.462,80,1.013,91,1.373,93,1.982,95,1.533,104,0.008,105,0.005,153,1.245,179,1.816,190,4.037,243,1.245,249,1.558,273,1.91,287,1.851,294,2.555,338,2.355,377,3.502,380,2.082,382,2.473,457,1.804,484,2.008,485,2.008,502,4.083,504,3.188,510,1.381,548,1.136,560,4.667,563,2.473,569,3.752,573,1.558,574,2.473,575,1.558,576,1.558,577,1.558,579,1.907,580,2.953,654,3.302,717,2.008,727,1.381,729,2.914,755,5.032,756,1.886,763,5.935,764,5.203,769,1.381,915,1.136,943,3.76,956,2.346,1030,2.008,1031,4.541,1032,4.541,1033,4.541,1034,3.965,1035,3.652,1036,1.816,1037,2.3,1038,2.3,1039,7.84,1040,7.584,1041,2.3,1042,4.925,1043,2.3,1044,2.3,1045,6.004,1046,2.3,1047,2.3,1048,2.3,1049,2.3,1050,3.652,1051,2.3,1052,5.171,1053,2.3,1054,2.3,1055,1.816,1056,2.3,1057,2.3,1058,2.3,1059,2.3,1060,2.3,1061,5.171,1062,3.652,1063,4.541,1064,2.3,1065,2.008,1066,2.3,1067,4.541,1068,4.541,1069,3.652,1070,4.541,1071,4.541,1072,2.3,1073,2.3,1074,2.3,1075,2.3,1076,3.652,1077,2.3,1078,2.3,1079,3.652,1080,3.652,1081,2.3,1082,2.3,1083,2.3,1084,2.3,1085,2.3,1086,4.453,1087,3.652,1088,2.3,1089,2.3,1090,2.3,1091,2.3,1092,2.3,1093,3.652,1094,2.3,1095,3.652,1096,2.883,1097,2.3,1098,2.3,1099,2.3,1100,3.652,1101,5.641,1102,2.3,1103,2.3,1104,2.3,1105,3.652,1106,2.008,1107,2.3,1108,2.3,1109,3.652,1110,2.008,1111,2.3]],["title/classes/CreateChatDto.html",[51,0.107,650,2.766]],["body/classes/CreateChatDto.html",[3,0.169,4,0.169,5,0.15,8,0.35,10,0.013,13,0.266,19,0.416,23,0.246,28,0.169,50,0.169,51,0.181,63,1.854,104,0.01,105,0.01,219,1.854,306,1.424,338,2.185,521,2.173,549,1.915,551,1.795,591,4.389,593,2.375,650,4.676,1112,6.028,1113,4.113,1114,7.452,1115,5.657,1116,5.451,1117,5.657,1118,6.904]],["title/classes/CreateCommentsDto.html",[51,0.107,858,2.596]],["body/classes/CreateCommentsDto.html",[3,0.164,4,0.164,5,0.146,8,0.42,10,0.013,12,2.011,13,0.259,19,0.405,23,0.24,28,0.22,50,0.164,51,0.144,104,0.01,105,0.01,168,3.804,287,1.824,306,1.386,338,2.149,363,2.721,549,1.865,551,1.766,858,4.318,872,4.079,924,4.349,1119,5.93,1120,4.005,1121,6.792,1122,4.349,1123,5.508,1124,4.005,1125,3.502,1126,3.502,1127,4.938]],["title/classes/CreateMessagesDto.html",[51,0.107,664,2.596]],["body/classes/CreateMessagesDto.html",[3,0.153,4,0.153,5,0.136,8,0.317,10,0.013,12,1.925,13,0.242,19,0.477,23,0.283,24,0.911,28,0.213,50,0.153,51,0.17,104,0.01,105,0.01,166,2.537,219,2.013,306,1.636,338,2.057,521,2.013,549,1.738,551,1.69,584,4.402,591,4.535,592,4.535,593,2.156,664,4.133,718,5.186,723,3.358,738,6.228,767,4.054,1124,3.734,1125,3.264,1126,3.264,1128,6.228,1129,4.483,1130,6.501,1131,5.135,1132,5.135]],["title/classes/CreatePostDto.html",[51,0.107,1133,2.766]],["body/classes/CreatePostDto.html",[3,0.139,4,0.139,5,0.124,8,0.447,10,0.013,12,1.811,13,0.22,19,0.501,23,0.297,28,0.216,50,0.139,51,0.16,58,1.146,63,1.254,104,0.009,105,0.009,142,3.709,287,2.069,306,1.716,338,1.935,363,2.306,390,3.158,415,4.899,549,1.58,551,1.589,579,2.862,580,1.96,592,3.887,593,1.96,911,3.158,1116,3.686,1122,5.382,1124,3.394,1125,2.968,1126,2.968,1127,5.259,1133,4.14,1134,6.316,1135,3.394,1136,6.114,1137,5.459,1138,5.459,1139,4.617,1140,4.076,1141,6.114,1142,4.668,1143,4.668,1144,4.076,1145,4.668,1146,3.686]],["title/classes/CreatePostImageDto.html",[51,0.107,1147,2.969]],["body/classes/CreatePostImageDto.html",[3,0.171,4,0.171,5,0.152,8,0.354,10,0.013,12,2.06,23,0.303,28,0.207,50,0.171,51,0.15,104,0.01,105,0.01,159,4.263,190,4.174,338,2.201,354,3.035,549,1.938,1086,5.491,1124,4.163,1125,3.64,1126,3.64,1147,5.056,1148,4.999,1149,4.999,1150,6.954,1151,3.877]],["title/classes/CreatePostsSeeder.html",[51,0.107,1152,3.224]],["body/classes/CreatePostsSeeder.html",[3,0.144,4,0.144,5,0.128,8,0.386,10,0.013,13,0.227,14,1.094,15,1.8,19,0.354,21,0.874,22,0.816,23,0.21,24,0.586,26,0.816,27,2.525,28,0.206,50,0.144,51,0.126,52,2.114,56,1.132,58,1.373,80,1.338,104,0.009,105,0.009,142,3.085,143,4.211,236,5.468,273,2.48,549,1.633,579,2.025,915,2.383,1065,4.211,1152,4.931,1153,5.453,1154,4.211,1155,6.926,1156,6.926,1157,4.823,1158,6.907,1159,7.325,1160,7.325,1161,4.823,1162,6.926,1163,6.245,1164,4.823,1165,6.245,1166,6.245,1167,4.823,1168,4.823,1169,4.823,1170,4.823]],["title/classes/EnterChatDto.html",[51,0.107,656,2.969]],["body/classes/EnterChatDto.html",[3,0.171,4,0.171,5,0.152,8,0.354,10,0.013,13,0.27,19,0.421,23,0.25,28,0.171,50,0.171,51,0.182,63,1.869,104,0.01,105,0.01,219,1.869,306,1.443,338,2.203,521,2.093,549,1.942,551,1.81,591,4.765,593,2.408,656,5.062,1113,4.17,1116,5.496,1171,6.078,1172,7.496,1173,5.735]],["title/injectables/GoogleAuthGuard.html",[0,0.496,368,2.969]],["body/injectables/GoogleAuthGuard.html",[0,0.817,2,1.773,3,0.162,4,0.162,5,0.144,8,0.452,10,0.013,12,1.991,13,0.255,14,1.178,15,1.9,16,3.321,17,3.321,19,0.398,21,0.982,22,0.917,23,0.236,24,0.659,25,2.934,26,1.138,27,2.718,28,0.2,30,0.685,50,0.162,51,0.142,56,0.982,58,1.016,62,0.982,79,4.035,80,1.503,94,3.67,104,0.01,105,0.01,295,3.252,368,4.888,466,3.084,1174,5.87,1175,4.278,1176,4.553,1177,4.274,1178,6.723,1179,4.731,1180,4.731,1181,3.67,1182,4.731]],["title/injectables/GoogleStrategy.html",[0,0.496,428,2.766]],["body/injectables/GoogleStrategy.html",[0,0.679,2,1.335,3,0.122,4,0.122,5,0.108,8,0.345,10,0.013,12,1.655,13,0.192,14,0.979,15,1.656,19,0.468,21,1.012,22,0.946,23,0.277,24,0.679,26,1.078,28,0.221,30,0.516,33,3.591,34,2.322,50,0.122,51,0.107,53,1.452,55,0.873,56,1.242,58,1.284,62,0.739,80,1.132,82,1.655,104,0.008,105,0.008,153,2.209,243,2.209,287,2.149,295,4.112,334,4.632,335,4.981,377,4.64,380,1.601,382,3.783,428,3.783,436,3.563,437,3.563,463,3.625,521,1.5,560,2.763,915,2.016,1036,3.221,1176,2.763,1177,4.05,1181,2.763,1183,3.563,1184,4.878,1185,6.851,1186,5.562,1187,4.08,1188,4.08,1189,3.221,1190,3.563,1191,6.922,1192,5.982,1193,5.982,1194,4.08,1195,3.563,1196,3.563,1197,3.563,1198,4.08,1199,3.563,1200,3.563,1201,3.563,1202,4.08,1203,4.08,1204,3.563,1205,3.563,1206,4.08,1207,4.08,1208,4.08,1209,4.08,1210,4.08,1211,5.587,1212,5.587,1213,5.587,1214,4.08,1215,4.08,1216,4.08,1217,3.563]],["title/classes/HttpExceptionFilter.html",[51,0.107,1218,3.224]],["body/classes/HttpExceptionFilter.html",[3,0.137,4,0.137,5,0.122,8,0.374,10,0.013,13,0.216,14,1.06,19,0.338,21,0.833,22,0.778,23,0.2,24,0.559,26,0.778,28,0.137,30,0.581,47,3.464,50,0.137,51,0.12,52,2.049,56,1.097,58,1.466,70,1.235,72,3.848,99,2.99,104,0.009,105,0.009,190,2.759,249,4.87,265,4.099,309,2.923,316,3.343,319,4.972,518,4.302,549,1.556,680,4.401,723,3.127,1218,4.779,1219,5.285,1220,3.63,1221,6.767,1222,5.285,1223,6.278,1224,6.278,1225,4.597,1226,5.285,1227,4.014,1228,4.597,1229,4.597,1230,4.597,1231,4.597,1232,5.285,1233,4.597,1234,4.014,1235,6.053,1236,6.053,1237,6.053,1238,6.053,1239,4.597,1240,4.597,1241,4.597,1242,4.597,1243,3.63,1244,4.597]],["title/entities/ImageModel.html",[159,2.324,785,1.714]],["body/entities/ImageModel.html",[3,0.103,4,0.103,5,0.091,8,0.213,10,0.013,12,1.021,13,0.162,19,0.467,23,0.315,24,0.603,28,0.216,50,0.148,51,0.152,62,0.9,104,0.007,105,0.007,142,3.782,145,1.934,159,3.62,189,3.361,190,3.818,219,1.333,259,1.867,273,1.167,287,1.562,306,1.601,354,2.942,415,4.308,548,3.142,551,1.29,579,1.448,580,2.084,592,3.155,593,1.448,689,3.938,729,2.564,785,2.084,901,2.507,906,2.722,911,2.564,912,2.722,913,4.044,914,4.308,915,2.873,1006,3.01,1086,4.591,1139,3.361,1245,2.722,1246,3.448,1247,3.448,1248,4.334,1249,3.448,1250,3.448,1251,5.554,1252,5.022,1253,4.963,1254,3.448,1255,5.712,1256,3.448,1257,3.448,1258,3.448,1259,3.448,1260,3.448,1261,4.963,1262,2.722,1263,4.334,1264,3.448,1265,3.448,1266,3.448,1267,3.448,1268,3.448]],["title/guards/IsCommentMineOrAdminGuard.html",[595,2.211,870,2.969]],["body/guards/IsCommentMineOrAdminGuard.html",[0,0.736,3,0.137,4,0.137,5,0.122,8,0.418,10,0.013,13,0.217,14,1.061,15,1.76,16,3.554,17,2.993,18,3.405,19,0.445,21,1.098,22,1.025,23,0.264,24,0.736,25,2.644,26,1.025,27,2.449,28,0.202,29,3.853,30,0.582,50,0.137,51,0.121,52,1.559,53,1.575,55,0.985,56,0.834,57,2.198,58,1.349,62,1.098,63,1.627,66,2.644,68,2.274,69,2.123,70,1.627,80,1.277,82,1.363,104,0.009,105,0.009,372,2.179,380,1.319,527,3.635,597,2.62,840,3.635,866,4.318,867,3.635,870,4.405,872,3.498,873,4.586,1269,5.912,1270,3.635,1271,4.604,1272,4.604,1273,6.058,1274,4.604,1275,5.346,1276,2.763,1277,3.635,1278,4.02,1279,4.02,1280,4.604,1281,4.02,1282,4.604,1283,4.604,1284,4.02]],["title/guards/IsPostMineOrAdminGuard.html",[595,2.211,1285,2.969]],["body/guards/IsPostMineOrAdminGuard.html",[0,0.653,3,0.115,4,0.115,5,0.102,8,0.382,10,0.013,13,0.182,14,0.942,15,1.829,16,3.305,17,2.655,18,3.166,19,0.395,21,0.974,22,0.91,23,0.234,24,0.653,25,2.346,26,0.91,27,2.705,28,0.184,29,3.52,30,0.488,47,2.346,50,0.115,51,0.101,52,1.306,53,1.397,55,0.826,56,0.974,57,2.244,58,1.254,62,0.974,63,1.443,66,2.346,68,1.906,69,2.167,70,1.661,80,1.07,82,1.143,91,1.45,93,1.684,95,1.62,104,0.008,105,0.008,287,1.443,354,3.07,372,1.826,380,1.106,488,2.453,512,2.91,521,1.443,527,3.046,597,2.196,846,5.114,873,4.189,880,3.807,881,2.613,883,4.884,956,3.195,1270,3.046,1275,4.884,1276,2.316,1277,3.046,1278,3.369,1279,3.369,1281,3.369,1284,3.369,1285,4.864,1286,5.401,1287,5.553,1288,3.349,1289,4.693,1290,5.375,1291,3.369,1292,3.859,1293,3.859,1294,3.369,1295,3.369,1296,3.859,1297,3.859]],["title/injectables/KakaoAuthGuard.html",[0,0.496,373,2.969]],["body/injectables/KakaoAuthGuard.html",[0,0.817,2,1.773,3,0.162,4,0.162,5,0.144,8,0.452,10,0.013,12,1.991,13,0.255,14,1.178,15,1.9,16,3.321,17,3.321,19,0.398,21,0.982,22,0.917,23,0.236,24,0.659,25,2.934,26,1.138,27,2.718,28,0.2,30,0.685,50,0.162,51,0.142,56,0.982,58,1.016,62,0.982,79,4.035,80,1.503,94,3.67,104,0.01,105,0.01,295,3.252,373,4.888,466,3.084,1175,4.278,1176,4.553,1179,4.731,1180,4.731,1181,3.67,1182,4.731,1298,5.87,1299,4.274,1300,6.723]],["title/injectables/KakaoStrategy.html",[0,0.496,429,2.766]],["body/injectables/KakaoStrategy.html",[0,0.682,2,1.345,3,0.123,4,0.123,5,0.109,8,0.347,10,0.013,12,1.663,13,0.193,14,0.984,15,1.787,19,0.412,21,1.018,22,0.95,23,0.244,24,0.682,26,0.95,27,2.585,28,0.221,30,0.52,33,3.663,34,2.339,50,0.123,51,0.108,53,1.46,55,1.201,56,1.245,58,1.199,80,1.14,82,1.663,104,0.008,105,0.008,153,2.226,243,2.226,253,4.902,287,2.108,295,3.37,298,3.589,334,4.65,335,4.997,375,3.245,376,3.245,377,4.654,380,1.609,381,3.589,382,3.802,429,3.802,463,3.911,521,1.508,524,4.065,729,2.123,1036,3.245,1176,3.802,1181,2.784,1184,4.902,1186,5.583,1190,3.589,1191,6.998,1192,6,1193,6,1195,3.589,1196,3.589,1199,3.589,1200,3.589,1201,3.589,1204,3.589,1205,3.589,1217,3.589,1299,4.369,1301,3.589,1302,4.11,1303,4.11,1304,5.615,1305,4.11,1306,5.615,1307,5.615,1308,6.395,1309,4.11]],["title/injectables/LogInterceptor.html",[0,0.496,183,2.969]],["body/injectables/LogInterceptor.html",[0,0.682,2,1.345,3,0.205,4,0.123,5,0.109,8,0.395,10,0.013,13,0.193,14,0.984,18,3.252,19,0.412,21,0.745,22,0.696,23,0.278,24,0.5,25,2.45,26,0.95,28,0.191,30,0.52,43,3.569,44,1.945,47,2.999,48,3.598,50,0.123,51,0.108,52,1.392,55,1.368,56,1.018,58,1.392,62,0.745,65,2.613,66,3.241,68,2.031,70,1.932,99,2.774,104,0.008,105,0.008,183,4.082,267,6,282,5.583,319,2.613,380,1.833,415,2.784,457,2.031,510,4.125,551,1.46,554,3.589,563,2.784,579,1.726,580,1.726,1243,3.245,1310,3.589,1311,4.902,1312,4.902,1313,6,1314,4.11,1315,6.282,1316,5.615,1317,4.11,1318,4.902,1319,4.902,1320,3.245,1321,3.589,1322,3.589,1323,3.589,1324,4.11,1325,7.427,1326,4.902,1327,4.902,1328,5.615,1329,5.231,1330,5.615,1331,4.11,1332,4.11,1333,3.589,1334,4.11,1335,4.11,1336,4.11,1337,4.11,1338,4.11,1339,4.11,1340,4.11]],["title/injectables/LogMiddleware.html",[0,0.496,161,2.969]],["body/injectables/LogMiddleware.html",[0,0.811,2,1.75,3,0.159,4,0.159,5,0.142,8,0.449,10,0.013,13,0.252,14,1.168,19,0.393,21,0.969,22,0.905,23,0.233,24,0.65,26,0.905,28,0.199,30,0.676,47,2.334,50,0.159,51,0.14,52,1.811,56,1.317,66,2.911,70,1.436,99,3.59,104,0.01,105,0.01,161,4.849,309,3.401,316,5.284,319,4.837,378,4.977,415,3.623,510,4.699,1243,4.223,1341,4.67,1342,5.823,1343,5.823,1344,6.643,1345,5.349,1346,5.823,1347,5.349,1348,5.349,1349,5.349]],["title/classes/LoginDto.html",[51,0.107,328,2.596]],["body/classes/LoginDto.html",[3,0.145,4,0.145,5,0.129,8,0.429,10,0.013,13,0.228,19,0.46,23,0.273,28,0.187,50,0.145,51,0.164,104,0.009,105,0.009,255,4.168,287,1.971,306,1.578,328,3.985,363,2.397,463,3.952,549,1.642,551,1.63,593,2.037,911,3.588,1127,5.05,1288,3.975,1350,4.236,1351,5.473,1352,5.473,1353,4.851,1354,5.473,1355,4.851]],["title/injectables/MaxLengthPipe.html",[0,0.496,1356,2.766]],["body/injectables/MaxLengthPipe.html",[0,0.824,2,1.303,3,0.119,4,0.119,5,0.106,8,0.455,10,0.013,13,0.187,14,0.962,19,0.404,21,0.996,22,0.93,23,0.239,24,0.668,26,1.148,28,0.119,30,0.503,50,0.188,51,0.165,52,2.13,53,1.035,55,1.451,56,1.43,57,2.282,62,0.996,69,1.925,70,1.475,104,0.008,105,0.008,112,2.975,219,1.821,287,1.821,380,1.575,580,2.847,689,3.721,956,3.675,1356,3.721,1357,2.896,1358,3.477,1359,5.808,1360,3.983,1361,5.173,1362,5.354,1363,5.585,1364,5.808,1365,3.983,1366,5.354,1367,4.593,1368,2.697,1369,4.966,1370,4.338,1371,4.338,1372,3.145,1373,2.697]],["title/controllers/MessagesController.html",[106,1.591,802,2.969]],["body/controllers/MessagesController.html",[3,0.142,4,0.142,5,0.126,8,0.45,10,0.013,13,0.224,14,1.084,19,0.349,21,0.862,22,0.805,23,0.207,24,0.578,26,1.047,28,0.225,30,0.601,50,0.142,51,0.124,53,1.236,55,1.017,56,1.247,62,0.862,63,1.661,104,0.009,105,0.009,106,1.853,108,1.922,197,3.521,219,1.847,292,2.706,294,3.056,306,1.197,338,2.495,359,3.023,362,3.933,363,2.349,365,2.854,366,2.854,367,3.023,380,1.363,385,3.023,521,2.079,569,3.763,570,2.706,618,3.457,626,3.22,642,4.151,643,3.521,715,3.713,718,4.499,769,2.854,772,2.349,781,3.023,802,4.499,863,4.499,1374,4.151,1375,4.755,1376,6.878,1377,4.755,1378,4.755,1379,4.755,1380,4.755,1381,4.755,1382,4.755]],["title/entities/MessagesModel.html",[166,2.017,785,1.714]],["body/entities/MessagesModel.html",[3,0.124,4,0.124,5,0.11,8,0.256,10,0.013,12,1.228,13,0.195,19,0.507,23,0.3,28,0.215,50,0.124,51,0.148,82,2.043,104,0.008,105,0.008,145,3.174,164,4.413,166,3.407,259,2.245,273,1.404,287,1.517,306,1.736,372,1.962,548,3.407,551,1.468,593,1.741,715,4.331,723,3.318,729,2.918,772,3.173,773,5.072,784,4.671,785,2.371,795,2.636,901,4.67,904,3.62,911,2.918,913,3.591,914,5.386,1383,3.62,1384,5.648,1385,4.146,1386,5.648,1387,4.146,1388,4.146,1389,5.648,1390,4.146,1391,3.62]],["title/injectables/MinLengthPipe.html",[0,0.496,1373,2.766]],["body/injectables/MinLengthPipe.html",[0,0.824,2,1.303,3,0.119,4,0.119,5,0.106,8,0.455,10,0.013,13,0.187,14,0.962,19,0.404,21,0.996,22,0.93,23,0.239,24,0.668,26,1.148,28,0.119,30,0.503,50,0.188,51,0.165,52,2.13,53,1.035,55,1.451,56,1.43,57,2.282,62,0.996,69,1.925,70,1.475,104,0.008,105,0.008,112,2.975,219,1.821,287,1.821,380,1.575,580,2.847,689,3.721,956,3.675,1356,2.697,1357,2.896,1358,3.477,1359,5.808,1361,5.173,1362,5.354,1363,5.585,1364,5.808,1366,5.354,1367,4.593,1368,2.697,1369,4.966,1370,4.338,1371,4.338,1372,3.145,1373,3.721,1392,3.983,1393,3.983]],["title/classes/PaginateChatDto.html",[51,0.107,617,2.766]],["body/classes/PaginateChatDto.html",[3,0.141,4,0.141,5,0.125,8,0.291,10,0.013,12,1.822,13,0.222,19,0.553,23,0.328,24,0.939,28,0.141,50,0.141,51,0.123,104,0.009,105,0.009,219,1.95,306,1.896,338,1.947,521,2.023,549,1.596,551,1.6,569,4.122,570,2.683,572,4.474,573,4.167,574,4.167,575,4.167,576,4.167,577,4.917,578,4.474,579,2.583,580,2.583,581,3.428,582,3.428,584,4.917,586,3.693,617,4.167,769,2.829,1113,3.428,1394,4.116,1395,5.101,1396,3.722,1397,3.722,1398,3.722,1399,3.722,1400,3.722]],["title/classes/PaginateCommentsDto.html",[51,0.107,851,2.766]],["body/classes/PaginateCommentsDto.html",[3,0.141,4,0.141,5,0.125,8,0.292,10,0.013,12,1.826,13,0.223,19,0.554,23,0.328,24,0.94,28,0.141,50,0.141,51,0.124,104,0.009,105,0.009,219,1.952,306,1.897,338,1.951,521,2.024,549,1.601,551,1.603,569,4.125,570,2.69,572,4.482,573,4.175,574,4.175,575,4.175,576,4.175,577,4.923,578,4.482,579,2.588,580,2.588,581,3.437,582,3.437,584,4.923,586,3.7,769,2.837,851,4.175,1120,3.437,1395,5.106,1396,3.733,1397,3.733,1398,3.733,1399,3.733,1400,3.733,1401,4.128]],["title/classes/PaginatePostDto.html",[51,0.107,1402,2.969]],["body/classes/PaginatePostDto.html",[3,0.113,4,0.113,5,0.101,8,0.235,10,0.013,12,1.575,13,0.179,19,0.567,23,0.336,24,0.983,28,0.159,50,0.113,51,0.139,63,1.428,104,0.008,105,0.008,219,1.947,287,1.785,306,1.942,338,1.683,466,3.027,521,1.878,549,1.287,551,1.383,569,3.923,570,2.163,572,3.868,573,3.602,574,3.602,575,3.602,576,3.602,577,4.501,578,3.868,579,2.233,580,2.233,581,2.764,582,2.764,584,4.738,586,3.193,591,3.382,592,4.447,593,1.596,769,2.282,911,3.17,1135,2.764,1144,3.319,1395,4.738,1396,3.001,1397,3.001,1398,3.001,1399,3.001,1400,3.001,1402,3.868,1403,6.108,1404,6.136,1405,6.136,1406,6.136,1407,6.136,1408,3.801,1409,3.801,1410,5.319,1411,3.801,1412,3.801,1413,5.319]],["title/injectables/PasswordPipe.html",[0,0.496,1368,2.766]],["body/injectables/PasswordPipe.html",[0,0.837,2,1.353,3,0.123,4,0.123,5,0.11,8,0.446,10,0.013,13,0.195,14,0.988,19,0.304,21,0.75,22,0.7,23,0.18,24,0.503,26,1.166,28,0.123,30,0.523,50,0.191,51,0.168,52,2.172,55,1.474,56,1.441,57,2.328,62,1.022,69,1.976,70,1.514,104,0.008,105,0.008,112,3.053,219,1.514,287,1.514,380,1.616,580,2.893,689,3.819,956,3.725,1356,2.801,1357,3.007,1359,5.44,1361,5.01,1362,5.44,1363,5.635,1364,5.874,1366,5.44,1367,4.666,1368,3.819,1369,5.065,1370,4.452,1371,4.452,1372,3.265,1373,2.801,1414,4.136]],["title/injectables/PostExistsMiddleware.html",[0,0.496,925,2.969]],["body/injectables/PostExistsMiddleware.html",[0,0.75,2,1.549,3,0.141,4,0.141,5,0.125,8,0.424,10,0.013,13,0.223,14,1.081,15,1.784,19,0.453,21,1.118,22,1.044,23,0.269,24,0.75,26,0.801,28,0.205,30,0.598,50,0.141,51,0.124,52,1.603,53,1.604,55,1.013,56,1.244,57,1.718,58,1.157,66,2.693,69,2.162,70,1.657,80,1.313,99,3.593,104,0.009,105,0.009,316,5.288,319,4.624,354,2.995,378,4.795,380,1.357,510,4.527,521,1.657,720,3.442,722,4.134,846,4.486,880,4.139,883,4.871,925,4.486,956,3.995,1291,4.134,1294,4.134,1295,4.134,1342,5.387,1343,5.387,1344,6.35,1346,5.387,1415,5.993,1416,4.134,1417,4.734,1418,4.734,1419,4.734,1420,4.734]],["title/controllers/PostsController.html",[106,1.591,1421,2.969]],["body/controllers/PostsController.html",[3,0.08,4,0.08,5,0.071,8,0.491,10,0.013,13,0.126,14,0.722,15,1.665,19,0.49,21,1.208,22,1.128,23,0.29,24,0.81,26,1.258,28,0.236,30,0.339,38,1.528,39,1.707,40,1.528,41,1.612,42,1.707,49,1.454,50,0.08,51,0.07,53,0.698,55,0.882,56,1.278,58,0.503,62,1.1,63,1.107,80,1.143,82,0.795,91,2.407,104,0.006,105,0.006,106,1.046,108,1.086,197,4.098,217,3.576,219,2.079,273,0.909,292,1.528,294,2.036,306,1.678,336,3.959,344,5.57,354,3.002,355,1.952,359,1.707,362,4.071,363,1.326,365,1.612,366,1.612,367,1.707,371,2.12,372,1.271,380,1.181,385,3.857,457,2.036,521,2.162,623,1.818,626,3.809,674,1.528,772,1.326,841,3.857,842,3.843,859,2.344,860,1.952,862,2.12,863,2.996,864,2.12,865,1.952,869,2.12,871,2.344,873,1.818,874,2.344,875,1.612,876,2.12,877,2.791,878,1.818,879,2.12,880,2.854,881,1.818,915,1.326,951,5.236,1014,1.952,1034,3.598,1133,3.809,1137,2.996,1138,2.996,1139,1.818,1151,1.818,1255,2.12,1276,1.612,1285,1.952,1289,2.344,1402,4.847,1421,2.996,1422,2.344,1423,2.12,1424,4.121,1425,5.014,1426,3.598,1427,5.014,1428,4.121,1429,5.014,1430,5.014,1431,2.685,1432,2.685,1433,2.12,1434,2.685,1435,2.685,1436,2.685,1437,2.685,1438,2.344,1439,2.685,1440,2.685,1441,2.685,1442,2.685,1443,2.685,1444,2.685,1445,2.685,1446,3.646,1447,2.685,1448,2.685,1449,2.685,1450,2.685,1451,2.685,1452,2.685,1453,2.685,1454,2.685,1455,4.378,1456,3.188,1457,2.344,1458,1.707,1459,2.685,1460,2.791,1461,1.952,1462,2.344,1463,2.685,1464,5.014,1465,2.685,1466,4.378,1467,2.685,1468,2.12,1469,2.344,1470,2.685,1471,2.685,1472,2.685,1473,2.685,1474,2.685,1475,2.344,1476,2.685,1477,2.685]],["title/injectables/PostsImagesService.html",[0,0.496,1456,2.596]],["body/injectables/PostsImagesService.html",[0,0.668,2,1.303,3,0.119,4,0.119,5,0.106,8,0.389,10,0.013,13,0.187,14,0.962,15,1.635,19,0.462,21,1.14,22,1.065,23,0.274,24,0.765,26,1.148,28,0.229,30,0.503,50,0.119,51,0.104,53,1.428,55,0.852,56,1.14,57,1.445,58,1.334,62,0.996,69,1.396,70,1.07,79,3.298,80,1.524,104,0.008,105,0.008,141,1.968,159,3.58,189,4.26,190,2.39,265,2.697,273,1.348,338,2.146,380,1.142,457,1.968,507,2.896,518,2.532,674,2.267,755,4.792,766,2.697,841,4.792,842,4.858,934,4.797,943,3.995,947,4.797,956,2.838,964,3.477,967,3.477,982,4.338,1004,3.477,1005,3.995,1147,4.931,1151,2.697,1456,3.493,1478,3.477,1479,5.495,1480,3.983,1481,3.983,1482,5.495,1483,5.495,1484,3.983,1485,3.983,1486,4.338,1487,3.983,1488,3.983,1489,3.983,1490,3.983,1491,3.983,1492,3.983,1493,3.983,1494,3.983,1495,3.983,1496,3.983,1497,3.983,1498,3.983,1499,5.495,1500,3.983,1501,3.983,1502,3.983]],["title/entities/PostsModel.html",[142,2.017,785,1.714]],["body/entities/PostsModel.html",[3,0.094,4,0.094,5,0.083,8,0.194,10,0.013,12,0.932,13,0.219,19,0.53,22,0.532,23,0.314,28,0.215,44,1.489,48,3.641,50,0.094,51,0.122,82,1.375,104,0.007,105,0.007,142,3.209,145,2.872,159,3.869,168,3.512,219,1.979,259,1.703,273,1.065,287,1.636,306,1.817,372,1.489,390,1.625,521,1.826,548,3.009,551,1.207,552,3.665,553,3.665,563,4.762,564,3.665,579,1.949,593,1.321,723,2.398,729,2.398,760,5.552,772,3.209,785,1.949,788,3.665,795,2,797,5.552,872,2.398,892,4.817,900,4.817,911,2.85,913,4.322,914,4.125,915,3.566,1137,4.012,1138,4.012,1139,3.737,1151,2.13,1503,2.747,1504,4.356,1505,3.146,1506,4.642,1507,3.665,1508,3.146,1509,3.146,1510,3.146,1511,4.053,1512,3.146,1513,4.642,1514,4.642,1515,3.146,1516,4.642,1517,3.146,1518,4.053,1519,4.991,1520,3.146,1521,4.642,1522,4.642,1523,3.146,1524,3.146,1525,3.146,1526,2.13,1527,2.13,1528,2.484,1529,4.642,1530,3.146,1531,3.146,1532,3.146,1533,3.146]],["title/modules/PostsModule.html",[113,1.591,129,2.596]],["body/modules/PostsModule.html",[3,0.154,4,0.154,5,0.137,10,0.013,28,0.248,30,0.654,50,0.154,51,0.135,104,0.01,105,0.01,108,2.641,113,2.79,115,2.556,116,2.556,117,2.802,118,2.802,119,2.556,120,3.876,121,3.876,125,4.287,128,4.506,129,5.375,131,4.09,132,3.537,133,2.802,134,2.802,136,3.718,140,3.505,141,2.556,142,3.227,159,3.718,434,3.505,806,4.086,808,3.763,880,4.758,881,3.505,929,4.518,1146,4.086,1151,3.505,1421,5.205,1456,5.033,1457,4.518,1534,4.518,1535,4.518,1536,5.175,1537,4.518,1538,5.175,1539,5.175,1540,4.75,1541,5.175]],["title/classes/PostsResolver.html",[51,0.107,1540,2.969]],["body/classes/PostsResolver.html",[3,0.139,4,0.139,5,0.124,8,0.422,10,0.013,13,0.22,14,1.072,19,0.449,21,1.109,22,1.036,23,0.297,24,0.744,26,1.036,27,2.474,28,0.203,44,2.212,48,3.647,50,0.139,51,0.122,53,1.215,55,1,56,1.109,62,0.847,63,1.643,104,0.009,105,0.009,112,2.531,142,3.37,197,3.482,219,1.832,306,1.177,521,2.07,549,1.583,729,3.161,880,4.626,881,3.166,1146,3.691,1248,5.343,1426,5.343,1438,4.081,1475,4.081,1507,4.831,1540,5.262,1542,4.081,1543,4.675,1544,4.675,1545,4.675,1546,4.675,1547,6.119,1548,4.081,1549,4.675]],["title/interfaces/ProviderData.html",[770,2.324,1550,3.224]],["body/interfaces/ProviderData.html",[3,0.141,4,0.141,5,0.126,8,0.293,10,0.013,13,0.223,23,0.317,24,0.751,28,0.141,50,0.141,58,1.158,104,0.009,105,0.009,287,2.169,295,3.707,463,4.403,512,3.344,521,1.658,524,4.918,551,1.605,770,2.698,1177,4.626,1288,3.719,1299,4.626,1550,5.745,1551,3.447,1552,4.139,1553,4.139,1554,6.176,1555,6.176,1556,6.176,1557,6.176,1558,7.737,1559,6.176,1560,7.737,1561,6.176,1562,6.353,1563,4.741,1564,4.741]],["title/interfaces/RateLimitOptions.html",[770,2.324,1565,2.969]],["body/interfaces/RateLimitOptions.html",[3,0.126,4,0.126,5,0.112,8,0.261,10,0.013,13,0.199,15,1.686,23,0.249,24,0.845,28,0.171,30,0.534,50,0.193,56,1.175,58,1.072,91,2.15,95,2.402,104,0.008,105,0.008,217,4.419,219,2.011,294,2.087,355,3.072,490,4.919,512,2.288,521,1.135,551,1.487,579,2.918,580,2.402,770,2.404,1014,5.054,1096,5.121,1288,3.933,1329,3.072,1460,4.707,1461,3.072,1551,3.072,1565,4.716,1566,3.336,1567,6.538,1568,6.538,1569,6.069,1570,4.995,1571,4.225,1572,3.072,1573,4.225,1574,4.225,1575,3.072,1576,3.689,1577,4.225,1578,4.225,1579,4.225,1580,4.225,1581,4.225,1582,3.689,1583,3.689]],["title/guards/RateLimiterGuard.html",[595,2.211,1572,2.969]],["body/guards/RateLimiterGuard.html",[0,0.505,3,0.151,4,0.081,5,0.072,8,0.312,10,0.013,13,0.128,14,0.728,15,1.585,16,2.795,17,2.053,18,2.678,19,0.305,21,0.753,22,0.704,23,0.181,24,0.505,25,1.185,26,0.46,27,2.042,28,0.192,30,0.343,35,3.832,36,1.63,43,1.726,44,1.285,47,2.661,48,3.35,50,0.081,51,0.071,52,0.919,53,0.706,55,0.889,57,0.985,58,1.327,60,1.839,61,1.839,62,0.753,63,1.356,64,1.839,65,2.643,66,2.469,67,1.839,68,1.342,69,0.952,70,0.729,79,2.495,80,0.753,91,2.127,93,1.185,95,1.14,104,0.006,105,0.006,217,2.643,243,1.47,272,2.371,294,2.053,380,1.191,390,1.403,512,2.251,551,0.706,560,4.356,595,1.47,597,1.545,720,3.022,915,2.053,956,2.609,1014,4.114,1288,2.734,1321,5.324,1322,2.371,1323,2.371,1326,2.371,1327,2.371,1329,3.022,1460,2.815,1462,2.371,1567,5.324,1568,5.324,1569,3.629,1572,3.672,1575,1.975,1584,4.409,1585,2.371,1586,5.341,1587,6.694,1588,4.157,1589,4.157,1590,2.371,1591,2.716,1592,2.716,1593,2.716,1594,3.987,1595,2.716,1596,2.716,1597,1.975,1598,1.975,1599,2.716,1600,2.716,1601,7.223,1602,2.716,1603,4.157,1604,2.716,1605,4.157,1606,2.716,1607,5.658,1608,2.716,1609,4.94,1610,2.716,1611,2.716,1612,2.716,1613,6.694,1614,6.098,1615,4.157,1616,4.157,1617,5.05,1618,4.157,1619,2.716,1620,5.05,1621,2.371,1622,2.716,1623,2.716,1624,2.716,1625,2.716,1626,2.371,1627,2.716,1628,2.716,1629,2.716,1630,5.05,1631,2.716,1632,2.716,1633,2.716,1634,2.716,1635,2.716,1636,4.157,1637,2.716,1638,2.716,1639,2.716,1640,2.716,1641,2.716]],["title/modules/RedisModule.html",[113,1.591,130,2.766]],["body/modules/RedisModule.html",[3,0.15,4,0.15,5,0.133,10,0.013,23,0.218,28,0.243,30,0.634,50,0.15,51,0.131,62,1.161,70,1.895,91,1.887,93,2.19,95,2.107,104,0.01,105,0.01,113,2.75,115,2.479,116,2.479,117,2.718,118,2.718,119,2.479,120,3.821,121,3.821,130,5.407,132,3.469,133,2.718,134,2.718,136,2.856,151,5.058,152,6.162,153,2.718,243,3.469,244,5.594,249,3.399,251,4.382,255,3.012,275,5.594,1586,5.585,1597,5.131,1598,5.406,1609,4.382,1642,4.382,1643,4.382,1644,4.382,1645,5.664,1646,5.019,1647,6.407,1648,6.407,1649,6.065,1650,5.594,1651,5.019,1652,5.406,1653,5.594,1654,5.019,1655,5.019,1656,5.019,1657,4.382,1658,5.594,1659,4.382,1660,5.019]],["title/injectables/RedisService.html",[0,0.496,1645,2.766]],["body/injectables/RedisService.html",[0,0.628,2,1.192,3,0.109,4,0.109,5,0.097,8,0.426,10,0.013,13,0.172,14,0.904,15,2.102,19,0.525,21,1.333,22,1.165,23,0.327,24,0.837,26,1.21,27,3.132,28,0.205,30,0.461,50,0.109,51,0.095,53,1.342,55,0.78,56,1.296,58,1.34,62,0.936,80,1.984,93,1.59,104,0.008,105,0.008,219,1.61,243,1.973,287,2.142,380,1.044,502,2.877,560,4.843,580,2.891,727,3.099,915,1.8,943,2.649,1042,6.012,1586,5.007,1594,2.877,1597,2.649,1645,3.497,1649,5.931,1650,4.508,1652,2.649,1653,3.181,1658,3.181,1661,3.181,1662,6.523,1663,5.163,1664,5.163,1665,5.163,1666,3.644,1667,3.644,1668,3.644,1669,5.163,1670,3.644,1671,5.163,1672,3.644,1673,5.997,1674,5.163,1675,3.644,1676,5.163,1677,6.886,1678,3.644,1679,3.644,1680,3.644,1681,3.644,1682,3.644,1683,5.163,1684,3.644,1685,3.644,1686,3.644,1687,3.644,1688,3.644,1689,3.644,1690,3.644,1691,3.644,1692,3.644,1693,5.163,1694,5.163,1695,3.644,1696,3.644,1697,5.163,1698,3.644,1699,3.644,1700,3.644,1701,3.644,1702,3.644,1703,3.644,1704,3.644]],["title/injectables/RefreshTokenGuard.html",[0,0.496,102,2.596]],["body/injectables/RefreshTokenGuard.html",[0,0.718,1,3.192,2,0.967,3,0.088,4,0.088,5,0.078,6,3.223,7,1.879,8,0.391,9,4.287,10,0.013,11,5.142,12,1.575,13,0.139,14,0.776,15,1.645,16,2.919,17,2.919,18,3.145,19,0.217,21,0.536,22,0.5,23,0.231,24,0.359,25,2.762,26,1,27,2.389,28,0.205,29,3.602,30,0.374,31,2.517,32,1.879,33,2.517,34,1.682,35,3.602,36,1.774,37,2.002,38,1.682,39,1.879,40,1.682,41,1.774,42,1.879,43,2.818,44,1.399,45,3.546,46,2.002,47,2.578,48,2.996,49,3.838,50,0.159,51,0.139,52,1.001,53,0.769,54,4.199,55,1.138,56,0.964,57,1.929,58,1.439,59,4.199,60,3.602,61,3.602,62,1.204,63,1.85,64,3.602,65,3.381,66,3.271,67,4.001,68,2.627,69,2.483,70,1.903,71,4.199,72,3.381,73,4.997,74,2.66,75,2.002,76,2.334,77,3.602,78,1.879,79,1.774,80,1.639,81,2.002,82,1.75,83,2.334,84,2.334,85,2.334,86,2.334,87,3.5,88,2.002,89,2.334,90,4.997,91,1.111,92,3.5,93,1.29,94,3.002,95,1.241,96,2.334,97,2.334,98,3.5,99,2.19,100,2.334,101,4.8,102,3.381,103,2.334,104,0.007,105,0.007,1705,2.956]],["title/classes/RegisterUserDto.html",[51,0.107,340,2.766]],["body/classes/RegisterUserDto.html",[3,0.139,4,0.139,5,0.124,8,0.378,10,0.013,12,1.811,13,0.22,19,0.501,23,0.297,28,0.203,50,0.139,51,0.16,104,0.009,105,0.009,255,3.669,287,1.942,306,1.716,328,4.773,338,1.935,340,4.14,363,2.306,463,3.479,524,4.334,549,1.58,551,1.589,593,1.96,911,3.158,1127,4.445,1288,3.917,1351,5.952,1352,4.076,1354,4.076,1395,4.14,1706,5.338,1707,4.076,1708,6.114,1709,4.668,1710,4.668,1711,4.668,1712,4.668]],["title/guards/RolesGuard.html",[171,2.969,595,2.211]],["body/guards/RolesGuard.html",[0,0.645,3,0.113,4,0.113,5,0.101,8,0.379,10,0.013,13,0.179,14,0.93,15,1.381,16,3.28,17,2.624,18,3.142,19,0.39,21,0.963,22,0.899,23,0.231,24,0.645,25,2.318,26,0.899,28,0.198,29,3.779,30,0.479,35,5.037,36,2.276,43,2.411,44,1.795,47,3.312,48,3.65,50,0.113,51,0.099,52,1.284,53,1.381,55,0.812,56,0.963,57,1.927,58,1.149,60,2.569,61,2.569,62,0.963,63,1.426,64,2.569,65,2.411,67,2.569,68,1.874,69,2.147,70,1.646,82,1.573,99,3.453,104,0.008,105,0.008,171,4.828,294,1.874,380,1.087,466,3.022,512,2.876,597,2.158,1275,4.839,1288,3.318,1433,4.193,1458,3.896,1590,3.311,1594,2.994,1621,3.311,1713,3.311,1714,4.193,1715,5.311,1716,5.311,1717,3.793,1718,3.793,1719,4.193,1720,3.311,1721,6.64,1722,3.793,1723,3.793,1724,3.793]],["title/interfaces/SavePayload.html",[770,2.324,771,2.969]],["body/interfaces/SavePayload.html",[0,0.699,3,0.127,4,0.127,5,0.113,8,0.263,10,0.013,13,0.2,15,1.107,23,0.348,24,0.847,26,0.973,28,0.229,30,0.538,50,0.127,51,0.111,53,1.107,55,1.23,56,1.264,58,1.078,62,1.042,63,1.544,80,1.181,104,0.009,105,0.009,141,2.103,166,2.103,219,1.872,273,1.441,287,1.748,338,2.428,380,1.648,521,2.095,551,1.495,569,2.97,570,2.423,643,2.423,664,3.656,674,2.423,684,3.361,715,4.371,723,3.877,727,3.451,728,5.141,729,2.97,734,5.141,751,3.361,752,3.717,753,3.717,755,3.656,756,3.364,758,3.717,760,5.141,763,5.141,764,4.181,766,2.883,767,3.361,768,3.095,769,2.555,770,2.423,771,5.07,772,3.597,773,5.75,774,3.717,775,3.717,776,3.717,777,3.717,778,3.717,779,3.717,780,3.717,781,2.706,782,3.361,783,3.717,784,2.883,1189,5.925,1551,3.095]],["title/guards/SocketBearerTokenGuard.html",[595,2.211,1725,3.224]],["body/guards/SocketBearerTokenGuard.html",[0,0.639,3,0.112,4,0.112,5,0.099,7,2.379,8,0.376,10,0.013,13,0.176,14,0.922,15,1.582,16,3.261,17,2.599,18,3.124,19,0.386,21,0.953,22,0.89,23,0.229,24,0.639,25,2.296,26,0.89,27,2.669,28,0.197,30,0.473,31,3.507,33,3.58,34,2.129,45,4.614,50,0.112,51,0.098,52,1.267,53,1.368,55,1.126,56,1.103,57,1.358,58,1.352,62,0.678,63,1.413,69,1.843,70,1.413,74,2.246,77,2.994,78,2.379,80,1.459,81,2.534,82,1.558,91,1.406,93,1.633,95,1.571,104,0.008,105,0.008,265,2.534,380,1.508,486,5.211,488,2.379,507,2.721,512,2.848,518,2.379,525,2.954,597,2.129,602,2.954,607,3.267,630,6.151,651,4.803,654,3.825,671,5.312,672,2.721,687,3.267,704,3.267,705,3.267,707,3.267,710,3.267,711,3.267,749,4.593,1288,3.294,1725,5.211,1726,5.312,1727,5.261,1728,5.261,1729,5.261,1730,3.742,1731,3.742,1732,3.742,1733,3.742,1734,3.742,1735,3.742,1736,3.742]],["title/injectables/TransactionInterceptor.html",[0,0.496,875,2.451]],["body/injectables/TransactionInterceptor.html",[0,0.558,2,1.014,3,0.092,4,0.092,5,0.082,8,0.338,10,0.013,13,0.146,14,0.804,15,1.758,18,2.862,19,0.337,21,0.832,22,0.777,23,0.2,24,0.558,25,2.004,26,0.777,27,2.734,28,0.163,30,0.392,47,2.639,50,0.163,51,0.143,52,1.049,53,1.194,55,0.663,56,0.991,57,1.124,58,1.134,62,0.991,66,1.352,68,1.531,69,1.086,70,0.832,80,1.994,91,1.165,93,1.352,95,1.301,99,2.987,104,0.007,105,0.007,273,1.852,380,0.888,488,1.97,490,2.099,510,3.629,512,2.961,713,2.706,772,1.531,841,2.919,842,3.629,860,3.338,875,3.629,1158,6.409,1288,3.274,1311,4.009,1312,4.009,1313,5.28,1315,4.775,1318,4.009,1319,2.706,1320,2.447,1333,2.706,1737,2.706,1738,4.009,1739,3.109,1740,5.637,1741,3.099,1742,3.099,1743,3.099,1744,4.591,1745,4.591,1746,4.591,1747,4.009,1748,4.591,1749,3.099,1750,3.099,1751,3.099,1752,3.099,1753,3.099,1754,3.099,1755,4.591,1756,3.099,1757,3.099,1758,3.099]],["title/classes/UpdateCommentsDto.html",[51,0.107,854,2.766]],["body/classes/UpdateCommentsDto.html",[3,0.168,4,0.168,5,0.15,8,0.349,10,0.013,12,2.043,13,0.266,19,0.415,23,0.246,28,0.168,50,0.168,51,0.148,104,0.01,105,0.01,168,2.918,287,1.517,306,1.421,549,1.912,551,1.793,854,4.671,858,5.143,868,4.459,872,3.563,1120,4.106,1122,4.459,1395,3.825,1759,4.931,1760,5.648,1761,4.931]],["title/classes/UpdatePostDto.html",[51,0.107,1446,2.969]],["body/classes/UpdatePostDto.html",[3,0.145,4,0.145,5,0.129,8,0.301,10,0.013,12,1.86,13,0.229,19,0.461,23,0.273,24,0.893,28,0.219,50,0.145,51,0.164,104,0.009,105,0.009,287,1.973,306,1.581,549,1.647,551,1.633,592,4.421,593,2.043,723,3.244,911,3.593,1125,3.093,1126,3.093,1133,4.71,1135,3.538,1137,5.057,1138,5.057,1140,4.248,1446,4.566,1455,4.248,1519,4.71,1526,3.295,1527,3.295,1528,3.841,1761,4.248,1762,6.072,1763,6.28,1764,6.28,1765,6.28,1766,4.866,1767,4.866]],["title/entities/UserFollowersModel.html",[175,2.596,785,1.714]],["body/entities/UserFollowersModel.html",[3,0.129,4,0.129,5,0.115,8,0.268,10,0.013,12,1.282,13,0.204,19,0.482,23,0.286,28,0.196,50,0.129,51,0.113,82,2.079,104,0.009,105,0.009,145,3.226,175,4.463,259,2.344,273,1.466,306,1.653,390,3.627,466,3.309,548,3.468,551,1.512,579,1.817,785,2.441,795,2.752,901,4.228,906,3.418,913,3.697,914,5.218,1468,4.591,1469,5.734,1768,6.13,1769,3.78,1770,7.324,1771,7.324,1772,5.815,1773,4.329,1774,5.815,1775,4.329,1776,5.077,1777,4.329,1778,4.329]],["title/controllers/UsersController.html",[106,1.591,1739,2.766]],["body/controllers/UsersController.html",[3,0.074,4,0.074,5,0.066,8,0.487,10,0.013,13,0.116,14,0.677,15,2.013,19,0.475,21,1.122,22,1.048,23,0.269,24,0.752,26,1.265,28,0.21,30,0.313,33,2.253,50,0.074,51,0.065,55,0.529,56,1.369,58,0.463,62,1.172,63,1.663,70,0.664,80,1.909,82,1.41,91,2.023,104,0.006,105,0.006,106,0.963,108,1,112,1.339,197,1.407,219,2.19,273,0.837,292,1.407,294,1.909,306,1.628,354,1.079,359,1.572,362,4.256,363,1.221,365,1.484,366,1.484,367,1.572,385,4.113,390,1.277,457,3.058,466,2.708,521,2.128,618,1.798,626,4.381,787,1.952,841,4.924,842,4.576,860,4.502,862,1.952,863,4.246,864,1.952,865,1.798,875,1.484,876,1.952,877,3.645,878,1.674,879,1.952,951,5.734,1276,1.484,1433,3.052,1458,1.572,1466,5.406,1657,3.375,1720,2.159,1738,2.159,1739,2.618,1779,2.159,1780,4.759,1781,4.759,1782,4.759,1783,4.759,1784,5.382,1785,4.759,1786,4.759,1787,2.472,1788,7.625,1789,2.472,1790,2.472,1791,2.472,1792,2.472,1793,2.472,1794,2.472,1795,6.469,1796,2.472,1797,2.472,1798,2.472,1799,2.472,1800,2.472,1801,2.472,1802,2.472,1803,5.84,1804,2.472,1805,2.472,1806,2.472,1807,2.472,1808,2.472,1809,2.472,1810,3.865,1811,2.159,1812,2.159,1813,2.472,1814,2.472,1815,2.472,1816,2.472,1817,2.472,1818,2.472,1819,2.472,1820,5.382,1821,2.472,1822,2.472,1823,3.865,1824,2.472,1825,3.865,1826,2.472,1827,2.472,1828,2.472,1829,3.865,1830,3.375,1831,3.375,1832,2.472,1833,3.865]],["title/entities/UsersModel.html",[145,1.591,785,1.714]],["body/entities/UsersModel.html",[3,0.056,4,0.056,5,0.05,8,0.192,10,0.013,12,0.919,13,0.089,19,0.522,22,0.318,23,0.344,28,0.205,44,0.89,48,1.875,50,0.093,51,0.12,63,1.817,82,1.621,91,1.167,95,1.303,104,0.005,105,0.005,142,2.86,145,2.862,164,3.295,166,3.404,168,2.991,175,4.381,177,1.485,219,1.47,255,2.377,259,1.019,273,1.341,287,1.931,295,2.758,306,1.787,354,1.354,463,2.254,521,0.833,524,2.518,548,2.512,551,0.807,552,2.45,553,2.45,563,4.248,564,3.629,579,1.93,586,3.285,593,0.79,614,2.88,715,1.863,723,3.56,727,1.129,729,2.374,784,2.683,785,1.93,788,4.322,792,1.643,795,1.196,796,2.71,797,4.571,872,1.603,911,2.828,912,1.485,913,3.987,915,2.989,1177,3.681,1262,1.485,1263,5.055,1276,3.878,1287,2.45,1299,3.681,1361,2.256,1367,3.113,1391,1.643,1423,3.127,1458,1.196,1468,3.127,1504,3.127,1507,4.322,1511,2.71,1518,1.643,1519,3.113,1526,2.683,1527,1.274,1528,3.127,1714,3.127,1776,3.458,1830,3.458,1831,3.458,1834,1.485,1835,3.961,1836,1.881,1837,1.881,1838,3.103,1839,1.881,1840,1.881,1841,3.103,1842,1.881,1843,3.127,1844,1.881,1845,3.103,1846,1.881,1847,4.596,1848,3.103,1849,1.881,1850,1.881,1851,3.103,1852,1.881,1853,3.103,1854,3.103,1855,3.103,1856,1.881,1857,1.881,1858,3.103,1859,1.881,1860,1.881,1861,5.085,1862,1.881,1863,3.629,1864,1.881,1865,1.881,1866,1.881,1867,1.881,1868,1.881,1869,1.881,1870,1.881,1871,3.103,1872,1.881,1873,3.103,1874,3.103,1875,1.881,1876,1.485,1877,1.485,1878,3.103,1879,1.881,1880,1.881,1881,1.881,1882,7.101,1883,1.881,1884,1.881,1885,1.881,1886,1.881,1887,1.881]],["title/modules/UsersModule.html",[113,1.591,131,2.11]],["body/modules/UsersModule.html",[3,0.171,4,0.171,5,0.152,10,0.013,28,0.242,30,0.725,33,4.009,50,0.171,51,0.15,104,0.01,105,0.01,108,2.815,113,2.921,115,2.833,116,2.833,117,3.105,118,3.105,119,2.833,120,4.059,121,4.059,131,4.245,132,3.769,133,3.105,134,3.105,136,3.264,140,3.884,141,2.833,145,2.235,175,4.426,177,4.528,1739,5.077,1811,5.007,1812,5.007,1888,5.007,1889,5.007,1890,5.007,1891,5.735,1892,5.735,1893,5.735,1894,5.735]],["title/classes/WsErrorFilter.html",[51,0.107,679,2.969]],["body/classes/WsErrorFilter.html",[3,0.151,4,0.151,5,0.135,8,0.399,10,0.013,12,1.505,13,0.239,14,1.131,19,0.373,21,0.921,22,0.86,23,0.221,24,0.617,26,0.86,28,0.193,30,0.642,47,3.439,50,0.151,51,0.133,56,1.17,58,0.952,104,0.01,105,0.01,249,5.058,309,3.23,518,4.512,549,1.72,630,6.221,651,4.011,654,3.694,672,3.694,679,4.694,680,4.694,681,5.098,1220,4.011,1222,5.637,1223,6.521,1224,6.521,1226,6.731,1227,4.436,1234,4.436,1895,5.08,1896,6.457,1897,5.08,1898,5.08]],["title/coverage.html",[1899,4.88]],["body/coverage.html",[0,0.989,1,1.751,5,0.077,6,3.836,7,4.001,10,0.013,11,1.976,23,0.191,31,1.381,33,1.381,37,1.976,38,2.498,45,1.751,49,1.58,51,0.212,70,0.783,82,0.864,102,1.855,104,0.007,105,0.007,106,2.751,107,2.121,109,2.547,110,1.855,119,1.441,142,2.168,145,1.71,157,2.303,159,1.66,161,2.121,164,1.66,166,1.441,168,1.507,171,2.121,175,1.855,183,2.121,217,5.429,284,2.547,290,2.121,291,2.547,328,1.855,340,1.976,354,1.915,368,2.121,373,2.121,428,1.976,429,1.976,442,2.547,548,1.441,550,2.547,569,1.507,570,1.66,571,2.547,586,1.751,595,3.715,596,2.303,598,2.547,612,2.121,613,2.547,617,1.976,621,1.751,628,2.121,629,2.547,643,1.66,650,1.976,656,2.121,664,1.855,679,2.121,680,3.191,681,2.303,751,3.465,756,1.507,770,3.003,771,2.121,785,2.88,786,2.547,802,2.121,810,2.547,830,2.121,831,2.547,851,1.976,854,1.976,858,1.855,866,1.751,870,2.121,872,2.267,873,2.972,875,1.751,877,1.976,878,1.976,880,1.66,899,2.547,915,4.045,925,2.121,931,2.547,957,2.303,959,3.465,974,2.121,975,2.547,1005,2.121,1030,2.547,1055,2.303,1112,2.547,1113,3.836,1119,2.547,1120,3.836,1128,2.547,1129,2.547,1133,1.976,1134,2.547,1135,3.836,1147,2.121,1148,2.547,1149,2.547,1152,2.303,1153,2.547,1154,2.547,1171,2.547,1174,2.547,1175,3.465,1183,2.547,1218,2.303,1219,2.547,1220,3.465,1245,2.303,1252,2.303,1269,2.547,1270,3.465,1285,2.121,1286,2.547,1298,2.547,1301,2.547,1310,2.547,1341,2.547,1350,2.547,1356,1.976,1357,3.836,1368,1.976,1373,1.976,1374,2.547,1383,2.547,1394,2.547,1401,2.547,1402,2.121,1403,2.547,1415,2.547,1416,2.547,1421,2.121,1422,2.547,1446,2.121,1456,1.855,1458,1.855,1460,1.976,1461,3.836,1478,2.547,1486,2.303,1503,3.832,1519,1.976,1526,3.573,1527,1.976,1540,2.121,1542,2.547,1550,2.303,1552,2.547,1553,2.547,1565,2.121,1566,4.166,1572,2.121,1575,2.121,1584,2.547,1585,2.547,1598,2.121,1626,2.547,1645,1.976,1652,2.121,1661,2.547,1706,2.547,1707,2.547,1713,2.547,1719,2.303,1725,2.303,1726,2.547,1737,2.547,1739,1.976,1759,2.547,1762,2.547,1768,2.547,1769,2.547,1779,2.547,1834,3.465,1843,2.303,1863,2.303,1876,2.303,1877,2.303,1899,2.547,1900,2.917,1901,2.917,1902,8.163,1903,2.917,1904,2.917,1905,2.917,1906,2.917,1907,7.473,1908,5.869,1909,6.613,1910,6.613,1911,7.856,1912,5.276,1913,5.276,1914,4.389,1915,2.917,1916,2.917,1917,5.869,1918,7.572,1919,2.917,1920,4.389,1921,4.389,1922,2.547,1923,2.547,1924,8.189,1925,6.164,1926,2.547,1927,2.547,1928,2.547,1929,2.547,1930,3.832,1931,2.547,1932,2.917,1933,4.607,1934,2.547,1935,2.917,1936,2.917,1937,2.917,1938,2.547,1939,3.832,1940,2.547,1941,2.547,1942,2.917,1943,4.389,1944,3.832,1945,2.917,1946,2.917,1947,2.917,1948,2.547,1949,3.832,1950,2.547,1951,2.547,1952,2.547,1953,3.832,1954,2.547,1955,2.917,1956,2.917,1957,2.917,1958,2.917,1959,2.917,1960,2.917]],["title/dependencies.html",[116,2.428,1961,2.971]],["body/dependencies.html",[10,0.013,30,0.655,36,3.111,44,2.453,48,3.39,51,0.171,104,0.01,105,0.01,116,2.56,141,2.56,153,2.806,155,4.525,156,4.525,188,4.525,192,4.525,193,4.525,197,2.949,198,4.525,273,1.755,293,4.525,363,2.56,378,4.554,433,4.092,460,4.092,483,4.525,593,2.176,672,3.768,673,5.709,986,5.163,999,4.525,1001,4.525,1125,3.295,1126,3.295,1176,4.851,1177,3.295,1181,3.51,1197,4.525,1262,4.092,1299,3.295,1320,4.092,1363,3.768,1586,4.754,1597,3.768,1649,5.163,1659,4.525,1962,5.183,1963,5.183,1964,6.539,1965,5.183,1966,5.183,1967,6.539,1968,6.539,1969,5.183,1970,6.539,1971,5.183,1972,6.539,1973,5.183,1974,5.183,1975,5.183,1976,5.183,1977,5.183,1978,5.183,1979,5.183,1980,5.183,1981,5.183,1982,5.183,1983,5.183,1984,5.183,1985,5.183,1986,5.183,1987,5.183,1988,5.183,1989,5.183,1990,6.539,1991,5.183,1992,5.183,1993,5.183,1994,5.183,1995,5.183,1996,5.183,1997,5.183,1998,5.183,1999,5.183,2000,5.183,2001,5.183,2002,5.183,2003,5.183,2004,5.183,2005,5.183,2006,5.183,2007,5.183,2008,5.183]],["title/miscellaneous/enumerations.html",[2009,1.936,2010,4.292]],["body/miscellaneous/enumerations.html",[9,4.7,10,0.013,13,0.269,40,3.949,41,3.424,49,3.089,82,2.055,101,4.7,104,0.01,105,0.01,365,4.165,366,3.424,477,4.982,580,3.478,1177,4.412,1245,4.505,1251,6.059,1255,5.905,1276,4.165,1287,5.479,1299,4.412,1562,6.059,1834,4.505,2009,3.247,2010,4.982,2011,6.94,2012,6.94,2013,6.94,2014,5.706,2015,4.982,2016,6.94,2017,5.706,2018,5.706,2019,4.982,2020,5.706]],["title/miscellaneous/functions.html",[2009,1.936,2021,4.292]],["body/miscellaneous/functions.html",[10,0.011,13,0.312,104,0.011,105,0.011,119,3.933,1934,5.782,2009,3.769,2021,5.782,2022,6.623]],["title/index.html",[13,0.192,2023,3.565]],["body/index.html",[2,1.472,10,0.013,31,3.682,33,3.682,95,1.889,104,0.009,105,0.009,108,1.819,110,4.256,113,1.753,114,6.11,115,2.222,116,2.222,117,2.436,118,2.436,119,2.222,120,2.436,121,2.436,122,3.927,123,3.927,124,3.927,125,4.521,126,5.581,127,5.581,128,4.69,129,5.288,130,5.164,131,4.205,132,3.23,133,2.436,134,2.436,259,2.436,424,3.927,426,3.927,427,3.927,428,4.533,429,4.533,549,1.523,597,2.56,621,4.018,643,3.81,756,4.019,798,3.927,799,3.927,866,4.018,880,4.427,916,3.927,917,3.927,991,3.927,992,3.927,994,3.927,1367,4.04,1456,4.256,1534,3.927,1535,3.927,1537,3.927,1551,3.271,1642,3.927,1643,3.927,1644,3.927,1645,5.268,1888,3.927,1889,3.927,1890,3.927,2023,3.927,2024,5.966,2025,4.498,2026,4.498]],["title/modules.html",[115,2.761]],["body/modules.html",[10,0.011,104,0.011,105,0.011,114,4.519,115,3.071,125,3.366,126,4.21,127,4.21,128,3.537,129,3.952,130,4.21,131,3.211,2027,8.409,2028,8.409,2029,8.409,2030,8.409]],["title/properties.html",[551,1.278,1961,2.971]],["body/properties.html",[8,0.407,10,0.012,104,0.011,105,0.011,551,1.711,772,3.252,2031,6.584,2032,6.584,2033,6.584,2034,6.584]],["title/miscellaneous/typealiases.html",[2009,1.936,2035,4.916]],["body/miscellaneous/typealiases.html",[10,0.012,13,0.306,23,0.344,104,0.011,105,0.011,1189,5.923,1944,5.681,1948,6.55,2009,3.703,2036,6.507,2037,6.507]],["title/miscellaneous/variables.html",[2009,1.936,2038,4.292]],["body/miscellaneous/variables.html",[1,2.804,10,0.013,13,0.149,18,2.211,23,0.335,25,2.039,37,3.164,38,1.805,40,1.805,49,2.529,58,1.039,62,1.278,63,1.943,66,2.039,68,2.308,69,1.637,70,1.254,72,3.525,82,2.088,88,2.149,91,1.756,93,2.039,95,1.332,99,1.567,104,0.007,105,0.007,145,1.82,157,4.829,189,4.142,219,0.852,236,2.505,287,1.983,294,1.567,354,2.669,488,2.017,490,2.149,521,1.642,524,2.017,579,3.469,580,3.478,586,1.904,727,1.904,764,3.397,772,2.739,781,2.97,842,2.804,872,2.413,875,1.904,877,3.164,878,2.149,951,2.307,957,3.688,959,4.829,1005,3.397,1055,3.688,1096,3.688,1106,4.079,1110,2.77,1139,2.149,1232,4.079,1252,3.688,1276,1.904,1277,2.505,1329,2.307,1423,2.505,1458,2.97,1460,3.164,1461,2.307,1486,3.688,1504,2.505,1519,3.164,1526,3.755,1527,2.149,1548,4.841,1565,2.307,1566,4.378,1570,2.77,1575,3.397,1576,2.77,1582,2.77,1583,2.77,1598,3.397,1652,3.397,1714,3.688,1719,3.688,1740,2.77,1747,2.77,1843,3.688,1863,3.688,1876,2.505,1877,2.505,1922,2.77,1923,4.079,1925,2.77,1926,5.34,1927,4.841,1928,5.34,1929,4.841,1930,4.841,1931,4.079,1933,5.954,1938,2.77,1939,5.34,1940,2.77,1941,4.079,1949,2.77,1950,2.77,1951,4.079,1952,4.079,1953,2.77,1954,2.77,2009,1.805,2015,4.079,2019,2.77,2038,2.77,2039,4.672,2040,3.173,2041,3.173,2042,4.672,2043,3.173,2044,7.236,2045,3.173,2046,4.672,2047,3.173,2048,4.672,2049,3.173,2050,3.173,2051,3.173,2052,6.117,2053,6.117,2054,3.173,2055,3.173,2056,3.173,2057,3.173,2058,3.173,2059,3.173,2060,3.173,2061,3.173,2062,4.672,2063,3.173,2064,3.173,2065,3.173,2066,3.173,2067,3.173,2068,3.173,2069,3.173,2070,3.173,2071,3.173,2072,3.173,2073,3.173,2074,3.173,2075,3.173,2076,3.173,2077,3.173,2078,4.672,2079,3.173,2080,3.173,2081,3.173,2082,3.173,2083,3.173,2084,3.173,2085,3.173,2086,4.672,2087,3.173,2088,4.672,2089,3.173,2090,3.173,2091,3.173,2092,3.173,2093,3.173,2094,3.173,2095,3.173,2096,3.173,2097,3.173]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":915,"title":{},"body":{"entities/CommentsModel.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleStrategy.html":{},"entities/ImageModel.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"entities/UsersModel.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2032,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1984,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2002,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["0.3.20",{"_index":2008,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1983,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1996,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1902,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1903,"title":{},"body":{"coverage.html":{}}}],["0})@isint()@isoptional",{"_index":1246,"title":{},"body":{"entities/ImageModel.html":{}}}],["0})@isnumber",{"_index":907,"title":{},"body":{"entities/CommentsModel.html":{}}}],["1",{"_index":91,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/CommentsController.html":{},"injectables/CommonService.html":{},"guards/IsPostMineOrAdminGuard.html":{},"controllers/PostsController.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1749,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["1.0.1",{"_index":1998,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1990,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":1988,"title":{},"body":{"dependencies.html":{}}}],["1.3.4",{"_index":1993,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":1979,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1994,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1918,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1919,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1014,"title":{},"body":{"modules/CommonModule.html":{},"controllers/PostsController.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{}}}],["10.0.0",{"_index":1981,"title":{},"body":{"dependencies.html":{}}}],["10/10",{"_index":1942,"title":{},"body":{"coverage.html":{}}}],["10/11",{"_index":1906,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"classes/ChatsGateway.html":{},"controllers/PostsController.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"coverage.html":{}}}],["1000",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"guards/RateLimiterGuard.html":{}}}],["1024",{"_index":1013,"title":{},"body":{"modules/CommonModule.html":{}}}],["11.0.0",{"_index":1968,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1967,"title":{},"body":{"dependencies.html":{}}}],["11.0.11",{"_index":1970,"title":{},"body":{"dependencies.html":{}}}],["11.0.19",{"_index":1965,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1969,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1972,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":1904,"title":{},"body":{"coverage.html":{}}}],["123456789",{"_index":1559,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["13.1.0",{"_index":1964,"title":{},"body":{"dependencies.html":{}}}],["15/16",{"_index":1946,"title":{},"body":{"coverage.html":{}}}],["16.11.0",{"_index":1989,"title":{},"body":{"dependencies.html":{}}}],["16/16",{"_index":1955,"title":{},"body":{"coverage.html":{}}}],["18/19",{"_index":1958,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":93,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/CommonService.html":{},"guards/IsPostMineOrAdminGuard.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["2.0",{"_index":1182,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{}}}],["2.0.0",{"_index":1997,"title":{},"body":{"dependencies.html":{}}}],["2.0.4",{"_index":1977,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1911,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1910,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":586,"title":{},"body":{"classes/BasePaginationDto.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["22",{"_index":2026,"title":{},"body":{"index.html":{}}}],["23",{"_index":2025,"title":{},"body":{"index.html":{}}}],["2592000",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["3",{"_index":95,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/CommonService.html":{},"guards/IsPostMineOrAdminGuard.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"entities/UsersModel.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["3/3",{"_index":1907,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1913,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1569,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{}}}],["3600",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["4",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["4.0.2",{"_index":1966,"title":{},"body":{"dependencies.html":{}}}],["4.12.1",{"_index":1963,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2004,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1908,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1916,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"interfaces/RateLimitOptions.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["5,000",{"_index":1163,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["5.0.1",{"_index":2007,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1974,"title":{},"body":{"dependencies.html":{}}}],["5.0.3",{"_index":1971,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1982,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":1992,"title":{},"body":{"dependencies.html":{}}}],["5.6.1",{"_index":1991,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1932,"title":{},"body":{"coverage.html":{}}}],["500,000",{"_index":1162,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["500_000",{"_index":1168,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["5_000",{"_index":1170,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["6",{"_index":1750,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["6/6",{"_index":1917,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1921,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1638,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["60_000",{"_index":1660,"title":{},"body":{"modules/RedisModule.html":{}}}],["66",{"_index":1909,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":2024,"title":{},"body":{"index.html":{}}}],["7.0.3",{"_index":1987,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2003,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1912,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1367,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"entities/UsersModel.html":{},"index.html":{}}}],["8.13.3",{"_index":2000,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1943,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":1937,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1915,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1920,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1936,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":1914,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1905,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":1945,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":1957,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":1100,"title":{},"body":{"injectables/CommonService.html":{}}}],["__",{"_index":1099,"title":{},"body":{"injectables/CommonService.html":{}}}],["_json",{"_index":1304,"title":{},"body":{"injectables/KakaoStrategy.html":{}}}],["_json.kakao_account.email",{"_index":1306,"title":{},"body":{"injectables/KakaoStrategy.html":{}}}],["_json?.kakao_account",{"_index":1305,"title":{},"body":{"injectables/KakaoStrategy.html":{}}}],["abstract",{"_index":568,"title":{},"body":{"classes/BaseModel.html":{}}}],["access",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"miscellaneous/enumerations.html":{}}}],["access_type",{"_index":1207,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["accesstoken",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["actual",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["adapter",{"_index":1683,"title":{},"body":{"injectables/RedisService.html":{}}}],["adapter.redis",{"_index":1685,"title":{},"body":{"injectables/RedisService.html":{}}}],["additionalwhere",{"_index":1039,"title":{},"body":{"injectables/CommonService.html":{}}}],["admin",{"_index":1287,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{},"entities/UsersModel.html":{},"miscellaneous/enumerations.html":{}}}],["admin.guard",{"_index":874,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["admin.guard.ts",{"_index":1270,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"coverage.html":{}}}],["admin.guard.ts:12",{"_index":1272,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{}}}],["admin.guard.ts:19",{"_index":1292,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{}}}],["admin.guard.ts:27",{"_index":1274,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{}}}],["admin.guard.ts:44",{"_index":1293,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{}}}],["advanced",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["afterinit",{"_index":635,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["afterinit(server",{"_index":647,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["alias",{"_index":1947,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":2036,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allkeys",{"_index":1688,"title":{},"body":{"injectables/RedisService.html":{}}}],["allkeys.filter((key",{"_index":1698,"title":{},"body":{"injectables/RedisService.html":{}}}],["allowed",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["annotation",{"_index":1723,"title":{},"body":{"guards/RolesGuard.html":{}}}],["any)._getnamespace",{"_index":1687,"title":{},"body":{"injectables/RedisService.html":{}}}],["any).error",{"_index":1236,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["any).message",{"_index":1238,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["api",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"injectables/CommonService.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth(authscheme.access",{"_index":626,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth(authscheme.refresh",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes('application/x",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":1127,"title":{},"body":{"classes/CreateCommentsDto.html":{},"classes/CreatePostDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["apiproperty({description",{"_index":1122,"title":{},"body":{"classes/CreateCommentsDto.html":{},"classes/CreatePostDto.html":{},"classes/UpdateCommentsDto.html":{}}}],["apollo/server",{"_index":1962,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CommonService.html":{}}}],["appcontroller",{"_index":107,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applydecorators",{"_index":1570,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":114,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appservice",{"_index":110,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["args",{"_index":1548,"title":{},"body":{"classes/PostsResolver.html":{},"miscellaneous/variables.html":{}}}],["args.constraints[0",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.constraints[0]}~${args.constraints[1",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.constraints[1",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.property",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentmetadata",{"_index":1364,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["argumentshost",{"_index":1224,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsErrorFilter.html":{}}}],["array_contained_by",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array_contains",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array_overlap",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraycontainedby",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraycontains",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayoverlap",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asc",{"_index":577,"title":{},"body":{"classes/BasePaginationDto.html":{},"injectables/CommonService.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["asdfaldsfadlskfj",{"_index":606,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["async",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{}}}],["auth",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":431,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":1175,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:18",{"_index":1179,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{}}}],["auth.service",{"_index":32,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["auth/auth.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/bearer",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/token/access",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth/token/refresh",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":290,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticatewithemailandpassword",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticatewithemailandpassword(logindto",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":605,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["authguard",{"_index":1180,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{}}}],["authguard(\"google",{"_index":1178,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["authguard(\"kakao",{"_index":1300,"title":{},"body":{"injectables/KakaoAuthGuard.html":{}}}],["authmodule",{"_index":125,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":772,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"interfaces/SavePayload.html":{},"injectables/TransactionInterceptor.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":760,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"entities/PostsModel.html":{},"interfaces/SavePayload.html":{}}}],["authorization",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["authorizationparams",{"_index":1185,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["authprovider",{"_index":1562,"title":{},"body":{"interfaces/ProviderData.html":{},"miscellaneous/enumerations.html":{}}}],["authprovider.google",{"_index":1561,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["authscheme",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["authservice",{"_index":31,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"coverage.html":{},"index.html":{}}}],["authservice.authenticatewithemailandpassword",{"_index":601,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["authservice.decodedbasictoken",{"_index":600,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["authservice.extracttokenfromheader",{"_index":599,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["autoschemafile",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":80,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{}}}],["bad",{"_index":1241,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["badrequestexception",{"_index":956,"title":{},"body":{"injectables/CommentsService.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/PostsImagesService.html":{},"guards/RateLimiterGuard.html":{}}}],["badrequestexception('jpg/jpeg/png",{"_index":1023,"title":{},"body":{"modules/CommonModule.html":{}}}],["badrequestexception(`${error",{"_index":1497,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["badrequestexception(`${this.subject",{"_index":1372,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["base.entity",{"_index":1259,"title":{},"body":{"entities/ImageModel.html":{}}}],["base64",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["base64').tostring('utf8",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["base64string",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["basemodel",{"_index":548,"title":{"classes/BaseModel.html":{}},"body":{"classes/BaseModel.html":{},"entities/ChatsModel.html":{},"entities/CommentsModel.html":{},"injectables/CommonService.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{},"coverage.html":{}}}],["basename",{"_index":1488,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["basename(tempfilepath",{"_index":1498,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["basepaginationdto",{"_index":569,"title":{"classes/BasePaginationDto.html":{}},"body":{"classes/BasePaginationDto.html":{},"injectables/ChatsMessagesService.html":{},"injectables/CommonService.html":{},"controllers/MessagesController.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"interfaces/SavePayload.html":{},"coverage.html":{}}}],["basepaginationdto:14",{"_index":1397,"title":{},"body":{"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["basepaginationdto:22",{"_index":1399,"title":{},"body":{"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["basepaginationdto:31",{"_index":1400,"title":{},"body":{"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["basepaginationdto:41",{"_index":1396,"title":{},"body":{"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["basepaginationdto:49",{"_index":1398,"title":{},"body":{"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["basewsexceptionfilter",{"_index":1896,"title":{},"body":{"classes/WsErrorFilter.html":{}}}],["basic",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"dependencies.html":{}}}],["basicendpoint",{"_index":1579,"title":{},"body":{"interfaces/RateLimitOptions.html":{}}}],["basictokenguard",{"_index":596,"title":{"guards/BasicTokenGuard.html":{}},"body":{"guards/BasicTokenGuard.html":{},"coverage.html":{}}}],["bcrypt",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(logindto.password",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["bearer",{"_index":45,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"coverage.html":{}}}],["bearertokenguard",{"_index":11,"title":{"guards/BearerTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["between",{"_index":1106,"title":{},"body":{"injectables/CommonService.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["boolean",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"classes/PaginatePostDto.html":{},"guards/RolesGuard.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["broadcast",{"_index":741,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["browse",{"_index":2030,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2027,"title":{},"body":{"modules.html":{}}}],["buffer.from(base64string",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["callbackurl",{"_index":1204,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["called",{"_index":701,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["callhandler",{"_index":1313,"title":{},"body":{"injectables/LogInterceptor.html":{},"injectables/TransactionInterceptor.html":{}}}],["canactivate",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleAuthGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["canactivate(context",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleAuthGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["capacity",{"_index":1567,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{}}}],["catch",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatsGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PostsImagesService.html":{},"guards/SocketBearerTokenGuard.html":{},"classes/WsErrorFilter.html":{}}}],["catch(exception",{"_index":1222,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsErrorFilter.html":{}}}],["catch(httpexception",{"_index":1227,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsErrorFilter.html":{}}}],["catcherror",{"_index":1748,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["cb",{"_index":1016,"title":{},"body":{"modules/CommonModule.html":{}}}],["cb(null",{"_index":1024,"title":{},"body":{"modules/CommonModule.html":{}}}],["chat",{"_index":715,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"interfaces/SavePayload.html":{},"entities/UsersModel.html":{}}}],["chat.dto",{"_index":624,"title":{},"body":{"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{}}}],["chat.dto.ts",{"_index":1113,"title":{},"body":{"classes/CreateChatDto.html":{},"classes/EnterChatDto.html":{},"classes/PaginateChatDto.html":{},"coverage.html":{}}}],["chat.dto.ts:13",{"_index":1173,"title":{},"body":{"classes/EnterChatDto.html":{}}}],["chat.dto.ts:14",{"_index":1117,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["chat.id",{"_index":828,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chat.messages",{"_index":1386,"title":{},"body":{"entities/MessagesModel.html":{}}}],["chat.users",{"_index":1887,"title":{},"body":{"entities/UsersModel.html":{}}}],["chat.users)@jointable",{"_index":1836,"title":{},"body":{"entities/UsersModel.html":{}}}],["chatexists",{"_index":730,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["chatid",{"_index":718,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"classes/CreateMessagesDto.html":{},"controllers/MessagesController.html":{}}}],["chatids",{"_index":1172,"title":{},"body":{"classes/EnterChatDto.html":{}}}],["chats",{"_index":614,"title":{},"body":{"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"entities/UsersModel.html":{}}}],["chats.controller",{"_index":803,"title":{},"body":{"modules/ChatsModule.html":{}}}],["chats.gateway",{"_index":804,"title":{},"body":{"modules/ChatsModule.html":{}}}],["chats.service",{"_index":622,"title":{},"body":{"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{}}}],["chats/:cid/messages",{"_index":1375,"title":{},"body":{"controllers/MessagesController.html":{}}}],["chats/chats.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["chats/entity/chats.entity",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["chats/messages/entity/messages.entity",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["chatscontroller",{"_index":612,"title":{"controllers/ChatsController.html":{}},"body":{"controllers/ChatsController.html":{},"modules/ChatsModule.html":{},"coverage.html":{}}}],["chatsgateway",{"_index":628,"title":{"classes/ChatsGateway.html":{}},"body":{"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"coverage.html":{}}}],["chatsmessagesservice",{"_index":643,"title":{"injectables/ChatsMessagesService.html":{}},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"modules/ChatsModule.html":{},"controllers/MessagesController.html":{},"interfaces/SavePayload.html":{},"coverage.html":{},"index.html":{}}}],["chatsmodel",{"_index":164,"title":{"entities/ChatsModel.html":{}},"body":{"modules/AppModule.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"entities/MessagesModel.html":{},"entities/UsersModel.html":{},"coverage.html":{}}}],["chatsmodule",{"_index":126,"title":{"modules/ChatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatsModule.html":{},"index.html":{},"modules.html":{}}}],["chatsrepository",{"_index":815,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chatsservice",{"_index":621,"title":{"injectables/ChatsService.html":{}},"body":{"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"coverage.html":{},"index.html":{}}}],["checkifchatexists",{"_index":811,"title":{},"body":{"injectables/ChatsService.html":{}}}],["checkifchatexists(chatid",{"_index":816,"title":{},"body":{"injectables/ChatsService.html":{}}}],["chunksize",{"_index":1169,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["class",{"_index":51,"title":{"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"classes/ChatsGateway.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"classes/PostsResolver.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"classes/WsErrorFilter.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":549,"title":{},"body":{"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"classes/ChatsGateway.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"classes/PostsResolver.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"classes/WsErrorFilter.html":{},"index.html":{}}}],["classserializerinterceptor",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["clear",{"_index":1662,"title":{},"body":{"injectables/RedisService.html":{}}}],["client",{"_index":1658,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{}}}],["client.del(...matched",{"_index":1702,"title":{},"body":{"injectables/RedisService.html":{}}}],["client.smembers(namespaceset",{"_index":1689,"title":{},"body":{"injectables/RedisService.html":{}}}],["client.srem(namespaceset",{"_index":1703,"title":{},"body":{"injectables/RedisService.html":{}}}],["clientid",{"_index":1200,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["clientsecret",{"_index":1202,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":424,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":427,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":425,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":426,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_chatsmodule",{"_index":798,"title":{},"body":{"modules/ChatsModule.html":{},"index.html":{}}}],["cluster_chatsmodule_imports",{"_index":800,"title":{},"body":{"modules/ChatsModule.html":{}}}],["cluster_chatsmodule_providers",{"_index":799,"title":{},"body":{"modules/ChatsModule.html":{},"index.html":{}}}],["cluster_commentsmodule",{"_index":916,"title":{},"body":{"modules/CommentsModule.html":{},"index.html":{}}}],["cluster_commentsmodule_imports",{"_index":918,"title":{},"body":{"modules/CommentsModule.html":{}}}],["cluster_commentsmodule_providers",{"_index":917,"title":{},"body":{"modules/CommentsModule.html":{},"index.html":{}}}],["cluster_commonmodule",{"_index":991,"title":{},"body":{"modules/CommonModule.html":{},"index.html":{}}}],["cluster_commonmodule_exports",{"_index":992,"title":{},"body":{"modules/CommonModule.html":{},"index.html":{}}}],["cluster_commonmodule_imports",{"_index":993,"title":{},"body":{"modules/CommonModule.html":{}}}],["cluster_commonmodule_providers",{"_index":994,"title":{},"body":{"modules/CommonModule.html":{},"index.html":{}}}],["cluster_postsmodule",{"_index":1534,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["cluster_postsmodule_exports",{"_index":1537,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["cluster_postsmodule_imports",{"_index":1536,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1535,"title":{},"body":{"modules/PostsModule.html":{},"index.html":{}}}],["cluster_redismodule",{"_index":1642,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["cluster_redismodule_exports",{"_index":1643,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["cluster_redismodule_providers",{"_index":1644,"title":{},"body":{"modules/RedisModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":1888,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_exports",{"_index":1890,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_providers",{"_index":1889,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["code",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"classes/ChatsGateway.html":{}}}],["colon",{"_index":1694,"title":{},"body":{"injectables/RedisService.html":{}}}],["column",{"_index":913,"title":{},"body":{"entities/CommentsModel.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{}}}],["column()@isstring",{"_index":904,"title":{},"body":{"entities/CommentsModel.html":{},"entities/MessagesModel.html":{}}}],["column()@isstring()@transform",{"_index":1249,"title":{},"body":{"entities/ImageModel.html":{}}}],["column({default",{"_index":906,"title":{},"body":{"entities/CommentsModel.html":{},"entities/ImageModel.html":{},"entities/UserFollowersModel.html":{}}}],["column({enum",{"_index":1256,"title":{},"body":{"entities/ImageModel.html":{}}}],["comment",{"_index":872,"title":{},"body":{"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentsDto.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"entities/PostsModel.html":{},"classes/UpdateCommentsDto.html":{},"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comment.author",{"_index":1838,"title":{},"body":{"entities/UsersModel.html":{}}}],["comment.post",{"_index":1516,"title":{},"body":{"entities/PostsModel.html":{}}}],["commentcount",{"_index":892,"title":{},"body":{"controllers/CommentsController.html":{},"entities/PostsModel.html":{}}}],["commentid",{"_index":840,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"guards/IsCommentMineOrAdminGuard.html":{}}}],["comments",{"_index":1504,"title":{},"body":{"entities/PostsModel.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["comments.controller",{"_index":923,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.dto",{"_index":868,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/UpdateCommentsDto.html":{}}}],["comments.dto.ts",{"_index":1120,"title":{},"body":{"classes/CreateCommentsDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/UpdateCommentsDto.html":{},"coverage.html":{}}}],["comments.dto.ts:17",{"_index":1123,"title":{},"body":{"classes/CreateCommentsDto.html":{}}}],["comments.service",{"_index":867,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"guards/IsCommentMineOrAdminGuard.html":{}}}],["comments/entity/comments.entity",{"_index":1531,"title":{},"body":{"entities/PostsModel.html":{}}}],["commentscontroller",{"_index":830,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentservice",{"_index":1273,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{}}}],["commentsmodel",{"_index":168,"title":{"entities/CommentsModel.html":{}},"body":{"modules/AppModule.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentsDto.html":{},"entities/PostsModel.html":{},"classes/UpdateCommentsDto.html":{},"entities/UsersModel.html":{},"coverage.html":{}}}],["commentsmodule",{"_index":127,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"index.html":{},"modules.html":{}}}],["commentsrepository",{"_index":940,"title":{},"body":{"injectables/CommentsService.html":{}}}],["commentsservice",{"_index":866,"title":{"injectables/CommentsService.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"coverage.html":{},"index.html":{}}}],["common",{"_index":976,"title":{},"body":{"controllers/CommonController.html":{}}}],["common.controller",{"_index":996,"title":{},"body":{"modules/CommonModule.html":{}}}],["common.service",{"_index":984,"title":{},"body":{"controllers/CommonController.html":{},"modules/CommonModule.html":{}}}],["common/common.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["common/const/path.const",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["common/entity/image.entity",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["common/interceptor/log.interceptor",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/log.middleware",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["commoncontroller",{"_index":974,"title":{"controllers/CommonController.html":{}},"body":{"controllers/CommonController.html":{},"modules/CommonModule.html":{},"coverage.html":{}}}],["commonmodule",{"_index":128,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"index.html":{},"modules.html":{}}}],["commonservice",{"_index":756,"title":{"injectables/CommonService.html":{}},"body":{"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"interfaces/SavePayload.html":{},"coverage.html":{},"index.html":{}}}],["complex",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["complexity",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["complexity(value",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["composefindoptions",{"_index":1031,"title":{},"body":{"injectables/CommonService.html":{}}}],["composefindoptions(dto",{"_index":1038,"title":{},"body":{"injectables/CommonService.html":{}}}],["config",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["config.callbackurl",{"_index":1205,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["config.clientid",{"_index":1201,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["config.clientsecret",{"_index":1203,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configmodule",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RedisModule.html":{}}}],["configmodule.forfeature(googleconfig",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forfeature(kakaoconfig",{"_index":440,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["configs/app.config",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["configs/db.config",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{}}}],["configservice.get('db.database",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db.host",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db.logginglevel",{"_index":266,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db.password",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db.port",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db.synchronize",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db.username",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["configure",{"_index":920,"title":{},"body":{"modules/CommentsModule.html":{}}}],["configure(consumer",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{}}}],["connect",{"_index":703,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["connectedsocket",{"_index":667,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["console",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('get",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(`${requestinfo",{"_index":1331,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["console.log(`${server",{"_index":696,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["console.log(`[req",{"_index":1347,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["console.log(`on",{"_index":699,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["console.log(`response",{"_index":1336,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["console.log(e",{"_index":714,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["console.warn('rate",{"_index":1622,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["const",{"_index":58,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"classes/WsErrorFilter.html":{},"miscellaneous/variables.html":{}}}],["const/default",{"_index":958,"title":{},"body":{"injectables/CommentsService.html":{}}}],["const/filter",{"_index":1056,"title":{},"body":{"injectables/CommonService.html":{}}}],["const/path.const",{"_index":1006,"title":{},"body":{"modules/CommonModule.html":{},"entities/ImageModel.html":{}}}],["constraints",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":53,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{}}}],["constructor(authservice",{"_index":602,"title":{},"body":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["constructor(chatsrepository",{"_index":813,"title":{},"body":{"injectables/ChatsService.html":{}}}],["constructor(chatsservice",{"_index":641,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["constructor(commentservice",{"_index":1271,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{}}}],["constructor(commentsrepository",{"_index":938,"title":{},"body":{"injectables/CommentsService.html":{}}}],["constructor(config",{"_index":1036,"title":{},"body":{"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["constructor(datasource",{"_index":1741,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["constructor(imagerepository",{"_index":1480,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["constructor(jwtservice",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(keyv",{"_index":1666,"title":{},"body":{"injectables/RedisService.html":{}}}],["constructor(length",{"_index":1358,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{}}}],["constructor(messagesrepository",{"_index":754,"title":{},"body":{"injectables/ChatsMessagesService.html":{}}}],["constructor(postservice",{"_index":1291,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{},"injectables/PostExistsMiddleware.html":{}}}],["constructor(postsservice",{"_index":1543,"title":{},"body":{"classes/PostsResolver.html":{}}}],["constructor(private",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"guards/BasicTokenGuard.html":{},"controllers/ChatsController.html":{},"controllers/CommonController.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"classes/PostsResolver.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":1590,"title":{},"body":{"guards/RateLimiterGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":922,"title":{},"body":{"modules/CommentsModule.html":{}}}],["consumer.apply",{"_index":280,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(postexistsmiddleware).forroutes(commentscontroller",{"_index":930,"title":{},"body":{"modules/CommentsModule.html":{}}}],["content",{"_index":1138,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"classes/UpdatePostDto.html":{}}}],["context",{"_index":25,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleAuthGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":61,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":60,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gettype",{"_index":1621,"title":{},"body":{"guards/RateLimiterGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":68,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getresponse",{"_index":1335,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["context.switchtows().getclient",{"_index":1732,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["controller",{"_index":106,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/CommonController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/CommonController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('chats",{"_index":625,"title":{},"body":{"controllers/ChatsController.html":{}}}],["controller('chats/:cid/messages",{"_index":1380,"title":{},"body":{"controllers/MessagesController.html":{}}}],["controller('common",{"_index":987,"title":{},"body":{"controllers/CommonController.html":{}}}],["controller('posts",{"_index":1463,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('posts/:postid/comments",{"_index":882,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('users",{"_index":1738,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{}}}],["controllers",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ChatsController.html":{},"modules/ChatsModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["count",{"_index":1063,"title":{},"body":{"injectables/CommonService.html":{}}}],["coverage",{"_index":1899,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":1761,"title":{},"body":{"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{}}}],["create_chat",{"_index":619,"title":{},"body":{"controllers/ChatsController.html":{}}}],["createchat",{"_index":636,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{}}}],["createchat(data",{"_index":649,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["createchat(dto",{"_index":818,"title":{},"body":{"injectables/ChatsService.html":{}}}],["createchatdto",{"_index":650,"title":{"classes/CreateChatDto.html":{}},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"classes/CreateChatDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":932,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcomment(dto",{"_index":941,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentsdto",{"_index":858,"title":{"classes/CreateCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentsDto.html":{},"classes/UpdateCommentsDto.html":{},"coverage.html":{}}}],["createcommentsdto:17",{"_index":1760,"title":{},"body":{"classes/UpdateCommentsDto.html":{}}}],["createcomplexityrule",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["createdat",{"_index":552,"title":{},"body":{"classes/BaseModel.html":{},"entities/PostsModel.html":{},"entities/UsersModel.html":{}}}],["createdatecolumn",{"_index":565,"title":{},"body":{"classes/BaseModel.html":{}}}],["createerror",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["createmessage",{"_index":752,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["createmessage(dto",{"_index":759,"title":{},"body":{"injectables/ChatsMessagesService.html":{}}}],["createmessagesdto",{"_index":664,"title":{"classes/CreateMessagesDto.html":{}},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"classes/CreateMessagesDto.html":{},"interfaces/SavePayload.html":{},"coverage.html":{}}}],["createparamdecorator((data",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpostdto",{"_index":1133,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createpostimage",{"_index":1479,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["createpostimage(dto",{"_index":1483,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["createpostimagedto",{"_index":1147,"title":{"classes/CreatePostImageDto.html":{}},"body":{"classes/CreatePostImageDto.html":{},"injectables/PostsImagesService.html":{},"coverage.html":{}}}],["createpostsseeder",{"_index":1152,"title":{"classes/CreatePostsSeeder.html":{}},"body":{"classes/CreatePostsSeeder.html":{},"coverage.html":{}}}],["createuser(req",{"_index":1744,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["cross",{"_index":1985,"title":{},"body":{"dependencies.html":{}}}],["crud",{"_index":833,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["cs",{"_index":1654,"title":{},"body":{"modules/RedisModule.html":{}}}],["cs.get('app.redis.host",{"_index":1655,"title":{},"body":{"modules/RedisModule.html":{}}}],["cs.get('app.redis.port",{"_index":1656,"title":{},"body":{"modules/RedisModule.html":{}}}],["ctx",{"_index":1228,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":1231,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":1230,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cursor",{"_index":1083,"title":{},"body":{"injectables/CommonService.html":{}}}],["cursorpaginate",{"_index":1032,"title":{},"body":{"injectables/CommonService.html":{}}}],["cursorpaginate(dto",{"_index":1043,"title":{},"body":{"injectables/CommonService.html":{}}}],["data",{"_index":654,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/CommonService.html":{},"guards/SocketBearerTokenGuard.html":{},"classes/WsErrorFilter.html":{}}}],["data.chatids",{"_index":719,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["data.interface.ts",{"_index":1553,"title":{},"body":{"interfaces/ProviderData.html":{},"coverage.html":{}}}],["database",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":1158,"title":{},"body":{"classes/CreatePostsSeeder.html":{},"injectables/TransactionInterceptor.html":{}}}],["date",{"_index":554,"title":{},"body":{"classes/BaseModel.html":{},"injectables/LogInterceptor.html":{}}}],["date().getmilliseconds",{"_index":1339,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["date().tolocalestring('kr",{"_index":1243,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{}}}],["db",{"_index":1657,"title":{},"body":{"modules/RedisModule.html":{},"controllers/UsersController.html":{}}}],["dbconfig",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["decodebasictoken",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodebasictoken(base64string",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded.split",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorator",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator/rate",{"_index":1600,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["decorator/roles.decorator",{"_index":1720,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["decorator/user.decorator",{"_index":1813,"title":{},"body":{"controllers/UsersController.html":{}}}],["decorators",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"entities/ChatsModel.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"controllers/CommonController.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/EnterChatDto.html":{},"entities/ImageModel.html":{},"classes/LoginDto.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{}}}],["default",{"_index":579,"title":{},"body":{"classes/BasePaginationDto.html":{},"entities/CommentsModel.html":{},"injectables/CommonService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostsSeeder.html":{},"entities/ImageModel.html":{},"injectables/LogInterceptor.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"entities/PostsModel.html":{},"interfaces/RateLimitOptions.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["default_comment_find_options",{"_index":957,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_post_find_options",{"_index":1941,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultcomplexity",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultvaluepipe",{"_index":1809,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(false",{"_index":1817,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"classes/WsErrorFilter.html":{}}}],["del",{"_index":1663,"title":{},"body":{"injectables/RedisService.html":{}}}],["del(key",{"_index":1669,"title":{},"body":{"injectables/RedisService.html":{}}}],["delbypattern",{"_index":1664,"title":{},"body":{"injectables/RedisService.html":{}}}],["delbypattern(pattern",{"_index":1671,"title":{},"body":{"injectables/RedisService.html":{}}}],["delete",{"_index":862,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete(':commentid",{"_index":896,"title":{},"body":{"controllers/CommentsController.html":{}}}],["delete(':commentid')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":843,"title":{},"body":{"controllers/CommentsController.html":{}}}],["delete(':postid')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1432,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('follow/:id",{"_index":1832,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('follow/:id')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1789,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('follow/:id/cancel",{"_index":1822,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('follow/:id/cancel')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1792,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecomment",{"_index":834,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["deletecomment(postid",{"_index":839,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["deletefollow",{"_index":1780,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletefollow(userid",{"_index":1787,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletefollowcancel",{"_index":1781,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletefollowcancel(userid",{"_index":1791,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletepost",{"_index":1424,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1431,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteuser",{"_index":1716,"title":{},"body":{"guards/RolesGuard.html":{}}}],["dependencies",{"_index":116,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["depth",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["depthlimit",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["depthlimit(5",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["desc",{"_index":578,"title":{},"body":{"classes/BasePaginationDto.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["desc'])@isoptional",{"_index":582,"title":{},"body":{"classes/BasePaginationDto.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["description",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"classes/WsErrorFilter.html":{},"properties.html":{}}}],["destination",{"_index":1027,"title":{},"body":{"modules/CommonModule.html":{}}}],["dev",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["development",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["directive",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["directiveestimator",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["disable",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"classes/BasePaginationDto.html":{}}}],["disconnect",{"_index":700,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["displayname",{"_index":1211,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["documentation",{"_index":1900,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":1557,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["done",{"_index":1192,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["done(null",{"_index":1217,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["driver",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BasePaginationDto.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/EnterChatDto.html":{},"controllers/MessagesController.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PostsImagesService.html":{},"classes/RegisterUserDto.html":{},"interfaces/SavePayload.html":{}}}],["dto.chatid",{"_index":728,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["dto.message",{"_index":775,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["dto.order__createdat",{"_index":1081,"title":{},"body":{"injectables/CommonService.html":{}}}],["dto.page",{"_index":1095,"title":{},"body":{"injectables/CommonService.html":{}}}],["dto.path",{"_index":1495,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["dto.take",{"_index":1071,"title":{},"body":{"injectables/CommonService.html":{}}}],["dto.userids.map((id",{"_index":826,"title":{},"body":{"injectables/ChatsService.html":{}}}],["dto.whispertargetid",{"_index":734,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["dto/base",{"_index":1053,"title":{},"body":{"injectables/CommonService.html":{}}}],["dto/create",{"_index":674,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"interfaces/SavePayload.html":{}}}],["dto/enter",{"_index":675,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["dto/login.dto",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/paginate",{"_index":623,"title":{},"body":{"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/PostsController.html":{}}}],["dto/register",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":869,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/PostsController.html":{}}}],["dto[key",{"_index":1079,"title":{},"body":{"injectables/CommonService.html":{}}}],["e",{"_index":713,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/TransactionInterceptor.html":{}}}],["each",{"_index":1116,"title":{},"body":{"classes/CreateChatDto.html":{},"classes/CreatePostDto.html":{},"classes/EnterChatDto.html":{}}}],["elapsed",{"_index":1617,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["email",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{},"classes/LoginDto.html":{},"interfaces/ProviderData.html":{},"classes/RegisterUserDto.html":{},"entities/UsersModel.html":{}}}],["emails",{"_index":1212,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails.length",{"_index":1214,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":1215,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emailvalidationmessage",{"_index":1843,"title":{},"body":{"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emit",{"_index":746,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["enableimplicitconversion",{"_index":691,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["end",{"_index":1616,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["enterchat",{"_index":637,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["enterchat(data",{"_index":655,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["enterchatdto",{"_index":656,"title":{"classes/EnterChatDto.html":{}},"body":{"classes/ChatsGateway.html":{},"classes/EnterChatDto.html":{},"coverage.html":{}}}],["entities",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"entities/ChatsModel.html":{},"entities/CommentsModel.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{},"index.html":{}}}],["entity",{"_index":785,"title":{"entities/ChatsModel.html":{},"entities/CommentsModel.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{}},"body":{"entities/ChatsModel.html":{},"entities/CommentsModel.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{},"coverage.html":{}}}],["entity/base.entity",{"_index":1054,"title":{},"body":{"injectables/CommonService.html":{}}}],["entity/chats.entity",{"_index":805,"title":{},"body":{"modules/ChatsModule.html":{},"injectables/ChatsService.html":{}}}],["entity/comments.entity",{"_index":924,"title":{},"body":{"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateCommentsDto.html":{}}}],["entity/messages.entity",{"_index":767,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"classes/CreateMessagesDto.html":{},"interfaces/SavePayload.html":{}}}],["entity/posts.entity",{"_index":1146,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{}}}],["entity/user",{"_index":1893,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity/users.entity",{"_index":1812,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["enum",{"_index":1263,"title":{},"body":{"entities/ImageModel.html":{},"entities/UsersModel.html":{}}}],["enumerations",{"_index":2010,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":1563,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["env",{"_index":1986,"title":{},"body":{"dependencies.html":{}}}],["envfilepath",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":265,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PostsImagesService.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["eslint",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"classes/BasePaginationDto.html":{}}}],["eslint/no",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/prefer",{"_index":594,"title":{},"body":{"classes/BasePaginationDto.html":{}}}],["estimation",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["estimators",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":1288,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{},"classes/LoginDto.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{}}}],["exception",{"_index":1226,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsErrorFilter.html":{}}}],["exception.getresponse",{"_index":1234,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsErrorFilter.html":{}}}],["exception.getstatus",{"_index":1233,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":1237,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1221,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":1873,"title":{},"body":{"entities/UsersModel.html":{}}}],["execution",{"_index":1337,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["executioncontext",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":1825,"title":{},"body":{"controllers/UsersController.html":{}}}],["existinguser",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguser.password",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":720,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsService.html":{},"injectables/PostExistsMiddleware.html":{},"guards/RateLimiterGuard.html":{}}}],["exists.middleware",{"_index":927,"title":{},"body":{"modules/CommentsModule.html":{}}}],["exists.middleware.ts",{"_index":1416,"title":{},"body":{"injectables/PostExistsMiddleware.html":{},"coverage.html":{}}}],["exists.middleware.ts:12",{"_index":1417,"title":{},"body":{"injectables/PostExistsMiddleware.html":{}}}],["exists.middleware.ts:25",{"_index":1418,"title":{},"body":{"injectables/PostExistsMiddleware.html":{}}}],["existssync",{"_index":1002,"title":{},"body":{"modules/CommonModule.html":{}}}],["existssync(temp_folder_path",{"_index":1008,"title":{},"body":{"modules/CommonModule.html":{}}}],["expiresin",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":50,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{}}}],["exports",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["express",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":979,"title":{},"body":{"controllers/CommonController.html":{}}}],["ext",{"_index":1018,"title":{},"body":{"modules/CommonModule.html":{}}}],["extends",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"entities/ChatsModel.html":{},"entities/CommentsModel.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"entities/ImageModel.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"entities/MessagesModel.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"entities/PostsModel.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{},"classes/WsErrorFilter.html":{}}}],["extension",{"_index":1164,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["extensions",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["extname",{"_index":998,"title":{},"body":{"modules/CommonModule.html":{}}}],["extname(file.originalname",{"_index":1019,"title":{},"body":{"modules/CommonModule.html":{}}}],["extracttokenfromheader",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["extracttokenfromheader(header",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["factorymanager",{"_index":1159,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["factorymanager.get(postsmodel",{"_index":1166,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["false",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"injectables/CommentsService.html":{},"modules/CommonModule.html":{},"classes/CreatePostDto.html":{},"entities/PostsModel.html":{},"guards/RateLimiterGuard.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{}}}],["false})@joincolumn({name",{"_index":1508,"title":{},"body":{"entities/PostsModel.html":{}}}],["field",{"_index":563,"title":{},"body":{"classes/BaseModel.html":{},"injectables/CommonService.html":{},"injectables/LogInterceptor.html":{},"entities/PostsModel.html":{},"entities/UsersModel.html":{}}}],["field()@column()@isstring({message",{"_index":1518,"title":{},"body":{"entities/PostsModel.html":{},"entities/UsersModel.html":{}}}],["field()@column({default",{"_index":1845,"title":{},"body":{"entities/UsersModel.html":{}}}],["field()@column({length",{"_index":1860,"title":{},"body":{"entities/UsersModel.html":{}}}],["field()@column({unique",{"_index":1840,"title":{},"body":{"entities/UsersModel.html":{}}}],["field()@createdatecolumn",{"_index":555,"title":{},"body":{"classes/BaseModel.html":{}}}],["field()@updatedatecolumn",{"_index":561,"title":{},"body":{"classes/BaseModel.html":{}}}],["field(undefined)@column()@index('idx_post_author_id')@relationid(post",{"_index":1510,"title":{},"body":{"entities/PostsModel.html":{}}}],["field(undefined)@column({default",{"_index":1514,"title":{},"body":{"entities/PostsModel.html":{}}}],["field(undefined)@column({type",{"_index":1869,"title":{},"body":{"entities/UsersModel.html":{}}}],["field(undefined)@manytoone(undefined",{"_index":1505,"title":{},"body":{"entities/PostsModel.html":{}}}],["field(undefined)@primarygeneratedcolumn",{"_index":557,"title":{},"body":{"classes/BaseModel.html":{}}}],["field({nullable",{"_index":1853,"title":{},"body":{"entities/UsersModel.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{}}}],["file.filename",{"_index":990,"title":{},"body":{"controllers/CommonController.html":{}}}],["filefilter",{"_index":1015,"title":{},"body":{"modules/CommonModule.html":{}}}],["fileinterceptor",{"_index":985,"title":{},"body":{"controllers/CommonController.html":{}}}],["filename",{"_index":982,"title":{},"body":{"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/PostsImagesService.html":{}}}],["filesize",{"_index":1012,"title":{},"body":{"modules/CommonModule.html":{}}}],["filter",{"_index":682,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["filter.ts",{"_index":1220,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{}}}],["filter.ts:20",{"_index":1225,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["filter.ts:21",{"_index":1895,"title":{},"body":{"classes/WsErrorFilter.html":{}}}],["filter/http.exception",{"_index":1219,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["filter/ws.exception",{"_index":681,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{}}}],["filter_mapper",{"_index":1055,"title":{},"body":{"injectables/CommonService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filter_mapper[operator](`%${value",{"_index":1111,"title":{},"body":{"injectables/CommonService.html":{}}}],["filter_mapper[operator](value",{"_index":1109,"title":{},"body":{"injectables/CommonService.html":{}}}],["filter_mapper[operator](values[0",{"_index":1107,"title":{},"body":{"injectables/CommonService.html":{}}}],["find",{"_index":959,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["findmanyoptions",{"_index":764,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"injectables/CommonService.html":{},"interfaces/SavePayload.html":{},"miscellaneous/variables.html":{}}}],["findoptions",{"_index":1061,"title":{},"body":{"injectables/CommonService.html":{}}}],["findoptionsorder",{"_index":1052,"title":{},"body":{"injectables/CommonService.html":{}}}],["findoptionswhere",{"_index":1040,"title":{},"body":{"injectables/CommonService.html":{}}}],["findorcreatebykakao",{"_index":1307,"title":{},"body":{"injectables/KakaoStrategy.html":{}}}],["first",{"_index":1693,"title":{},"body":{"injectables/RedisService.html":{}}}],["followee",{"_index":1770,"title":{},"body":{"entities/UserFollowersModel.html":{}}}],["followeecount",{"_index":1831,"title":{},"body":{"controllers/UsersController.html":{},"entities/UsersModel.html":{}}}],["followeeid",{"_index":1788,"title":{},"body":{"controllers/UsersController.html":{}}}],["followees",{"_index":1468,"title":{},"body":{"controllers/PostsController.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{}}}],["follower",{"_index":1771,"title":{},"body":{"entities/UserFollowersModel.html":{}}}],["followercount",{"_index":1830,"title":{},"body":{"controllers/UsersController.html":{},"entities/UsersModel.html":{}}}],["followerid",{"_index":1803,"title":{},"body":{"controllers/UsersController.html":{}}}],["followers",{"_index":1776,"title":{},"body":{"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{}}}],["followers.entity",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{}}}],["followers.entity.ts",{"_index":1769,"title":{},"body":{"entities/UserFollowersModel.html":{},"coverage.html":{}}}],["followers.entity.ts:21",{"_index":1775,"title":{},"body":{"entities/UserFollowersModel.html":{}}}],["followers.entity.ts:31",{"_index":1773,"title":{},"body":{"entities/UserFollowersModel.html":{}}}],["followers.entity.ts:43",{"_index":1777,"title":{},"body":{"entities/UserFollowersModel.html":{}}}],["following",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["followingposts",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["for(const",{"_index":717,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/CommonService.html":{}}}],["for(let",{"_index":1477,"title":{},"body":{"controllers/PostsController.html":{}}}],["forbiddenexception",{"_index":1275,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"guards/RolesGuard.html":{}}}],["forbidnonwhitelisted",{"_index":693,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["form",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["forroutes",{"_index":281,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":73,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["fs",{"_index":1004,"title":{},"body":{"modules/CommonModule.html":{},"injectables/PostsImagesService.html":{}}}],["function",{"_index":1935,"title":{},"body":{"coverage.html":{}}}],["function(req",{"_index":1028,"title":{},"body":{"modules/CommonModule.html":{}}}],["functions",{"_index":2021,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gateway",{"_index":697,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["get(\"google/callback",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"login/google",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':commentid",{"_index":886,"title":{},"body":{"controllers/CommentsController.html":{}}}],["get(':commentid')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":848,"title":{},"body":{"controllers/CommentsController.html":{}}}],["get(':postid",{"_index":1473,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1439,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('follow/me",{"_index":1815,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('follow/me')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1796,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('follow/me/requests",{"_index":1824,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('follow/me/requests')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1799,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('following",{"_index":1465,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('following')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1436,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('google/callback')@useguards(googleauthguard)@ispublic(ispublicenum.is_public",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('kakao/callback",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('kakao/callback')@ispublic(ispublicenum.is_public)@useguards(kakaoauthguard",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('kakao/logout/callback",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('kakao/logout/callback')@ispublic(ispublicenum.is_public",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/google')@useguards(googleauthguard)@ispublic(ispublicenum.is_public",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/kakao",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/kakao')@ispublic(ispublicenum.is_public)@useguards(kakaoauthguard",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('logout/kakao",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('logout/kakao')@ispublic(ispublicenum.is_public",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apibearerauth(authscheme.access)@apioperation({summary",{"_index":618,"title":{},"body":{"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":1442,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(key",{"_index":1674,"title":{},"body":{"injectables/RedisService.html":{}}}],["getcomment",{"_index":835,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcomment(postid",{"_index":847,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcommentbyid",{"_index":933,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getcommentbyid(postid",{"_index":945,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getcomments",{"_index":836,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcomments(postid",{"_index":850,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getfollow",{"_index":1782,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollow(userid",{"_index":1794,"title":{},"body":{"controllers/UsersController.html":{}}}],["getfollowingposts",{"_index":1425,"title":{},"body":{"controllers/PostsController.html":{}}}],["getfollowingposts(userid",{"_index":1435,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":285,"title":{},"body":{"injectables/AppService.html":{}}}],["getpost",{"_index":1426,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{}}}],["getpost(@args('id",{"_index":1549,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getpost(@param('postid",{"_index":1474,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpost(id",{"_index":1438,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{}}}],["getposts",{"_index":1427,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(query",{"_index":1441,"title":{},"body":{"controllers/PostsController.html":{}}}],["getrepository",{"_index":934,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostsImagesService.html":{}}}],["getrepository(qr",{"_index":947,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostsImagesService.html":{}}}],["getrequestsfollow",{"_index":1783,"title":{},"body":{"controllers/UsersController.html":{}}}],["getrequestsfollow(userid",{"_index":1798,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":1784,"title":{},"body":{"controllers/UsersController.html":{}}}],["given",{"_index":1696,"title":{},"body":{"injectables/RedisService.html":{}}}],["global",{"_index":1647,"title":{},"body":{"modules/RedisModule.html":{}}}],["google",{"_index":1177,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/ProviderData.html":{},"entities/UsersModel.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["google/login",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthguard",{"_index":368,"title":{"injectables/GoogleAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["googleauthredirect",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(@user",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(user",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleconfig",{"_index":436,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{}}}],["googledata",{"_index":1554,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["googleid",{"_index":1213,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["googlestrategy",{"_index":428,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"index.html":{}}}],["gqlcontext",{"_index":64,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["gqlcontext.getcontext().req",{"_index":67,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["gqlcontext.getcontext().req.token",{"_index":85,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["gqlcontext.getcontext().req.tokentype",{"_index":86,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["gqlcontext.getcontext().req.user",{"_index":84,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["gqlctx",{"_index":1322,"title":{},"body":{"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{}}}],["gqlctx.getcontext().req",{"_index":1324,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["gqlctx.getcontext().res",{"_index":1334,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["gqlctx.getinfo",{"_index":1323,"title":{},"body":{"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{}}}],["gqlexecutioncontext",{"_index":43,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":65,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["graphql",{"_index":48,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"classes/BaseModel.html":{},"guards/BearerTokenGuard.html":{},"injectables/LogInterceptor.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"entities/UsersModel.html":{},"dependencies.html":{}}}],["graphql_complexity_limit",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlerror",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["guard",{"_index":595,"title":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"guards/RateLimiterGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{}},"body":{"guards/RateLimiterGuard.html":{},"coverage.html":{}}}],["guard/bearer",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/google",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/is",{"_index":871,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["guard/kakao",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":597,"title":{},"body":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"guards/RateLimiterGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"index.html":{}}}],["guards/rate",{"_index":1573,"title":{},"body":{"interfaces/RateLimitOptions.html":{}}}],["handleconnection",{"_index":638,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["handleconnection(socket",{"_index":659,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["handledisconnect",{"_index":639,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["handledisconnect(socket",{"_index":661,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["handlejoinroom(client",{"_index":1729,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["hash",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["header",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{}}}],["header.split",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":704,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["headers['authorization",{"_index":707,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["hello",{"_index":288,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommonService.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{},"classes/WsErrorFilter.html":{}}}],["host.switchtohttp",{"_index":1229,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["host.switchtows().getclient",{"_index":1897,"title":{},"body":{"classes/WsErrorFilter.html":{}}}],["html",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["http",{"_index":47,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/WsErrorFilter.html":{}}}],["http/graphql",{"_index":1593,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["http://localhost:3000/posts/xxx.jpg",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost:3000/public/posts/xxx.jpg",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":1223,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsErrorFilter.html":{}}}],["httpexceptionfilter",{"_index":1218,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://kauth.kakao.com/oauth/logout?client_id=${restapikey}&logout_redirect_uri=${encodeuricomponent(logoutredirecturi",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["i_like",{"_index":1110,"title":{},"body":{"injectables/CommonService.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateChatDto.html":{},"classes/CreateMessagesDto.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleStrategy.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoStrategy.html":{},"controllers/MessagesController.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"interfaces/SavePayload.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1626,"title":{},"body":{"guards/RateLimiterGuard.html":{},"coverage.html":{}}}],["idx_post_author_id",{"_index":1513,"title":{},"body":{"entities/PostsModel.html":{}}}],["if(!chatexists",{"_index":732,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["if(!exists",{"_index":722,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/PostExistsMiddleware.html":{}}}],["if(!isok",{"_index":1284,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{}}}],["if(!postid",{"_index":1295,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{},"injectables/PostExistsMiddleware.html":{}}}],["if(!rawtoken",{"_index":607,"title":{},"body":{"guards/BasicTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["if(!req.queryrunner",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(!user",{"_index":1277,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"miscellaneous/variables.html":{}}}],["if(!userexists",{"_index":737,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["if(args.constraints.length",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(data",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(decoded.type",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(dto.chatid",{"_index":726,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["if(dto.page",{"_index":1058,"title":{},"body":{"injectables/CommonService.html":{}}}],["if(dto.whispertargetid",{"_index":733,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["if(ext",{"_index":1020,"title":{},"body":{"modules/CommonModule.html":{}}}],["if(key.startswith('order__",{"_index":1094,"title":{},"body":{"injectables/CommonService.html":{}}}],["if(key.startswith('where__",{"_index":1092,"title":{},"body":{"injectables/CommonService.html":{}}}],["if(obj.type",{"_index":1267,"title":{},"body":{"entities/ImageModel.html":{}}}],["if(operator",{"_index":1105,"title":{},"body":{"injectables/CommonService.html":{}}}],["if(split.length",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommonService.html":{}}}],["if(splittoken.length",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(user.role",{"_index":1278,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{}}}],["if(value.tostring().length",{"_index":1369,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["ilike",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image",{"_index":1521,"title":{},"body":{"entities/PostsModel.html":{}}}],["image.dto",{"_index":1490,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["image.dto.ts",{"_index":1149,"title":{},"body":{"classes/CreatePostImageDto.html":{},"coverage.html":{}}}],["image.post",{"_index":1522,"title":{},"body":{"entities/PostsModel.html":{}}}],["image/images.service",{"_index":1457,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["imagemodel",{"_index":159,"title":{"entities/ImageModel.html":{}},"body":{"modules/AppModule.html":{},"classes/CreatePostImageDto.html":{},"entities/ImageModel.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["imagemodeltype",{"_index":1255,"title":{},"body":{"entities/ImageModel.html":{},"controllers/PostsController.html":{},"miscellaneous/enumerations.html":{}}}],["imagemodeltype.post_image",{"_index":1268,"title":{},"body":{"entities/ImageModel.html":{}}}],["imagemodeltype})@isenum(imagemodeltype",{"_index":1257,"title":{},"body":{"entities/ImageModel.html":{}}}],["imagerepository",{"_index":1482,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["images",{"_index":1139,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/ImageModel.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"miscellaneous/variables.html":{}}}],["images)'})@useinterceptors(transactioninterceptor",{"_index":1450,"title":{},"body":{"controllers/PostsController.html":{}}}],["implements",{"_index":52,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"modules/CommentsModule.html":{},"classes/CreatePostsSeeder.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{}}}],["import",{"_index":28,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{}}}],["imports",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{}}}],["includenotconfirmed",{"_index":1795,"title":{},"body":{"controllers/UsersController.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"classes/WsErrorFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('idx_post_author_id",{"_index":1532,"title":{},"body":{"entities/PostsModel.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{}}}],["info.fieldname",{"_index":1327,"title":{},"body":{"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{}}}],["info.parenttype",{"_index":1326,"title":{},"body":{"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{}}}],["info.parenttype}:${info.fieldname",{"_index":1632,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["inherited",{"_index":1395,"title":{},"body":{"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateCommentsDto.html":{}}}],["init",{"_index":698,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["inject",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{}}}],["inject(appconfig.key",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommonService.html":{}}}],["inject(googleconfig.key",{"_index":1198,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["inject(kakaoconfig.key",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"injectables/KakaoStrategy.html":{}}}],["inject(keyv_token",{"_index":1679,"title":{},"body":{"injectables/RedisService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/PostsImagesService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransactionInterceptor.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/PostsImagesService.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/PostsImagesService.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"index.html":{}}}],["injectrepository",{"_index":766,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"injectables/PostsImagesService.html":{},"interfaces/SavePayload.html":{}}}],["injectrepository(chatsmodel",{"_index":822,"title":{},"body":{"injectables/ChatsService.html":{}}}],["injectrepository(commentsmodel",{"_index":961,"title":{},"body":{"injectables/CommentsService.html":{}}}],["injectrepository(imagemodel",{"_index":1491,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["injectrepository(messagesmodel",{"_index":774,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["int",{"_index":1248,"title":{},"body":{"entities/ImageModel.html":{},"classes/PostsResolver.html":{}}}],["intercept",{"_index":1311,"title":{},"body":{"injectables/LogInterceptor.html":{},"injectables/TransactionInterceptor.html":{}}}],["intercept(context",{"_index":1312,"title":{},"body":{"injectables/LogInterceptor.html":{},"injectables/TransactionInterceptor.html":{}}}],["interface",{"_index":770,"title":{"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"interfaces/SavePayload.html":{}},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"interfaces/SavePayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":1551,"title":{},"body":{"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"interfaces/SavePayload.html":{},"index.html":{}}}],["internalservererrorexception",{"_index":1747,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["internalservererrorexception('user",{"_index":2095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internalservererrorexception(e.message",{"_index":1756,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["ioredis",{"_index":1597,"title":{},"body":{"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["ioredisclient",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ioredistoken",{"_index":1598,"title":{},"body":{"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ip",{"_index":1329,"title":{},"body":{"injectables/LogInterceptor.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"miscellaneous/variables.html":{}}}],["ip:${req.ip",{"_index":1629,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["ip:{ip",{"_index":1625,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["is_null",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_public",{"_index":2019,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":37,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_refresh_token",{"_index":2020,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isarray",{"_index":1118,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["isarray()@isnumber",{"_index":1115,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["isbearer",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":1413,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["isboolean()@isoptional",{"_index":1408,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["iscommentmine",{"_index":935,"title":{},"body":{"injectables/CommentsService.html":{}}}],["iscommentmine(userid",{"_index":949,"title":{},"body":{"injectables/CommentsService.html":{}}}],["iscommentmineoradminguard",{"_index":870,"title":{"guards/IsCommentMineOrAdminGuard.html":{}},"body":{"controllers/CommentsController.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"coverage.html":{}}}],["isconfirmed",{"_index":1469,"title":{},"body":{"controllers/PostsController.html":{},"entities/UserFollowersModel.html":{}}}],["isdevelopment",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["isemail",{"_index":1874,"title":{},"body":{"entities/UsersModel.html":{}}}],["isenum",{"_index":1260,"title":{},"body":{"entities/ImageModel.html":{}}}],["isenum(imagemodeltype",{"_index":1264,"title":{},"body":{"entities/ImageModel.html":{}}}],["isglobal",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["isgraphql",{"_index":1620,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["isin",{"_index":590,"title":{},"body":{"classes/BasePaginationDto.html":{}}}],["isin(['asc",{"_index":581,"title":{},"body":{"classes/BasePaginationDto.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["isint",{"_index":1261,"title":{},"body":{"entities/ImageModel.html":{}}}],["isnull",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isnumber",{"_index":591,"title":{},"body":{"classes/BasePaginationDto.html":{},"entities/CommentsModel.html":{},"classes/CreateChatDto.html":{},"classes/CreateMessagesDto.html":{},"classes/EnterChatDto.html":{},"classes/PaginatePostDto.html":{}}}],["isnumber()@isoptional",{"_index":584,"title":{},"body":{"classes/BasePaginationDto.html":{},"classes/CreateMessagesDto.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["isok",{"_index":1281,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{}}}],["isonlyfollowingposts",{"_index":1404,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["isoptional",{"_index":592,"title":{},"body":{"classes/BasePaginationDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"entities/ImageModel.html":{},"classes/PaginatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["ispostmineoradminguard",{"_index":1285,"title":{"guards/IsPostMineOrAdminGuard.html":{}},"body":{"guards/IsPostMineOrAdminGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["ispublic",{"_index":49,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["ispublic(ispublicenum.is_public",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["ispublic(ispublicenum.is_public)@ratelimiter",{"_index":1443,"title":{},"body":{"controllers/PostsController.html":{}}}],["ispublic(ispublicenum.is_refresh_token",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["ispublic(ispublicenum.is_refresh_token)@useguards(refreshtokenguard",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["ispublicenum",{"_index":40,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["ispublicenum.is_public",{"_index":92,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["isrefreshtoken",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["isstring",{"_index":911,"title":{},"body":{"entities/CommentsModel.html":{},"classes/CreatePostDto.html":{},"entities/ImageModel.html":{},"classes/LoginDto.html":{},"entities/MessagesModel.html":{},"classes/PaginatePostDto.html":{},"entities/PostsModel.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"entities/UsersModel.html":{}}}],["isstring()@apiproperty({description",{"_index":1351,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["isstring()@isoptional",{"_index":1410,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["isstring({message",{"_index":1764,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["john",{"_index":1556,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["join",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"classes/ChatsGateway.html":{},"entities/ImageModel.html":{},"injectables/PostsImagesService.html":{},"miscellaneous/variables.html":{}}}],["join(process.cwd",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":1529,"title":{},"body":{"entities/PostsModel.html":{}}}],["jointable",{"_index":1878,"title":{},"body":{"entities/UsersModel.html":{}}}],["jpeg",{"_index":1021,"title":{},"body":{"modules/CommonModule.html":{}}}],["jpg",{"_index":1017,"title":{},"body":{"modules/CommonModule.html":{}}}],["json.parse(json.stringify(dto",{"_index":1090,"title":{},"body":{"injectables/CommonService.html":{}}}],["jwt",{"_index":46,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/RefreshTokenGuard.html":{}}}],["jwtmodule",{"_index":432,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":441,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice.verify",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["kakao",{"_index":1299,"title":{},"body":{"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"interfaces/ProviderData.html":{},"entities/UsersModel.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["kakao/login",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauth",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"injectables/KakaoStrategy.html":{}}}],["kakaoauthguard",{"_index":373,"title":{"injectables/KakaoAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/KakaoAuthGuard.html":{},"coverage.html":{}}}],["kakaoauthlogout",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauthlogout(@res",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauthlogout(res",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauthlogoutredirect",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauthlogoutredirect(@res",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauthlogoutredirect(res",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauthredirect",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauthredirect(@user",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoauthredirect(user",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaoconfig",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/KakaoStrategy.html":{}}}],["kakaoid",{"_index":1308,"title":{},"body":{"injectables/KakaoStrategy.html":{}}}],["kakaostrategy",{"_index":429,"title":{"injectables/KakaoStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/KakaoStrategy.html":{},"coverage.html":{},"index.html":{}}}],["key",{"_index":560,"title":{},"body":{"classes/BaseModel.html":{},"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{}}}],["key.split",{"_index":1699,"title":{},"body":{"injectables/RedisService.html":{}}}],["key.split('__",{"_index":1097,"title":{},"body":{"injectables/CommonService.html":{}}}],["keyof",{"_index":2094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keys",{"_index":1691,"title":{},"body":{"injectables/RedisService.html":{}}}],["keys[1",{"_index":1602,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["keyv",{"_index":1649,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["keyv_client",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyv_token",{"_index":1652,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keyvredis",{"_index":1650,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{}}}],["last_refill",{"_index":1614,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["lastitem",{"_index":1069,"title":{},"body":{"injectables/CommonService.html":{}}}],["lastitem.id.tostring",{"_index":1082,"title":{},"body":{"injectables/CommonService.html":{}}}],["lastitem?.id",{"_index":1084,"title":{},"body":{"injectables/CommonService.html":{}}}],["legend",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["length",{"_index":1361,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"entities/UsersModel.html":{}}}],["length(1",{"_index":1883,"title":{},"body":{"entities/UsersModel.html":{}}}],["length(3",{"_index":1884,"title":{},"body":{"entities/UsersModel.html":{}}}],["lengthvalidationmessage",{"_index":1863,"title":{},"body":{"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lengthvalidationmessage})@exclude({toplainonly",{"_index":1866,"title":{},"body":{"entities/UsersModel.html":{}}}],["less_than",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["less_than_or_equal",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lessthan",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lessthanorequal",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":2033,"title":{},"body":{"properties.html":{}}}],["likecount",{"_index":900,"title":{},"body":{"entities/CommentsModel.html":{},"entities/PostsModel.html":{}}}],["limit",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["limiter",{"_index":1623,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["limiter.decorator",{"_index":1462,"title":{},"body":{"controllers/PostsController.html":{},"guards/RateLimiterGuard.html":{}}}],["limiter.decorator.ts",{"_index":1566,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["limiter.guard",{"_index":1574,"title":{},"body":{"interfaces/RateLimitOptions.html":{}}}],["limiter.guard.ts",{"_index":1585,"title":{},"body":{"guards/RateLimiterGuard.html":{},"coverage.html":{}}}],["limiter.guard.ts:106",{"_index":1592,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["limiter.guard.ts:78",{"_index":1591,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["limits",{"_index":1011,"title":{},"body":{"modules/CommonModule.html":{}}}],["line",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"classes/BasePaginationDto.html":{}}}],["literal",{"_index":1189,"title":{},"body":{"injectables/GoogleStrategy.html":{},"interfaces/SavePayload.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1601,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["logger",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogInterceptor.html":{}}}],["logger(loginterceptor.name",{"_index":1316,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["logging",{"_index":264,"title":{},"body":{"modules/AppModule.html":{}}}],["login.dto",{"_index":1712,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["login/email",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":328,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["logindto:19",{"_index":1710,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["logindto:29",{"_index":1711,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["logindto})@apioperation({summary",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginterceptor",{"_index":183,"title":{"injectables/LogInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogInterceptor.html":{},"coverage.html":{}}}],["loginuser",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser(user",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginwithemail",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginwithemail(logindto",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["logmiddleware",{"_index":161,"title":{"injectables/LogMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogMiddleware.html":{},"coverage.html":{}}}],["logoutredirecturi",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["logouturl",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["lts.1",{"_index":1995,"title":{},"body":{"dependencies.html":{}}}],["lua",{"_index":1587,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["manager",{"_index":1976,"title":{},"body":{"dependencies.html":{}}}],["many",{"_index":791,"title":{},"body":{"entities/ChatsModel.html":{},"entities/CommentsModel.html":{}}}],["manytomany",{"_index":796,"title":{},"body":{"entities/ChatsModel.html":{},"entities/UsersModel.html":{}}}],["manytomany(undefined",{"_index":792,"title":{},"body":{"entities/ChatsModel.html":{},"entities/UsersModel.html":{}}}],["manytoone",{"_index":914,"title":{},"body":{"entities/CommentsModel.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"entities/UserFollowersModel.html":{}}}],["manytoone(undefined",{"_index":901,"title":{},"body":{"entities/CommentsModel.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"entities/UserFollowersModel.html":{}}}],["mapper.const",{"_index":1057,"title":{},"body":{"injectables/CommonService.html":{}}}],["mapper.const.ts",{"_index":1923,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapper.ts",{"_index":1951,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["match",{"_index":1690,"title":{},"body":{"injectables/RedisService.html":{}}}],["matched",{"_index":1697,"title":{},"body":{"injectables/RedisService.html":{}}}],["matched.length",{"_index":1701,"title":{},"body":{"injectables/RedisService.html":{}}}],["matching",{"_index":105,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(date.now",{"_index":1639,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["math.min(max_tokens",{"_index":1619,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["max",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["max_tokens",{"_index":1603,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["maximum",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["maximumcomplexity",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["maxlengthpipe",{"_index":1356,"title":{"injectables/MaxLengthPipe.html":{}},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"coverage.html":{}}}],["maxqueryexecutiontime",{"_index":271,"title":{},"body":{"modules/AppModule.html":{}}}],["memberof",{"_index":1882,"title":{},"body":{"entities/UsersModel.html":{}}}],["message",{"_index":723,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"classes/CreateMessagesDto.html":{},"classes/HttpExceptionFilter.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"interfaces/SavePayload.html":{},"classes/UpdatePostDto.html":{},"entities/UsersModel.html":{}}}],["message.author",{"_index":1858,"title":{},"body":{"entities/UsersModel.html":{}}}],["message.chat",{"_index":742,"title":{},"body":{"classes/ChatsGateway.html":{},"entities/ChatsModel.html":{}}}],["message.chat.id",{"_index":743,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["message.id",{"_index":780,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["message.message",{"_index":745,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["message.whispertargetuser",{"_index":1871,"title":{},"body":{"entities/UsersModel.html":{}}}],["message/email",{"_index":1876,"title":{},"body":{"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["message/length",{"_index":1877,"title":{},"body":{"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["message/string",{"_index":1527,"title":{},"body":{"entities/PostsModel.html":{},"classes/UpdatePostDto.html":{},"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["messagebody",{"_index":668,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["messages",{"_index":784,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"entities/MessagesModel.html":{},"interfaces/SavePayload.html":{},"entities/UsersModel.html":{}}}],["messages.dto",{"_index":684,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["messages.dto.ts",{"_index":1129,"title":{},"body":{"classes/CreateMessagesDto.html":{},"coverage.html":{}}}],["messages.dto.ts:18",{"_index":1132,"title":{},"body":{"classes/CreateMessagesDto.html":{}}}],["messages.dto.ts:26",{"_index":1131,"title":{},"body":{"classes/CreateMessagesDto.html":{}}}],["messages.service",{"_index":1379,"title":{},"body":{"controllers/MessagesController.html":{}}}],["messages/dto/create",{"_index":683,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["messages/entity/messages.entity",{"_index":686,"title":{},"body":{"classes/ChatsGateway.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{}}}],["messages/messages.controller",{"_index":807,"title":{},"body":{"modules/ChatsModule.html":{}}}],["messages/messages.service",{"_index":685,"title":{},"body":{"classes/ChatsGateway.html":{},"modules/ChatsModule.html":{}}}],["messagescontroller",{"_index":802,"title":{"controllers/MessagesController.html":{}},"body":{"modules/ChatsModule.html":{},"controllers/MessagesController.html":{},"coverage.html":{}}}],["messagesmodel",{"_index":166,"title":{"entities/MessagesModel.html":{}},"body":{"modules/AppModule.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"classes/CreateMessagesDto.html":{},"entities/MessagesModel.html":{},"interfaces/SavePayload.html":{},"entities/UsersModel.html":{},"coverage.html":{}}}],["messagesrepository",{"_index":758,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["messagesservice",{"_index":642,"title":{},"body":{"classes/ChatsGateway.html":{},"controllers/MessagesController.html":{}}}],["metadata",{"_index":1363,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"dependencies.html":{}}}],["method",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"injectables/LogInterceptor.html":{}}}],["method:path",{"_index":1595,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["methods",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"classes/WsErrorFilter.html":{}}}],["middleware/post",{"_index":926,"title":{},"body":{"modules/CommentsModule.html":{}}}],["middlewareconsumer",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{}}}],["mine",{"_index":873,"title":{},"body":{"controllers/CommentsController.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["minlengthpipe",{"_index":1373,"title":{"injectables/MinLengthPipe.html":{}},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"coverage.html":{}}}],["miscellaneous",{"_index":2009,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mkdirsync",{"_index":1003,"title":{},"body":{"modules/CommonModule.html":{}}}],["mkdirsync(temp_folder_path",{"_index":1009,"title":{},"body":{"modules/CommonModule.html":{}}}],["module",{"_index":113,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":115,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["more_than",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more_than_or_equal",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["morethan",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["morethanorequal",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multer",{"_index":999,"title":{},"body":{"modules/CommonModule.html":{},"dependencies.html":{}}}],["multer.diskstorage",{"_index":1026,"title":{},"body":{"modules/CommonModule.html":{}}}],["multermodule",{"_index":997,"title":{},"body":{"modules/CommonModule.html":{}}}],["multermodule.register",{"_index":1010,"title":{},"body":{"modules/CommonModule.html":{}}}],["name",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"classes/WsErrorFilter.html":{}}}],["namespace",{"_index":688,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["namespaceset",{"_index":1686,"title":{},"body":{"injectables/RedisService.html":{}}}],["nestinterceptor",{"_index":1318,"title":{},"body":{"injectables/LogInterceptor.html":{},"injectables/TransactionInterceptor.html":{}}}],["nestjs",{"_index":1746,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["nestjs/apollo",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":30,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"modules/PostsModule.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":36,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/BearerTokenGuard.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":44,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"classes/BaseModel.html":{},"guards/BearerTokenGuard.html":{},"injectables/LogInterceptor.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"entities/UsersModel.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":433,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1125,"title":{},"body":{"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1181,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":986,"title":{},"body":{"controllers/CommonController.html":{},"modules/CommonModule.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentsDto.html":{},"classes/CreatePostDto.html":{},"classes/LoginDto.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"classes/RegisterUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"injectables/ChatsMessagesService.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/PostsImagesService.html":{},"modules/PostsModule.html":{},"interfaces/SavePayload.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":672,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{},"classes/WsErrorFilter.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1346,"title":{},"body":{"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{}}}],["nestmodule",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{}}}],["new",{"_index":70,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/CommentsService.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/PostsImagesService.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["new_tokens",{"_index":1618,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["newcomment",{"_index":971,"title":{},"body":{"injectables/CommentsService.html":{}}}],["newpath",{"_index":1499,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["newtoken",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"classes/BasePaginationDto.html":{},"injectables/CommonService.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/TransactionInterceptor.html":{}}}],["next.handle().pipe",{"_index":1333,"title":{},"body":{"injectables/LogInterceptor.html":{},"injectables/TransactionInterceptor.html":{}}}],["nextfunction",{"_index":1344,"title":{},"body":{"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{}}}],["nexturl",{"_index":1076,"title":{},"body":{"injectables/CommonService.html":{}}}],["nexturl.searchparams.append(key",{"_index":1080,"title":{},"body":{"injectables/CommonService.html":{}}}],["nexturl?.tostring",{"_index":1085,"title":{},"body":{"injectables/CommonService.html":{}}}],["nickname",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{},"injectables/KakaoStrategy.html":{},"interfaces/ProviderData.html":{},"classes/RegisterUserDto.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["node_env",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["not(userid",{"_index":1470,"title":{},"body":{"controllers/PostsController.html":{}}}],["not(value",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["now",{"_index":1321,"title":{},"body":{"injectables/LogInterceptor.html":{},"guards/RateLimiterGuard.html":{}}}],["now.getmilliseconds()}ms",{"_index":1340,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["now.tolocalestring('kr",{"_index":1332,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["null",{"_index":729,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/CommonService.html":{},"entities/ImageModel.html":{},"injectables/KakaoStrategy.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"interfaces/SavePayload.html":{},"entities/UsersModel.html":{}}}],["nullable",{"_index":1507,"title":{},"body":{"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"entities/UsersModel.html":{}}}],["number",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"classes/CreateChatDto.html":{},"classes/CreateMessagesDto.html":{},"classes/EnterChatDto.html":{},"entities/ImageModel.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"interfaces/RateLimitOptions.html":{},"injectables/RedisService.html":{},"interfaces/SavePayload.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["oauth",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"interfaces/ProviderData.html":{},"entities/UsersModel.html":{}}}],["oauth20",{"_index":1197,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":1266,"title":{},"body":{"entities/ImageModel.html":{}}}],["object",{"_index":72,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/CommonService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RefreshTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["object.entries(plaindto",{"_index":1091,"title":{},"body":{"injectables/CommonService.html":{}}}],["object.keys(dto",{"_index":1078,"title":{},"body":{"injectables/CommonService.html":{}}}],["objecttype",{"_index":564,"title":{},"body":{"classes/BaseModel.html":{},"entities/PostsModel.html":{},"entities/UsersModel.html":{}}}],["observable",{"_index":1315,"title":{},"body":{"injectables/LogInterceptor.html":{},"injectables/TransactionInterceptor.html":{}}}],["offline",{"_index":1208,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["oncomplete",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["one",{"_index":790,"title":{},"body":{"entities/ChatsModel.html":{},"entities/CommentsModel.html":{}}}],["onetomany",{"_index":797,"title":{},"body":{"entities/ChatsModel.html":{},"entities/PostsModel.html":{},"entities/UsersModel.html":{}}}],["onetomany(undefined",{"_index":788,"title":{},"body":{"entities/ChatsModel.html":{},"entities/PostsModel.html":{},"entities/UsersModel.html":{}}}],["ongatewayconnection",{"_index":631,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["ongatewaydisconnect",{"_index":633,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["ongatewayinit",{"_index":632,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["operationkey",{"_index":1630,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["operator",{"_index":1102,"title":{},"body":{"injectables/CommonService.html":{}}}],["optional",{"_index":24,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{},"classes/WsErrorFilter.html":{}}}],["options",{"_index":1096,"title":{},"body":{"injectables/CommonService.html":{},"interfaces/RateLimitOptions.html":{},"miscellaneous/variables.html":{}}}],["options.capacity",{"_index":1577,"title":{},"body":{"interfaces/RateLimitOptions.html":{}}}],["options.const",{"_index":960,"title":{},"body":{"injectables/CommentsService.html":{}}}],["options.const.ts",{"_index":1939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["options.refillrate",{"_index":1578,"title":{},"body":{"interfaces/RateLimitOptions.html":{}}}],["options[field",{"_index":1101,"title":{},"body":{"injectables/CommonService.html":{}}}],["order",{"_index":1086,"title":{},"body":{"injectables/CommonService.html":{},"classes/CreatePostImageDto.html":{},"entities/ImageModel.html":{}}}],["order__createdat",{"_index":572,"title":{},"body":{"classes/BasePaginationDto.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["originalurl",{"_index":1330,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["out",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["overridefindoptions",{"_index":763,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"injectables/CommonService.html":{},"interfaces/SavePayload.html":{}}}],["overview",{"_index":2023,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1961,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":573,"title":{},"body":{"classes/BasePaginationDto.html":{},"injectables/CommonService.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["pagepaginate",{"_index":1033,"title":{},"body":{"injectables/CommonService.html":{}}}],["pagepaginate(dto",{"_index":1046,"title":{},"body":{"injectables/CommonService.html":{}}}],["paginate",{"_index":1034,"title":{},"body":{"injectables/CommonService.html":{},"controllers/PostsController.html":{}}}],["paginate(dto",{"_index":1048,"title":{},"body":{"injectables/CommonService.html":{}}}],["paginatechat",{"_index":615,"title":{},"body":{"controllers/ChatsController.html":{}}}],["paginatechat(dto",{"_index":616,"title":{},"body":{"controllers/ChatsController.html":{}}}],["paginatechatdto",{"_index":617,"title":{"classes/PaginateChatDto.html":{}},"body":{"controllers/ChatsController.html":{},"injectables/ChatsService.html":{},"classes/PaginateChatDto.html":{},"coverage.html":{}}}],["paginatechats",{"_index":812,"title":{},"body":{"injectables/ChatsService.html":{}}}],["paginatechats(dto",{"_index":820,"title":{},"body":{"injectables/ChatsService.html":{}}}],["paginatecomments",{"_index":936,"title":{},"body":{"injectables/CommentsService.html":{}}}],["paginatecomments(dto",{"_index":952,"title":{},"body":{"injectables/CommentsService.html":{}}}],["paginatecommentsdto",{"_index":851,"title":{"classes/PaginateCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/PaginateCommentsDto.html":{},"coverage.html":{}}}],["paginatemessage",{"_index":1376,"title":{},"body":{"controllers/MessagesController.html":{}}}],["paginatemessage(id",{"_index":1377,"title":{},"body":{"controllers/MessagesController.html":{}}}],["paginatemessages",{"_index":753,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["paginatemessages(dto",{"_index":762,"title":{},"body":{"injectables/ChatsMessagesService.html":{}}}],["paginatepostdto",{"_index":1402,"title":{"classes/PaginatePostDto.html":{}},"body":{"classes/PaginatePostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["pagination.dto",{"_index":769,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"injectables/CommonService.html":{},"controllers/MessagesController.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"interfaces/SavePayload.html":{}}}],["pagination.dto.ts",{"_index":571,"title":{},"body":{"classes/BasePaginationDto.html":{},"coverage.html":{}}}],["pagination.dto.ts:14",{"_index":585,"title":{},"body":{"classes/BasePaginationDto.html":{}}}],["pagination.dto.ts:22",{"_index":588,"title":{},"body":{"classes/BasePaginationDto.html":{}}}],["pagination.dto.ts:31",{"_index":589,"title":{},"body":{"classes/BasePaginationDto.html":{}}}],["pagination.dto.ts:41",{"_index":583,"title":{},"body":{"classes/BasePaginationDto.html":{}}}],["pagination.dto.ts:49",{"_index":587,"title":{},"body":{"classes/BasePaginationDto.html":{}}}],["param",{"_index":56,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"classes/PostsResolver.html":{},"interfaces/RateLimitOptions.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"classes/WsErrorFilter.html":{}}}],["param('cid",{"_index":1381,"title":{},"body":{"controllers/MessagesController.html":{}}}],["param('commentid",{"_index":887,"title":{},"body":{"controllers/CommentsController.html":{}}}],["param('id",{"_index":1820,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('postid",{"_index":884,"title":{},"body":{"controllers/CommentsController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"classes/WsErrorFilter.html":{}}}],["parseboolpipe",{"_index":1810,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseint(commentid",{"_index":1283,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{}}}],["parseint(postid",{"_index":1297,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{}}}],["parseint(this.config.encrypt.hash_rounds",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["parseintpipe",{"_index":863,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parsewherefilter",{"_index":1035,"title":{},"body":{"injectables/CommonService.html":{}}}],["parsewherefilter(key",{"_index":1050,"title":{},"body":{"injectables/CommonService.html":{}}}],["part",{"_index":1692,"title":{},"body":{"injectables/RedisService.html":{}}}],["partialtype",{"_index":1767,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["partialtype(createpostdto",{"_index":1763,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["passok",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1176,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":1195,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1184,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["password",{"_index":255,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"classes/LoginDto.html":{},"modules/RedisModule.html":{},"classes/RegisterUserDto.html":{},"entities/UsersModel.html":{}}}],["passwordpipe",{"_index":1368,"title":{"injectables/PasswordPipe.html":{}},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"coverage.html":{}}}],["patch",{"_index":864,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':commentid",{"_index":893,"title":{},"body":{"controllers/CommentsController.html":{}}}],["patch(':commentid')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":855,"title":{},"body":{"controllers/CommentsController.html":{}}}],["patch(':postid')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1447,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('follow/:id/confirm",{"_index":1827,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('follow/:id/confirm')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1804,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchcomment",{"_index":837,"title":{},"body":{"controllers/CommentsController.html":{}}}],["patchcomment(postid",{"_index":853,"title":{},"body":{"controllers/CommentsController.html":{}}}],["patchfollowconfirm",{"_index":1785,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchfollowconfirm(userid",{"_index":1802,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchpost",{"_index":1428,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpost(id",{"_index":1445,"title":{},"body":{"controllers/PostsController.html":{}}}],["path",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreatePostImageDto.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"injectables/PostsImagesService.html":{}}}],["pattern",{"_index":1673,"title":{},"body":{"injectables/RedisService.html":{}}}],["payload",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["payload.tokentype",{"_index":1735,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["pg",{"_index":1999,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["picktype",{"_index":1124,"title":{},"body":{"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{}}}],["picktype(commentsmodel",{"_index":1121,"title":{},"body":{"classes/CreateCommentsDto.html":{}}}],["picktype(imagemodel",{"_index":1150,"title":{},"body":{"classes/CreatePostImageDto.html":{}}}],["picktype(messagesmodel",{"_index":1130,"title":{},"body":{"classes/CreateMessagesDto.html":{}}}],["picktype(postsmodel",{"_index":1136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pipetransform",{"_index":1366,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["plain",{"_index":1088,"title":{},"body":{"injectables/CommonService.html":{}}}],["plaindto",{"_index":1089,"title":{},"body":{"injectables/CommonService.html":{}}}],["playground",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["png",{"_index":1022,"title":{},"body":{"modules/CommonModule.html":{}}}],["port",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{}}}],["post",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"classes/CreatePostImageDto.html":{},"entities/ImageModel.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["post('follow/:id",{"_index":1819,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('follow/:id')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1807,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('image",{"_index":988,"title":{},"body":{"controllers/CommonController.html":{}}}],["post('image')@useinterceptors(undefined",{"_index":980,"title":{},"body":{"controllers/CommonController.html":{}}}],["post('login/email",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login/email')@apiconsumes('application/x",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('random",{"_index":1471,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('random')@apibearerauth(authscheme.access)@apioperation({summary",{"_index":1453,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('register/email",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register/email')@apiconsumes('application/x",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/access",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/access')@apibearerauth(authscheme.refresh)@apioperation({summary",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/refresh",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/refresh')@apibearerauth(authscheme.refresh)@apioperation({summary",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth(authscheme.access)@apioperation({summary",{"_index":859,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["post.author",{"_index":1511,"title":{},"body":{"entities/PostsModel.html":{},"entities/UsersModel.html":{}}}],["post.comments",{"_index":909,"title":{},"body":{"entities/CommentsModel.html":{}}}],["post.dto",{"_index":1455,"title":{},"body":{"controllers/PostsController.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":1135,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:16",{"_index":1145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:18",{"_index":1411,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["post.dto.ts:23",{"_index":1140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts:27",{"_index":1412,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["post.dto.ts:35",{"_index":1766,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:36",{"_index":1144,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginatePostDto.html":{}}}],["post.dto.ts:45",{"_index":1409,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["post.images",{"_index":1253,"title":{},"body":{"entities/ImageModel.html":{}}}],["post_image",{"_index":1251,"title":{},"body":{"entities/ImageModel.html":{},"miscellaneous/enumerations.html":{}}}],["post_image_path",{"_index":1486,"title":{},"body":{"injectables/PostsImagesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["post_public_image_path",{"_index":1252,"title":{},"body":{"entities/ImageModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postcomment",{"_index":838,"title":{},"body":{"controllers/CommentsController.html":{}}}],["postcomment(postid",{"_index":857,"title":{},"body":{"controllers/CommentsController.html":{}}}],["postexistsmiddleware",{"_index":925,"title":{"injectables/PostExistsMiddleware.html":{}},"body":{"modules/CommentsModule.html":{},"injectables/PostExistsMiddleware.html":{},"coverage.html":{}}}],["postfactory",{"_index":1165,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["postfactory.savemany(500_000",{"_index":1167,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["postfollow",{"_index":1786,"title":{},"body":{"controllers/UsersController.html":{}}}],["postfollow(userid",{"_index":1806,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["postid",{"_index":846,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/PostExistsMiddleware.html":{}}}],["postimage",{"_index":977,"title":{},"body":{"controllers/CommonController.html":{}}}],["postimage(file",{"_index":978,"title":{},"body":{"controllers/CommonController.html":{}}}],["postloginemail",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["postloginemail(@body",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["postloginemail(logindto",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["postposts",{"_index":1429,"title":{},"body":{"controllers/PostsController.html":{}}}],["postposts(userid",{"_index":1449,"title":{},"body":{"controllers/PostsController.html":{}}}],["postpostsrandom",{"_index":1430,"title":{},"body":{"controllers/PostsController.html":{}}}],["postpostsrandom(userid",{"_index":1452,"title":{},"body":{"controllers/PostsController.html":{}}}],["postregisteremail",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["postregisteremail(body",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["posts",{"_index":1423,"title":{},"body":{"controllers/PostsController.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["posts.controller",{"_index":1539,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.module",{"_index":928,"title":{},"body":{"modules/CommentsModule.html":{}}}],["posts.seeder.ts",{"_index":1154,"title":{},"body":{"classes/CreatePostsSeeder.html":{},"coverage.html":{}}}],["posts.seeder.ts:17",{"_index":1161,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["posts.service",{"_index":881,"title":{},"body":{"controllers/CommentsController.html":{},"guards/IsPostMineOrAdminGuard.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{}}}],["posts/${postid}/comments",{"_index":963,"title":{},"body":{"injectables/CommentsService.html":{}}}],["posts/${userid",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["posts/:postid/comments",{"_index":832,"title":{},"body":{"controllers/CommentsController.html":{}}}],["posts/comments/comments.module",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/comments/entity/comments.entity",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/entity/posts.entity",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostsSeeder.html":{}}}],["posts/posts.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["posts_folder_name",{"_index":1926,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":1421,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":883,"title":{},"body":{"controllers/CommentsController.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/PostExistsMiddleware.html":{}}}],["postsimagesservice",{"_index":1456,"title":{"injectables/PostsImagesService.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"modules/PostsModule.html":{},"coverage.html":{},"index.html":{}}}],["postsmodel",{"_index":142,"title":{"entities/PostsModel.html":{}},"body":{"modules/AppModule.html":{},"entities/CommentsModel.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostsSeeder.html":{},"entities/ImageModel.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"entities/UsersModel.html":{},"coverage.html":{}}}],["postsmodule",{"_index":129,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/PostsModule.html":{},"index.html":{},"modules.html":{}}}],["postsresolver",{"_index":1540,"title":{"classes/PostsResolver.html":{}},"body":{"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["postsresult",{"_index":1948,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["postsservice",{"_index":880,"title":{},"body":{"controllers/CommentsController.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"coverage.html":{},"index.html":{}}}],["posttokenaccess",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["posttokenaccess(req",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["posttokenrefresh",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["posttokenrefresh(req",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/CommonController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["prevcomment",{"_index":969,"title":{},"body":{"injectables/CommentsService.html":{}}}],["primary",{"_index":559,"title":{},"body":{"classes/BaseModel.html":{}}}],["primarygeneratedcolumn",{"_index":566,"title":{},"body":{"classes/BaseModel.html":{}}}],["private",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{}}}],["process.cwd",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["profile",{"_index":1191,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["project_root_path",{"_index":1927,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":27,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{}}}],["promises",{"_index":1489,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["promises.access(tempfilepath",{"_index":1496,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["promises.rename(tempfilepath",{"_index":1502,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["prompt",{"_index":1209,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["properties",{"_index":551,"title":{"properties.html":{}},"body":{"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"classes/ChatsGateway.html":{},"entities/ChatsModel.html":{},"entities/CommentsModel.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/EnterChatDto.html":{},"entities/ImageModel.html":{},"injectables/LogInterceptor.html":{},"classes/LoginDto.html":{},"entities/MessagesModel.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"entities/PostsModel.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"classes/RegisterUserDto.html":{},"interfaces/SavePayload.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{},"properties.html":{}}}],["property",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protected",{"_index":54,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["protocol",{"_index":1073,"title":{},"body":{"injectables/CommonService.html":{}}}],["provide",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{}}}],["provider.enum",{"_index":1564,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["provider.enum.ts",{"_index":2012,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["providerdata",{"_index":1550,"title":{"interfaces/ProviderData.html":{}},"body":{"interfaces/ProviderData.html":{},"coverage.html":{}}}],["providerid",{"_index":1558,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["providerkey",{"_index":1560,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostsSeeder.html":{},"miscellaneous/variables.html":{}}}],["public.const",{"_index":42,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenGuard.html":{}}}],["public.const.ts",{"_index":2016,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["public.decorator",{"_index":39,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenGuard.html":{}}}],["public.decorator.ts",{"_index":1930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["public_folder_name",{"_index":1928,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["public_folder_path",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["qr",{"_index":841,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{}}}],["qr.committransaction",{"_index":1758,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["qr.connect",{"_index":1752,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["qr.manager.getrepository(commentsmodel",{"_index":966,"title":{},"body":{"injectables/CommentsService.html":{}}}],["qr.manager.getrepository(imagemodel",{"_index":1492,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["qr.release",{"_index":1755,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["qr.rollbacktransaction",{"_index":1754,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["qr.starttransaction",{"_index":1753,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["query",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["query('includenotconfirmed",{"_index":1816,"title":{},"body":{"controllers/UsersController.html":{}}}],["query(undefined",{"_index":1545,"title":{},"body":{"classes/PostsResolver.html":{}}}],["query.isonlyfollowingposts",{"_index":1467,"title":{},"body":{"controllers/PostsController.html":{}}}],["query:getuser",{"_index":1631,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["queryrunner",{"_index":842,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["queryrunnerdecorator",{"_index":877,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["r",{"_index":1045,"title":{},"body":{"injectables/CommonService.html":{}}}],["rate_limit:${identifier}:${operationkey",{"_index":1635,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["rate_limiter_key",{"_index":1575,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rate_limiter_options",{"_index":1576,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"miscellaneous/variables.html":{}}}],["ratelimit",{"_index":1636,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["ratelimiter",{"_index":1460,"title":{},"body":{"controllers/PostsController.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ratelimiterguard",{"_index":1572,"title":{"guards/RateLimiterGuard.html":{}},"body":{"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"coverage.html":{}}}],["ratelimitoptions",{"_index":1565,"title":{"interfaces/RateLimitOptions.html":{}},"body":{"interfaces/RateLimitOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rawtoken",{"_index":74,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"injectables/GoogleStrategy.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{}}}],["recursive",{"_index":1007,"title":{},"body":{"modules/CommonModule.html":{}}}],["redis",{"_index":1586,"title":{},"body":{"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["redis.call(\"exists",{"_index":1612,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["redis.constants",{"_index":1653,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{}}}],["redis.service",{"_index":1651,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis/redis.module",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_keys_mapper",{"_index":1952,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["redismodule",{"_index":130,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"index.html":{},"modules.html":{}}}],["redisservice",{"_index":1645,"title":{"injectables/RedisService.html":{}},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"coverage.html":{},"index.html":{}}}],["redistype",{"_index":1648,"title":{},"body":{"modules/RedisModule.html":{}}}],["refill_rate",{"_index":1605,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["refillrate",{"_index":1568,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{}}}],["reflect",{"_index":2001,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":35,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":101,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"miscellaneous/enumerations.html":{}}}],["refreshtoken",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["refreshtokenguard",{"_index":102,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["registerenumtype",{"_index":1880,"title":{},"body":{"entities/UsersModel.html":{}}}],["registerenumtype(roleenum",{"_index":1881,"title":{},"body":{"entities/UsersModel.html":{}}}],["registeruserdto",{"_index":340,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["registeruserdto})@apioperation({summary",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerwithemail",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerwithemail(user",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["relationid",{"_index":1530,"title":{},"body":{"entities/PostsModel.html":{}}}],["relationid((post",{"_index":1533,"title":{},"body":{"entities/PostsModel.html":{}}}],["relations",{"_index":781,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"controllers/MessagesController.html":{},"interfaces/SavePayload.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":755,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"injectables/PostsImagesService.html":{},"interfaces/SavePayload.html":{}}}],["repository.delete(commentid",{"_index":972,"title":{},"body":{"injectables/CommentsService.html":{}}}],["repository.find",{"_index":1066,"title":{},"body":{"injectables/CommonService.html":{}}}],["repository.findandcount",{"_index":1064,"title":{},"body":{"injectables/CommonService.html":{}}}],["repository.findone",{"_index":965,"title":{},"body":{"injectables/CommentsService.html":{}}}],["repository.preload",{"_index":970,"title":{},"body":{"injectables/CommentsService.html":{}}}],["repository.save",{"_index":967,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostsImagesService.html":{}}}],["req",{"_index":66,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"modules/CommonModule.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["req.headers",{"_index":76,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.headers['authorization",{"_index":75,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.ip",{"_index":1328,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["req.method",{"_index":1348,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["req.method}:${req.route?.path",{"_index":1633,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["req.params.commentid",{"_index":1280,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{}}}],["req.params.postid",{"_index":1294,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{},"injectables/PostExistsMiddleware.html":{}}}],["req.path",{"_index":1634,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["req.queryrunner",{"_index":1740,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["req.token",{"_index":89,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.tokentype",{"_index":90,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.url",{"_index":1349,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["req.user",{"_index":88,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["req.user?.id",{"_index":1627,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["request",{"_index":99,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":1244,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["requested",{"_index":1607,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["requestinfo",{"_index":1325,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["requestmethod.all",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["required",{"_index":1141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["requiredrole",{"_index":1721,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"modules/CommonModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{}}}],["res.redirect(logouturl",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.send",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["resolver",{"_index":1547,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resolver/posts.resolver",{"_index":1541,"title":{},"body":{"modules/PostsModule.html":{}}}],["resp",{"_index":889,"title":{},"body":{"controllers/CommentsController.html":{}}}],["response",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{}}}],["response.status(status).json",{"_index":1239,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["rest",{"_index":1594,"title":{},"body":{"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"guards/RolesGuard.html":{}}}],["rest.startswith(pattern",{"_index":1700,"title":{},"body":{"injectables/RedisService.html":{}}}],["restapikey",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["restrictedendpoint",{"_index":1580,"title":{},"body":{"interfaces/RateLimitOptions.html":{}}}],["result",{"_index":79,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/PostsImagesService.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["result.type",{"_index":87,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["results",{"_index":104,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.length",{"_index":1070,"title":{},"body":{"injectables/CommonService.html":{}}}],["results[results.length",{"_index":1072,"title":{},"body":{"injectables/CommonService.html":{}}}],["return",{"_index":62,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/LogInterceptor.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":26,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"classes/WsErrorFilter.html":{}}}],["role",{"_index":1714,"title":{},"body":{"guards/RolesGuard.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["roleenum",{"_index":1276,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roleenum.admin",{"_index":1279,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{}}}],["roleenum.user",{"_index":1886,"title":{},"body":{"entities/UsersModel.html":{}}}],["roles",{"_index":1458,"title":{},"body":{"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(roleenum.admin",{"_index":1433,"title":{},"body":{"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["roles_key",{"_index":1719,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":171,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rollback",{"_index":1501,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["room",{"_index":749,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["rootpath",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["rotatetoken",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["rotatetoken(token",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["route",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["rrefreshtoken",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":1156,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["run(datasource",{"_index":1157,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["runner.decorator",{"_index":879,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["runner.decorator.ts",{"_index":1931,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":1320,"title":{},"body":{"injectables/LogInterceptor.html":{},"injectables/TransactionInterceptor.html":{},"dependencies.html":{}}}],["save",{"_index":1500,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["savepayload",{"_index":771,"title":{"interfaces/SavePayload.html":{}},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{},"coverage.html":{}}}],["savepayload.chat",{"_index":776,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["savepayload.whispertargetuser",{"_index":777,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["schema.const",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["schema.const.ts",{"_index":2013,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scope",{"_index":1206,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["script",{"_index":1589,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["seconds",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["securepassword123",{"_index":1354,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["seeder",{"_index":1155,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["seederfactorymanager",{"_index":1160,"title":{},"body":{"classes/CreatePostsSeeder.html":{}}}],["select",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select_account",{"_index":1210,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["sendmessage",{"_index":640,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["sendmessage(dto",{"_index":663,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["sensitiveendpoint",{"_index":1581,"title":{},"body":{"interfaces/RateLimitOptions.html":{}}}],["sensitiveoperation",{"_index":1588,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["server",{"_index":634,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["serveroot",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":1665,"title":{},"body":{"injectables/RedisService.html":{}}}],["set(key",{"_index":1676,"title":{},"body":{"injectables/RedisService.html":{}}}],["setmetadata",{"_index":1571,"title":{},"body":{"interfaces/RateLimitOptions.html":{}}}],["setmetadata(is_public_key",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(rate_limiter_key",{"_index":1582,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signtoken",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["signtoken(user",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["simple",{"_index":270,"title":{},"body":{"modules/AppModule.html":{}}}],["simpleestimator",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":1087,"title":{},"body":{"injectables/CommonService.html":{}}}],["socket",{"_index":651,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{},"classes/WsErrorFilter.html":{}}}],["socket.disconnect",{"_index":708,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["socket.emit",{"_index":1898,"title":{},"body":{"classes/WsErrorFilter.html":{}}}],["socket.emit('receive_whisper",{"_index":748,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["socket.handshake.headers",{"_index":705,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["socket.id",{"_index":702,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["socket.io",{"_index":673,"title":{},"body":{"classes/ChatsGateway.html":{},"dependencies.html":{}}}],["socket.join(data.chatids.map((x",{"_index":724,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["socket.join(user.id.tostring",{"_index":712,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["socket.to(message.chat.id.tostring()).emit('receive_message",{"_index":744,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["socket.token",{"_index":1733,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["socket.tokentype",{"_index":1734,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["socket.user",{"_index":711,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["socket.user.id",{"_index":740,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["socketbearertokenguard",{"_index":1725,"title":{"guards/SocketBearerTokenGuard.html":{}},"body":{"guards/SocketBearerTokenGuard.html":{},"coverage.html":{}}}],["sortschema",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"modules/ChatsModule.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"classes/WsErrorFilter.html":{}}}],["split",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommonService.html":{},"injectables/RedisService.html":{}}}],["split.length",{"_index":1098,"title":{},"body":{"injectables/CommonService.html":{}}}],["split[0",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["split[1",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["splittoken",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["splittoken[0",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["splittoken[1",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/.../auth",{"_index":2011,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../default",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email",{"_index":2040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../filter",{"_index":2041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../image.entity.ts",{"_index":2014,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../is",{"_index":2015,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../length",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../path.const.ts",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../posts.service.ts",{"_index":2037,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../query",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rate",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.constants.ts",{"_index":2042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.keys",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../string",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.entity.ts",{"_index":2017,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":284,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":286,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:101",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:118",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:130",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:142",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:152",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:165",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:176",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:191",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:72",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":808,"title":{},"body":{"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{}}}],["src/auth/auth.module.ts",{"_index":430,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":687,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["src/auth/auth.service.ts",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:102",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:120",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:170",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:189",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:202",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:229",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:240",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:78",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1350,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:19",{"_index":1353,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:29",{"_index":1355,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register",{"_index":1706,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/guard/basic",{"_index":598,"title":{},"body":{"guards/BasicTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/bearer",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/google",{"_index":1174,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/kakao",{"_index":1298,"title":{},"body":{"injectables/KakaoAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/socket/socket",{"_index":1726,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{},"coverage.html":{}}}],["src/auth/pipe/password.pipe.ts",{"_index":1357,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"coverage.html":{}}}],["src/auth/pipe/password.pipe.ts:20",{"_index":1414,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["src/auth/pipe/password.pipe.ts:35",{"_index":1360,"title":{},"body":{"injectables/MaxLengthPipe.html":{}}}],["src/auth/pipe/password.pipe.ts:54",{"_index":1365,"title":{},"body":{"injectables/MaxLengthPipe.html":{}}}],["src/auth/pipe/password.pipe.ts:69",{"_index":1392,"title":{},"body":{"injectables/MinLengthPipe.html":{}}}],["src/auth/pipe/password.pipe.ts:88",{"_index":1393,"title":{},"body":{"injectables/MinLengthPipe.html":{}}}],["src/auth/strategies/google.strategy.ts",{"_index":1183,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts:13",{"_index":1187,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:31",{"_index":1188,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:45",{"_index":1194,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/kakao.strategy.ts",{"_index":1301,"title":{},"body":{"injectables/KakaoStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/kakao.strategy.ts:13",{"_index":1302,"title":{},"body":{"injectables/KakaoStrategy.html":{}}}],["src/auth/strategies/kakao.strategy.ts:33",{"_index":1303,"title":{},"body":{"injectables/KakaoStrategy.html":{}}}],["src/chats/chats.controller.ts",{"_index":613,"title":{},"body":{"controllers/ChatsController.html":{},"coverage.html":{}}}],["src/chats/chats.controller.ts:26",{"_index":620,"title":{},"body":{"controllers/ChatsController.html":{}}}],["src/chats/chats.gateway.ts",{"_index":629,"title":{},"body":{"classes/ChatsGateway.html":{},"coverage.html":{}}}],["src/chats/chats.gateway.ts:128",{"_index":653,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/chats/chats.gateway.ts:148",{"_index":658,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/chats/chats.gateway.ts:180",{"_index":666,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/chats/chats.gateway.ts:38",{"_index":644,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/chats/chats.gateway.ts:58",{"_index":646,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/chats/chats.gateway.ts:65",{"_index":648,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/chats/chats.gateway.ts:74",{"_index":662,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/chats/chats.gateway.ts:87",{"_index":660,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["src/chats/chats.module.ts",{"_index":801,"title":{},"body":{"modules/ChatsModule.html":{}}}],["src/chats/chats.service.ts",{"_index":810,"title":{},"body":{"injectables/ChatsService.html":{},"coverage.html":{}}}],["src/chats/chats.service.ts:14",{"_index":814,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/chats/chats.service.ts:26",{"_index":821,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/chats/chats.service.ts:43",{"_index":819,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/chats/chats.service.ts:60",{"_index":817,"title":{},"body":{"injectables/ChatsService.html":{}}}],["src/chats/dto/create",{"_index":1112,"title":{},"body":{"classes/CreateChatDto.html":{},"coverage.html":{}}}],["src/chats/dto/enter",{"_index":1171,"title":{},"body":{"classes/EnterChatDto.html":{},"coverage.html":{}}}],["src/chats/dto/paginate",{"_index":1394,"title":{},"body":{"classes/PaginateChatDto.html":{},"coverage.html":{}}}],["src/chats/entity/chats.entity",{"_index":1391,"title":{},"body":{"entities/MessagesModel.html":{},"entities/UsersModel.html":{}}}],["src/chats/entity/chats.entity.ts",{"_index":786,"title":{},"body":{"entities/ChatsModel.html":{},"coverage.html":{}}}],["src/chats/entity/chats.entity.ts:19",{"_index":794,"title":{},"body":{"entities/ChatsModel.html":{}}}],["src/chats/entity/chats.entity.ts:26",{"_index":789,"title":{},"body":{"entities/ChatsModel.html":{}}}],["src/chats/messages/dto/create",{"_index":1128,"title":{},"body":{"classes/CreateMessagesDto.html":{},"coverage.html":{}}}],["src/chats/messages/entity/messages.entity",{"_index":1875,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/chats/messages/entity/messages.entity.ts",{"_index":1383,"title":{},"body":{"entities/MessagesModel.html":{},"coverage.html":{}}}],["src/chats/messages/entity/messages.entity.ts:22",{"_index":1387,"title":{},"body":{"entities/MessagesModel.html":{}}}],["src/chats/messages/entity/messages.entity.ts:32",{"_index":1385,"title":{},"body":{"entities/MessagesModel.html":{}}}],["src/chats/messages/entity/messages.entity.ts:42",{"_index":1390,"title":{},"body":{"entities/MessagesModel.html":{}}}],["src/chats/messages/entity/messages.entity.ts:52",{"_index":1388,"title":{},"body":{"entities/MessagesModel.html":{}}}],["src/chats/messages/messages.controller.ts",{"_index":1374,"title":{},"body":{"controllers/MessagesController.html":{},"coverage.html":{}}}],["src/chats/messages/messages.controller.ts:29",{"_index":1378,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/chats/messages/messages.service.ts",{"_index":751,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{},"coverage.html":{}}}],["src/chats/messages/messages.service.ts:24",{"_index":757,"title":{},"body":{"injectables/ChatsMessagesService.html":{}}}],["src/chats/messages/messages.service.ts:37",{"_index":761,"title":{},"body":{"injectables/ChatsMessagesService.html":{}}}],["src/chats/messages/messages.service.ts:73",{"_index":765,"title":{},"body":{"injectables/ChatsMessagesService.html":{}}}],["src/common/common.controller.ts",{"_index":975,"title":{},"body":{"controllers/CommonController.html":{},"coverage.html":{}}}],["src/common/common.controller.ts:21",{"_index":981,"title":{},"body":{"controllers/CommonController.html":{}}}],["src/common/common.module",{"_index":806,"title":{},"body":{"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/PostsModule.html":{}}}],["src/common/common.module.ts",{"_index":995,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/common.service",{"_index":768,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"interfaces/SavePayload.html":{}}}],["src/common/common.service.ts",{"_index":1030,"title":{},"body":{"injectables/CommonService.html":{},"coverage.html":{}}}],["src/common/common.service.ts:154",{"_index":1041,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/common.service.ts:16",{"_index":1037,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/common.service.ts:199",{"_index":1051,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/common.service.ts:31",{"_index":1049,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/common.service.ts:64",{"_index":1047,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/common.service.ts:93",{"_index":1044,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/const/auth",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/common/const/filter",{"_index":1922,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/const/is",{"_index":41,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenGuard.html":{},"miscellaneous/enumerations.html":{}}}],["src/common/const/path.const",{"_index":1487,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["src/common/const/path.const.ts",{"_index":1925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/is",{"_index":38,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/query",{"_index":878,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/rate",{"_index":1461,"title":{},"body":{"controllers/PostsController.html":{},"interfaces/RateLimitOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto/base",{"_index":570,"title":{},"body":{"classes/BasePaginationDto.html":{},"injectables/ChatsMessagesService.html":{},"controllers/MessagesController.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"interfaces/SavePayload.html":{},"coverage.html":{}}}],["src/common/entity/base.entity",{"_index":795,"title":{},"body":{"entities/ChatsModel.html":{},"entities/CommentsModel.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{}}}],["src/common/entity/base.entity.ts",{"_index":550,"title":{},"body":{"classes/BaseModel.html":{},"coverage.html":{}}}],["src/common/entity/base.entity.ts:17",{"_index":558,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/common/entity/base.entity.ts:25",{"_index":562,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/common/entity/base.entity.ts:33",{"_index":556,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/common/entity/image.entity",{"_index":1151,"title":{},"body":{"classes/CreatePostImageDto.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"modules/PostsModule.html":{}}}],["src/common/entity/image.entity.ts",{"_index":1245,"title":{},"body":{"entities/ImageModel.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/common/entity/image.entity.ts:39",{"_index":1247,"title":{},"body":{"entities/ImageModel.html":{}}}],["src/common/entity/image.entity.ts:56",{"_index":1258,"title":{},"body":{"entities/ImageModel.html":{}}}],["src/common/entity/image.entity.ts:77",{"_index":1250,"title":{},"body":{"entities/ImageModel.html":{}}}],["src/common/entity/image.entity.ts:87",{"_index":1254,"title":{},"body":{"entities/ImageModel.html":{}}}],["src/common/enums/auth",{"_index":2018,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/exception",{"_index":680,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{}}}],["src/common/guards/rate",{"_index":1584,"title":{},"body":{"guards/RateLimiterGuard.html":{},"coverage.html":{}}}],["src/common/interceptor/log.interceptor.ts",{"_index":1310,"title":{},"body":{"injectables/LogInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptor/log.interceptor.ts:19",{"_index":1317,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["src/common/interceptor/log.interceptor.ts:28",{"_index":1314,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["src/common/interceptor/transaction.interceptor",{"_index":876,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["src/common/interceptor/transaction.interceptor.ts",{"_index":1737,"title":{},"body":{"injectables/TransactionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptor/transaction.interceptor.ts:35",{"_index":1742,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["src/common/interceptor/transaction.interceptor.ts:72",{"_index":1743,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["src/common/interfaces/provider",{"_index":1552,"title":{},"body":{"interfaces/ProviderData.html":{},"coverage.html":{}}}],["src/common/middleware/log.middleware.ts",{"_index":1341,"title":{},"body":{"injectables/LogMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/log.middleware.ts:18",{"_index":1345,"title":{},"body":{"injectables/LogMiddleware.html":{}}}],["src/common/validation",{"_index":1526,"title":{},"body":{"entities/PostsModel.html":{},"classes/UpdatePostDto.html":{},"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configs/app.config",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommonService.html":{}}}],["src/configs/env/.${process.env.node_env}.env",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["src/configs/google.config",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{}}}],["src/configs/kakao.config",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/KakaoStrategy.html":{}}}],["src/database/seeds/create",{"_index":1153,"title":{},"body":{"classes/CreatePostsSeeder.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1934,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/comments/comments.controller.ts",{"_index":831,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/posts/comments/comments.controller.ts:114",{"_index":856,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/posts/comments/comments.controller.ts:138",{"_index":845,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/posts/comments/comments.controller.ts:42",{"_index":852,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/posts/comments/comments.controller.ts:62",{"_index":849,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/posts/comments/comments.controller.ts:85",{"_index":861,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/posts/comments/comments.module.ts",{"_index":919,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/posts/comments/comments.module.ts:26",{"_index":921,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/posts/comments/comments.service.ts",{"_index":931,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["src/posts/comments/comments.service.ts:118",{"_index":955,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/posts/comments/comments.service.ts:151",{"_index":944,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/posts/comments/comments.service.ts:167",{"_index":950,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/posts/comments/comments.service.ts:17",{"_index":939,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/posts/comments/comments.service.ts:30",{"_index":953,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/posts/comments/comments.service.ts:54",{"_index":946,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/posts/comments/comments.service.ts:80",{"_index":948,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/posts/comments/comments.service.ts:92",{"_index":942,"title":{},"body":{"injectables/CommentsService.html":{}}}],["src/posts/comments/const/default",{"_index":1938,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/comments/dto/create",{"_index":1119,"title":{},"body":{"classes/CreateCommentsDto.html":{},"coverage.html":{}}}],["src/posts/comments/dto/paginate",{"_index":1401,"title":{},"body":{"classes/PaginateCommentsDto.html":{},"coverage.html":{}}}],["src/posts/comments/dto/update",{"_index":1759,"title":{},"body":{"classes/UpdateCommentsDto.html":{},"coverage.html":{}}}],["src/posts/comments/entity/comments.entity",{"_index":1879,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/posts/comments/entity/comments.entity.ts",{"_index":899,"title":{},"body":{"entities/CommentsModel.html":{},"coverage.html":{}}}],["src/posts/comments/entity/comments.entity.ts:20",{"_index":903,"title":{},"body":{"entities/CommentsModel.html":{}}}],["src/posts/comments/entity/comments.entity.ts:27",{"_index":910,"title":{},"body":{"entities/CommentsModel.html":{}}}],["src/posts/comments/entity/comments.entity.ts:34",{"_index":905,"title":{},"body":{"entities/CommentsModel.html":{}}}],["src/posts/comments/entity/comments.entity.ts:43",{"_index":908,"title":{},"body":{"entities/CommentsModel.html":{}}}],["src/posts/comments/guard/is",{"_index":1269,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{},"coverage.html":{}}}],["src/posts/comments/middleware/post",{"_index":1415,"title":{},"body":{"injectables/PostExistsMiddleware.html":{},"coverage.html":{}}}],["src/posts/const/default",{"_index":1940,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/dto/create",{"_index":1134,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/paginate",{"_index":1403,"title":{},"body":{"classes/PaginatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/update",{"_index":1762,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/entity/posts.entity",{"_index":912,"title":{},"body":{"entities/CommentsModel.html":{},"entities/ImageModel.html":{},"entities/UsersModel.html":{}}}],["src/posts/entity/posts.entity.ts",{"_index":1503,"title":{},"body":{"entities/PostsModel.html":{},"coverage.html":{}}}],["src/posts/entity/posts.entity.ts:105",{"_index":1523,"title":{},"body":{"entities/PostsModel.html":{}}}],["src/posts/entity/posts.entity.ts:114",{"_index":1517,"title":{},"body":{"entities/PostsModel.html":{}}}],["src/posts/entity/posts.entity.ts:32",{"_index":1509,"title":{},"body":{"entities/PostsModel.html":{}}}],["src/posts/entity/posts.entity.ts:46",{"_index":1512,"title":{},"body":{"entities/PostsModel.html":{}}}],["src/posts/entity/posts.entity.ts:59",{"_index":1525,"title":{},"body":{"entities/PostsModel.html":{}}}],["src/posts/entity/posts.entity.ts:72",{"_index":1520,"title":{},"body":{"entities/PostsModel.html":{}}}],["src/posts/entity/posts.entity.ts:84",{"_index":1524,"title":{},"body":{"entities/PostsModel.html":{}}}],["src/posts/entity/posts.entity.ts:96",{"_index":1515,"title":{},"body":{"entities/PostsModel.html":{}}}],["src/posts/guard/is",{"_index":1286,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{},"coverage.html":{}}}],["src/posts/image/dto/create",{"_index":1148,"title":{},"body":{"classes/CreatePostImageDto.html":{},"coverage.html":{}}}],["src/posts/image/images.service.ts",{"_index":1478,"title":{},"body":{"injectables/PostsImagesService.html":{},"coverage.html":{}}}],["src/posts/image/images.service.ts:16",{"_index":1481,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["src/posts/image/images.service.ts:27",{"_index":1485,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["src/posts/image/images.service.ts:38",{"_index":1484,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["src/posts/posts.controller.ts",{"_index":1422,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:104",{"_index":1454,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:123",{"_index":1440,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:141",{"_index":1451,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:173",{"_index":1448,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:192",{"_index":1434,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:57",{"_index":1444,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:75",{"_index":1437,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1538,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service",{"_index":1419,"title":{},"body":{"injectables/PostExistsMiddleware.html":{}}}],["src/posts/posts.service.ts",{"_index":1944,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/posts/resolver/posts.resolver.ts",{"_index":1542,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{}}}],["src/posts/resolver/posts.resolver.ts:12",{"_index":1544,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/resolver/posts.resolver.ts:28",{"_index":1546,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/redis/redis.constants",{"_index":1599,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["src/redis/redis.constants.ts",{"_index":1949,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/redis/redis.keys",{"_index":1950,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/redis/redis.module.ts",{"_index":1646,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/redis/redis.service.ts",{"_index":1661,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/redis/redis.service.ts:13",{"_index":1667,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:24",{"_index":1675,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:34",{"_index":1678,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:42",{"_index":1670,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:50",{"_index":1672,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/redis/redis.service.ts:72",{"_index":1668,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/schema.gql",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["src/users/decorator/roles.decorator",{"_index":1459,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/users/decorator/roles.decorator.ts",{"_index":1953,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/decorator/user.decorator",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["src/users/decorator/user.decorator.ts",{"_index":1954,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/entity/user",{"_index":1768,"title":{},"body":{"entities/UserFollowersModel.html":{},"coverage.html":{}}}],["src/users/entity/users.entity",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatsGateway.html":{},"entities/ChatsModel.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"entities/MessagesModel.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{}}}],["src/users/entity/users.entity.ts",{"_index":1834,"title":{},"body":{"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/entity/users.entity.ts:101",{"_index":1864,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:122",{"_index":1844,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:146",{"_index":1867,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:163",{"_index":1870,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:175",{"_index":1868,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:188",{"_index":1837,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:200",{"_index":1859,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:212",{"_index":1872,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:224",{"_index":1839,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:237",{"_index":1852,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:250",{"_index":1849,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:265",{"_index":1850,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:280",{"_index":1846,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:62",{"_index":1856,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/entity/users.entity.ts:79",{"_index":1857,"title":{},"body":{"entities/UsersModel.html":{}}}],["src/users/guard/roles.guard.ts",{"_index":1713,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/users/guard/roles.guard.ts:20",{"_index":1717,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/users/guard/roles.guard.ts:42",{"_index":1718,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/users/users.controller.ts",{"_index":1779,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:111",{"_index":1800,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:133",{"_index":1805,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:171",{"_index":1790,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:32",{"_index":1801,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:48",{"_index":1797,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":1808,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:90",{"_index":1793,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":434,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1891,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":34,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["src/users/users.service.ts",{"_index":1956,"title":{},"body":{"coverage.html":{}}}],["starts",{"_index":1695,"title":{},"body":{"injectables/RedisService.html":{}}}],["statements",{"_index":1901,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":1232,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":1240,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["storage",{"_index":1025,"title":{},"body":{"modules/CommonModule.html":{}}}],["store",{"_index":1659,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["strategies/google.strategy",{"_index":435,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/kakao.strategy",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1196,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["string",{"_index":287,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/CommentsModel.html":{},"injectables/CommonService.html":{},"classes/CreateCommentsDto.html":{},"classes/CreatePostDto.html":{},"injectables/GoogleStrategy.html":{},"entities/ImageModel.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoStrategy.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"entities/PostsModel.html":{},"interfaces/ProviderData.html":{},"injectables/RedisService.html":{},"classes/RegisterUserDto.html":{},"interfaces/SavePayload.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["stringvalidationmessage",{"_index":1519,"title":{},"body":{"entities/PostsModel.html":{},"classes/UpdatePostDto.html":{},"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stringvalidationmessage})@isemail",{"_index":1842,"title":{},"body":{"entities/UsersModel.html":{}}}],["stringvalidationmessage})@isoptional",{"_index":1765,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["stringvalidationmessage})@length(1",{"_index":1862,"title":{},"body":{"entities/UsersModel.html":{}}}],["stringvalidationmessage})@length(3",{"_index":1865,"title":{},"body":{"entities/UsersModel.html":{}}}],["sub",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":1359,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["subscribemessage",{"_index":669,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["subscribemessage('create_chat",{"_index":652,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["subscribemessage('enter_chat",{"_index":657,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["subscribemessage('join",{"_index":1728,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["subscribemessage('send_message",{"_index":665,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["summary",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatsController.html":{},"controllers/CommentsController.html":{},"controllers/MessagesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1199,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["super.canactivate",{"_index":96,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["super.canactivate(context",{"_index":94,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["support",{"_index":2028,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2029,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2005,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":1042,"title":{},"body":{"injectables/CommonService.html":{},"injectables/RedisService.html":{}}}],["table",{"_index":1960,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1959,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":574,"title":{},"body":{"classes/BasePaginationDto.html":{},"injectables/CommonService.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["tap",{"_index":1319,"title":{},"body":{"injectables/LogInterceptor.html":{},"injectables/TransactionInterceptor.html":{}}}],["tap(async",{"_index":1757,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["targetname",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temp",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temp_folder_name",{"_index":1929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["temp_folder_path",{"_index":1005,"title":{},"body":{"modules/CommonModule.html":{},"injectables/PostsImagesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tempfilepath",{"_index":1494,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["this.authenticatewithemailandpassword(logindto",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.authenticatewithemailandpassword",{"_index":609,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["this.authservice.decodebasictoken(token",{"_index":608,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["this.authservice.extracttokenfromheader",{"_index":709,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.authservice.extracttokenfromheader(rawtoken",{"_index":78,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["this.authservice.loginuser(user",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginwithemail(logindto",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.registerwithemail(body",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.rotatetoken(token",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifytoken(token",{"_index":81,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["this.chatsrepository",{"_index":824,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatsrepository.exists",{"_index":829,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatsrepository.findone",{"_index":827,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatsrepository.save",{"_index":825,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.chatsservice.checkifchatexists(chatid",{"_index":721,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.chatsservice.checkifchatexists(dto.chatid",{"_index":731,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.chatsservice.createchat",{"_index":716,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.chatsservice.paginatechats(dto",{"_index":627,"title":{},"body":{"controllers/ChatsController.html":{}}}],["this.commentservice.iscommentmine",{"_index":1282,"title":{},"body":{"guards/IsCommentMineOrAdminGuard.html":{}}}],["this.commentsrepository",{"_index":962,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsrepository.exist",{"_index":973,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.commentsservice.createcomment(body",{"_index":890,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.deletecomment(postid",{"_index":897,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.getcommentbyid(postid",{"_index":888,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.paginatecomments(query",{"_index":885,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.updatecomment(body",{"_index":895,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commonservice.paginate",{"_index":782,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"injectables/CommentsService.html":{},"interfaces/SavePayload.html":{}}}],["this.commonservice.paginate(dto",{"_index":823,"title":{},"body":{"injectables/ChatsService.html":{}}}],["this.composefindoptions(dto",{"_index":1062,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.config.clientid",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.http.host",{"_index":1075,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.config.http.protocol",{"_index":1074,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.config.jwt.secretkey",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config.logoutcallbackurl",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cursorpaginate",{"_index":1060,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1751,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["this.getcommentbyid(postid",{"_index":968,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.getrepository(qr",{"_index":964,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/PostsImagesService.html":{}}}],["this.imagerepository",{"_index":1493,"title":{},"body":{"injectables/PostsImagesService.html":{}}}],["this.jwtservice.sign(payload",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.keyv.clear",{"_index":1704,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.keyv.delete(key",{"_index":1682,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.keyv.get(key",{"_index":1680,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.keyv.set(key",{"_index":1681,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.keyv.store",{"_index":1684,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.length",{"_index":1371,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["this.loginuser(existinguser",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.loginuser(newuser",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.messagesrepository",{"_index":783,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["this.messagesrepository.findone",{"_index":779,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["this.messagesrepository.save(savepayload",{"_index":778,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"interfaces/SavePayload.html":{}}}],["this.messagesservice.createmessage(dto",{"_index":739,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.messagesservice.paginatemessages",{"_index":1382,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.pagepaginate",{"_index":1059,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.parsewherefilter(key",{"_index":1093,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.postservice.checkpostexistsbyid(parseint(postid",{"_index":1420,"title":{},"body":{"injectables/PostExistsMiddleware.html":{}}}],["this.postservice.decrementfollowercount(postid",{"_index":898,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.postservice.incrementfollowercount(postid",{"_index":891,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.postservice.ispostmine",{"_index":1296,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{}}}],["this.postsservice.createpost(userid",{"_index":1476,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.generateposts(userid",{"_index":1472,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(id",{"_index":1475,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{}}}],["this.postsservice.paginateposts(query",{"_index":1464,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.redis.eval",{"_index":1640,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":1722,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":59,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["this.reflector.getallandoverride(rate_limiter_key",{"_index":1637,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["this.script",{"_index":1641,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["this.server.in(message.chatid.tostring()).emit('receive_message",{"_index":750,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.server.to(dto.whispertargetid.tostring()).emit('receive_whisper",{"_index":747,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.signtoken",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.save(userdata",{"_index":1745,"title":{},"body":{"injectables/TransactionInterceptor.html":{}}}],["this.usersservice.checkifuserexists(dto.whispertargetid",{"_index":736,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["this.usersservice.confirmfollow(followerid",{"_index":1828,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.decrementfollowercount",{"_index":1833,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deletefollow(userid",{"_index":1823,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findorcreatebygoogle",{"_index":1216,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["this.usersservice.findorcreatebykakao",{"_index":1309,"title":{},"body":{"injectables/KakaoStrategy.html":{}}}],["this.usersservice.followuser(userid",{"_index":1821,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":1814,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getfollowers(userid",{"_index":1818,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getrequestallfollowee(userid",{"_index":1826,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(logindto.email",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyemail(payload.email",{"_index":710,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["this.usersservice.getuserbyemail(result.email",{"_index":83,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["this.usersservice.incrementfollowercount",{"_index":1829,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.verifytoken(token",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":69,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/PostsImagesService.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"miscellaneous/variables.html":{}}}],["throws",{"_index":57,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"injectables/PostsImagesService.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{}}}],["time",{"_index":1338,"title":{},"body":{"injectables/LogInterceptor.html":{}}}],["timestamp",{"_index":1242,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":1137,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"classes/UpdatePostDto.html":{}}}],["token",{"_index":77,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["token.guard",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:142",{"_index":1705,"title":{},"body":{"injectables/RefreshTokenGuard.html":{}}}],["token.guard.ts:16",{"_index":610,"title":{},"body":{"guards/BearerTokenGuard.html":{}}}],["token.guard.ts:18",{"_index":603,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["token.guard.ts:20",{"_index":1730,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["token.guard.ts:28",{"_index":604,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["token.guard.ts:30",{"_index":611,"title":{},"body":{"guards/BearerTokenGuard.html":{}}}],["token.guard.ts:45",{"_index":1731,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["token.guard.ts:89",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["tokens",{"_index":1613,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["tokentype",{"_index":97,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["tonumber(argv[1",{"_index":1604,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["tonumber(argv[2",{"_index":1606,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["tonumber(argv[3",{"_index":1608,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["tonumber(argv[4",{"_index":1610,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["tonumber(argv[5",{"_index":1611,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["tonumber(redis.call(\"hget",{"_index":1615,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["toplainonly",{"_index":1885,"title":{},"body":{"entities/UsersModel.html":{}}}],["total",{"_index":1065,"title":{},"body":{"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{}}}],["transactioninterceptor",{"_index":875,"title":{"injectables/TransactionInterceptor.html":{}},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["transform",{"_index":689,"title":{},"body":{"classes/ChatsGateway.html":{},"entities/ImageModel.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["transform(({value",{"_index":1265,"title":{},"body":{"entities/ImageModel.html":{}}}],["transform(value",{"_index":1362,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["transformer",{"_index":1262,"title":{},"body":{"entities/ImageModel.html":{},"entities/UsersModel.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":690,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["true",{"_index":63,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"injectables/CommentsService.html":{},"modules/CommonModule.html":{},"classes/CreateChatDto.html":{},"classes/CreatePostDto.html":{},"classes/EnterChatDto.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"controllers/MessagesController.html":{},"classes/PaginatePostDto.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"guards/RateLimiterGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["true})@column({unique",{"_index":1854,"title":{},"body":{"entities/UsersModel.html":{}}}],["true})@isoptional",{"_index":1143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@isstring",{"_index":1855,"title":{},"body":{"entities/UsersModel.html":{}}}],["true})@isstring({message",{"_index":1841,"title":{},"body":{"entities/UsersModel.html":{}}}],["try",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatsGateway.html":{},"injectables/PostsImagesService.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["ttl",{"_index":1609,"title":{},"body":{"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{}}}],["ttlms",{"_index":1677,"title":{},"body":{"injectables/RedisService.html":{}}}],["type",{"_index":23,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseModel.html":{},"classes/BasePaginationDto.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"controllers/ChatsController.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"controllers/CommonController.html":{},"injectables/CommonService.html":{},"classes/CreateChatDto.html":{},"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/CreatePostsSeeder.html":{},"classes/EnterChatDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/ImageModel.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoStrategy.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{},"classes/LoginDto.html":{},"injectables/MaxLengthPipe.html":{},"controllers/MessagesController.html":{},"entities/MessagesModel.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"injectables/PostExistsMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"classes/PostsResolver.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshTokenGuard.html":{},"classes/RegisterUserDto.html":{},"guards/RolesGuard.html":{},"interfaces/SavePayload.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{},"classes/UpdateCommentsDto.html":{},"classes/UpdatePostDto.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type:field",{"_index":1596,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["typealiases",{"_index":2035,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1235,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["typeorm",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"injectables/ChatsMessagesService.html":{},"entities/ChatsModel.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"classes/CreatePostsSeeder.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"entities/PostsModel.html":{},"interfaces/SavePayload.html":{},"injectables/TransactionInterceptor.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":929,"title":{},"body":{"modules/CommentsModule.html":{},"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([chatsmodel",{"_index":809,"title":{},"body":{"modules/ChatsModule.html":{}}}],["typeormmodule.forfeature([usersmodel",{"_index":1894,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1126,"title":{},"body":{"classes/CreateCommentsDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostImageDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":1973,"title":{},"body":{"dependencies.html":{}}}],["types/cache",{"_index":1975,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1978,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":1980,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"classes/BasePaginationDto.html":{},"guards/IsPostMineOrAdminGuard.html":{},"interfaces/ProviderData.html":{},"interfaces/RateLimitOptions.html":{},"guards/RateLimiterGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"injectables/TransactionInterceptor.html":{}}}],["ufm",{"_index":1847,"title":{},"body":{"entities/UsersModel.html":{}}}],["ufm.followee",{"_index":1848,"title":{},"body":{"entities/UsersModel.html":{}}}],["ufm.follower",{"_index":1851,"title":{},"body":{"entities/UsersModel.html":{}}}],["ui",{"_index":2006,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":29,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["unauthorizedexception('access",{"_index":100,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["unauthorizedexception('refresh",{"_index":103,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["unauthorizedexception('request",{"_index":71,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["unauthorizedexception('token",{"_index":98,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["unauthorizedexception(`${error",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":727,"title":{},"body":{"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/CommonService.html":{},"injectables/RedisService.html":{},"interfaces/SavePayload.html":{},"entities/UsersModel.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isstring({each",{"_index":1142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":1861,"title":{},"body":{"entities/UsersModel.html":{}}}],["unknown",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatsGateway.html":{},"injectables/ChatsMessagesService.html":{},"injectables/ChatsService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"injectables/LogInterceptor.html":{},"controllers/PostsController.html":{},"injectables/PostsImagesService.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":2034,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatecomment",{"_index":937,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updatecomment(dto",{"_index":954,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updatecommentsdto",{"_index":854,"title":{"classes/UpdateCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/UpdateCommentsDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":553,"title":{},"body":{"classes/BaseModel.html":{},"entities/PostsModel.html":{},"entities/UsersModel.html":{}}}],["updatedatecolumn",{"_index":567,"title":{},"body":{"classes/BaseModel.html":{}}}],["updatepost(@param('postid",{"_index":1290,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{}}}],["updatepostdto",{"_index":1446,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":983,"title":{},"body":{"controllers/CommonController.html":{}}}],["url",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"entities/ImageModel.html":{},"injectables/LogInterceptor.html":{},"injectables/LogMiddleware.html":{}}}],["url(`${protocol}://${host}/${path",{"_index":1077,"title":{},"body":{"injectables/CommonService.html":{}}}],["urlencoded",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["urlencoded')@apibody({type",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["use",{"_index":1342,"title":{},"body":{"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{}}}],["use(req",{"_index":1343,"title":{},"body":{"injectables/LogMiddleware.html":{},"injectables/PostExistsMiddleware.html":{}}}],["useclass",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{}}}],["usefilters",{"_index":676,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["usefilters(wserrorfilter",{"_index":695,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["useguards",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"interfaces/RateLimitOptions.html":{}}}],["useguards(googleauthguard",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(iscommentmineoradminguard",{"_index":894,"title":{},"body":{"controllers/CommentsController.html":{}}}],["useguards(iscommentmineoradminguard)@useinterceptors(transactioninterceptor",{"_index":844,"title":{},"body":{"controllers/CommentsController.html":{}}}],["useguards(ispostmineoradminguard",{"_index":1289,"title":{},"body":{"guards/IsPostMineOrAdminGuard.html":{},"controllers/PostsController.html":{}}}],["useguards(kakaoauthguard",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(ratelimiterguard",{"_index":1583,"title":{},"body":{"interfaces/RateLimitOptions.html":{},"miscellaneous/variables.html":{}}}],["useguards(refreshtokenguard",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(rolesguard",{"_index":1715,"title":{},"body":{"guards/RolesGuard.html":{}}}],["useguards(socketbearertokenguard",{"_index":1727,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["useinterceptors",{"_index":865,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/CommonController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":989,"title":{},"body":{"controllers/CommonController.html":{}}}],["useinterceptors(transactioninterceptor",{"_index":860,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{}}}],["usepipes",{"_index":677,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["user",{"_index":82,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"entities/ChatsModel.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/GoogleStrategy.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{},"injectables/KakaoStrategy.html":{},"entities/MessagesModel.html":{},"controllers/PostsController.html":{},"entities/PostsModel.html":{},"injectables/RefreshTokenGuard.html":{},"guards/RolesGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"entities/UserFollowersModel.html":{},"controllers/UsersController.html":{},"entities/UsersModel.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user('id",{"_index":1466,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["user.chats",{"_index":793,"title":{},"body":{"entities/ChatsModel.html":{}}}],["user.comments",{"_index":902,"title":{},"body":{"entities/CommentsModel.html":{}}}],["user.dto",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.dto.ts",{"_index":1707,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:21",{"_index":1709,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.email",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.followees",{"_index":1772,"title":{},"body":{"entities/UserFollowersModel.html":{}}}],["user.followers",{"_index":1774,"title":{},"body":{"entities/UserFollowersModel.html":{}}}],["user.id",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"guards/IsCommentMineOrAdminGuard.html":{},"guards/IsPostMineOrAdminGuard.html":{}}}],["user.messages",{"_index":1384,"title":{},"body":{"entities/MessagesModel.html":{}}}],["user.password",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":1506,"title":{},"body":{"entities/PostsModel.html":{}}}],["user.role",{"_index":1724,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.whispermessages",{"_index":1389,"title":{},"body":{"entities/MessagesModel.html":{}}}],["user123",{"_index":1708,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user:${req.user.id",{"_index":1628,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["user:{id",{"_index":1624,"title":{},"body":{"guards/RateLimiterGuard.html":{}}}],["user@example.com",{"_index":1352,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["user@gmail.com",{"_index":1555,"title":{},"body":{"interfaces/ProviderData.html":{}}}],["user[data",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_roles",{"_index":2093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userexists",{"_index":735,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["userfollowersmodel",{"_index":175,"title":{"entities/UserFollowersModel.html":{}},"body":{"modules/AppModule.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":951,"title":{},"body":{"injectables/CommentsService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["userids",{"_index":1114,"title":{},"body":{"classes/CreateChatDto.html":{}}}],["username",{"_index":253,"title":{},"body":{"modules/AppModule.html":{},"injectables/KakaoStrategy.html":{}}}],["users",{"_index":787,"title":{},"body":{"entities/ChatsModel.html":{},"injectables/ChatsService.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1892,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":1778,"title":{},"body":{"entities/UserFollowersModel.html":{}}}],["users.service",{"_index":1811,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entity/user",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["users/entity/users.entity",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["users/guard/roles.guard",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1739,"title":{"controllers/UsersController.html":{}},"body":{"injectables/TransactionInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodel",{"_index":145,"title":{"entities/UsersModel.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatsGateway.html":{},"entities/ChatsModel.html":{},"controllers/CommentsController.html":{},"entities/CommentsModel.html":{},"injectables/CommentsService.html":{},"entities/ImageModel.html":{},"entities/MessagesModel.html":{},"entities/PostsModel.html":{},"entities/UserFollowersModel.html":{},"entities/UsersModel.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersmodule",{"_index":131,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":33,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/BearerTokenGuard.html":{},"classes/ChatsGateway.html":{},"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"guards/SocketBearerTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{}}}],["uuid",{"_index":1001,"title":{},"body":{"modules/CommonModule.html":{},"dependencies.html":{}}}],["uuid()}${extname(file.originalname",{"_index":1029,"title":{},"body":{"modules/CommonModule.html":{}}}],["v4",{"_index":1000,"title":{},"body":{"modules/CommonModule.html":{}}}],["validate",{"_index":1186,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["validate(accesstoken",{"_index":1190,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["validation.message",{"_index":1528,"title":{},"body":{"entities/PostsModel.html":{},"classes/UpdatePostDto.html":{},"entities/UsersModel.html":{}}}],["validation.message.ts",{"_index":1933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationarguments",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":678,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["validationrules",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":593,"title":{},"body":{"classes/BasePaginationDto.html":{},"entities/CommentsModel.html":{},"classes/CreateChatDto.html":{},"classes/CreateMessagesDto.html":{},"classes/CreatePostDto.html":{},"classes/EnterChatDto.html":{},"entities/ImageModel.html":{},"classes/LoginDto.html":{},"entities/MessagesModel.html":{},"classes/PaginatePostDto.html":{},"entities/PostsModel.html":{},"classes/RegisterUserDto.html":{},"classes/UpdatePostDto.html":{},"entities/UsersModel.html":{},"dependencies.html":{}}}],["value",{"_index":580,"title":{},"body":{"classes/BasePaginationDto.html":{},"injectables/CommonService.html":{},"classes/CreatePostDto.html":{},"entities/ImageModel.html":{},"injectables/LogInterceptor.html":{},"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{},"injectables/PasswordPipe.html":{},"interfaces/RateLimitOptions.html":{},"injectables/RedisService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.tostring",{"_index":1370,"title":{},"body":{"injectables/MaxLengthPipe.html":{},"injectables/MinLengthPipe.html":{},"injectables/PasswordPipe.html":{}}}],["value.tostring().split",{"_index":1104,"title":{},"body":{"injectables/CommonService.html":{}}}],["values",{"_index":1103,"title":{},"body":{"injectables/CommonService.html":{}}}],["values[1",{"_index":1108,"title":{},"body":{"injectables/CommonService.html":{}}}],["variable",{"_index":1924,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2038,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycallback",{"_index":1193,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/KakaoStrategy.html":{}}}],["verifytoken",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytoken(token",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":2031,"title":{},"body":{"properties.html":{}}}],["void",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChatsGateway.html":{},"modules/CommentsModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LogMiddleware.html":{},"classes/WsErrorFilter.html":{}}}],["websocket",{"_index":630,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{},"classes/WsErrorFilter.html":{}}}],["websocketgateway",{"_index":670,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["websocketserver",{"_index":645,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["where__author__equal",{"_index":1405,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["where__id__less_than",{"_index":575,"title":{},"body":{"classes/BasePaginationDto.html":{},"injectables/CommonService.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["where__id__more_than",{"_index":576,"title":{},"body":{"classes/BasePaginationDto.html":{},"injectables/CommonService.html":{},"classes/PaginateChatDto.html":{},"classes/PaginateCommentsDto.html":{},"classes/PaginatePostDto.html":{}}}],["where__id_not",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["where__likecount__more_than",{"_index":1406,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["where__title__i_like",{"_index":1407,"title":{},"body":{"classes/PaginatePostDto.html":{}}}],["wherelessthanname",{"_index":1068,"title":{},"body":{"injectables/CommonService.html":{}}}],["wheremorethanname",{"_index":1067,"title":{},"body":{"injectables/CommonService.html":{}}}],["whispermessages",{"_index":1835,"title":{},"body":{"entities/UsersModel.html":{}}}],["whispertargetid",{"_index":738,"title":{},"body":{"classes/ChatsGateway.html":{},"classes/CreateMessagesDto.html":{}}}],["whispertargetuser",{"_index":773,"title":{},"body":{"injectables/ChatsMessagesService.html":{},"entities/MessagesModel.html":{},"interfaces/SavePayload.html":{}}}],["whitelist",{"_index":692,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["world",{"_index":289,"title":{},"body":{"injectables/AppService.html":{}}}],["ws://localhost:3000/chats",{"_index":694,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["wserrorfilter",{"_index":679,"title":{"classes/WsErrorFilter.html":{}},"body":{"classes/ChatsGateway.html":{},"classes/WsErrorFilter.html":{},"coverage.html":{}}}],["wsexception",{"_index":671,"title":{},"body":{"classes/ChatsGateway.html":{},"guards/SocketBearerTokenGuard.html":{}}}],["wsexception(`${error",{"_index":1736,"title":{},"body":{"guards/SocketBearerTokenGuard.html":{}}}],["www",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["x.tostring",{"_index":725,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["xxx.jpg",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{}}}],["xxxxxx",{"_index":706,"title":{},"body":{"classes/ChatsGateway.html":{}}}],["yes",{"_index":943,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/CommonService.html":{},"injectables/PostsImagesService.html":{},"injectables/RedisService.html":{}}}],["zoom",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatsModule.html":{},"modules/CommentsModule.html":{},"modules/CommonModule.html":{},"modules/PostsModule.html":{},"modules/RedisModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/bearer-token.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Access 토큰 전용 가드\nBearerTokenGuard를 상속받아 토큰 유형을 추가로 검증합니다.\n\n            \n\n            \n                Extends\n            \n            \n                            BearerTokenGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:89\n                        \n                    \n\n\n            \n                \n                        Access 토큰 검증 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                인증 및 토큰 유형 검증 성공 여부\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { AuthService } from \"../auth.service\";\nimport { UsersService } from \"src/users/users.service\";\nimport { Reflector } from \"@nestjs/core\";\nimport { IS_PUBLIC_KEY } from \"src/common/decorator/is-public.decorator\";\nimport { IsPublicEnum } from \"src/common/const/is-public.const\";\nimport { GqlExecutionContext } from \"@nestjs/graphql\";\n\n/**\n * Bearer 토큰 기본 가드\n * \n * @description JWT Bearer 토큰을 검증하고 사용자 정보를 요청 객체에 주입합니다.\n * HTTP와 GraphQL 요청을 모두 지원하며, @IsPublic 데코레이터로 표시된 경로는 인증을 건너뜁니다.\n */\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n    constructor(\n        protected readonly authService: AuthService,\n        protected readonly usersService: UsersService,\n        protected readonly reflector: Reflector,\n    ) {}\n\n    /**\n     * 가드 활성화 여부를 확인하는 메서드\n     * \n     * @param context - 실행 컨텍스트 (HTTP 또는 GraphQL)\n     * @returns 인증 성공 여부\n     * @throws {UnauthorizedException} 토큰이 없거나 유효하지 않을 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n          ]);\n      \n          if (isPublic) {\n            return true;\n          }\n\n        // GraphQL 요청인지 확인하고, 맞다면 GqlExecutionContext 사용\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest(); // GraphQL 컨텍스트에서 req 가져오기, 없으면 HTTP 컨텍스트 시도\n\n        if (!req) {\n            // 요청 객체를 가져올 수 없는 경우 (예상치 못한 상황)\n            throw new UnauthorizedException('Request object not found in context.');\n        }\n\n        const rawToken = req.headers['authorization']; // 여기서 req.headers 접근\n\n        if (!rawToken) {\n            throw new UnauthorizedException('토큰이 없습니다!');\n        }\n\n        const token = this.authService.extractTokenFromHeader(rawToken, true);\n        const result = await this.authService.verifyToken(token);\n        const user = await this.usersService.getUserByEmail(result.email);\n\n        // req에 user 정보 주입 (GraphQL 컨텍스트와 HTTP 컨텍스트 모두에)\n        if (gqlContext.getContext().req) {\n            gqlContext.getContext().req.user = user;\n            gqlContext.getContext().req.token = token;\n            gqlContext.getContext().req.tokenType = result.type;\n        } else {\n            req.user = user;\n            req.token = token;\n            req.tokenType = result.type;\n        }\n\n        return true;\n    }\n}\n\n/**\n * Access 토큰 전용 가드\n * \n * @description Bearer 토큰 중 Access 토큰만을 허용하는 가드입니다.\n * BearerTokenGuard를 상속받아 토큰 유형을 추가로 검증합니다.\n */\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n    /**\n     * Access 토큰 검증 메서드\n     * \n     * @param context - 실행 컨텍스트\n     * @returns 인증 및 토큰 유형 검증 성공 여부\n     * @throws {UnauthorizedException} Access 토큰이 아닐 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        // 1. 현재 경로가 @IsPublic으로 지정되었는지 확인 (BearerTokenGuard와 동일한 방식)\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n\n        if (isPublic === IsPublicEnum.IS_PUBLIC) {\n            // 공개 경로이면 AccessTokenGuard도 즉시 통과\n            return true;\n        }\n\n        // 2. 공개 경로가 아니라면, BearerTokenGuard의 로직 실행\n        // (토큰 추출, 기본 검증. 실패 시 BearerTokenGuard에서 예외 발생)\n        await super.canActivate(context);\n\n        // 3. BearerTokenGuard가 성공적으로 완료되었다면, req 객체를 올바르게 가져옴\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest();\n\n        if (!req) {\n            // 이 경우는 super.canActivate()가 req를 설정하지 않았거나, 컨텍스트에서 req를 찾을 수 없는 예외적 상황\n            throw new UnauthorizedException('Request object not found in AccessTokenGuard.');\n        }\n\n        if (!req.tokenType) {\n            // BearerTokenGuard에서 tokenType을 설정해야 함\n            throw new UnauthorizedException('Token type not found on request.');\n        }\n\n        if (req.tokenType !== 'access') {\n            throw new UnauthorizedException('Access Token이 아닙니다.');\n        }\n\n        return true;\n    }\n}\n\n/**\n * Refresh 토큰 전용 가드\n * \n * @description Bearer 토큰 중 Refresh 토큰만을 허용하는 가드입니다.\n * BearerTokenGuard를 상속받아 토큰 유형을 추가로 검증합니다.\n */\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n    /**\n     * Refresh 토큰 검증 메서드\n     * \n     * @param context - 실행 컨텍스트\n     * @returns 인증 및 토큰 유형 검증 성공 여부\n     * @throws {UnauthorizedException} Refresh 토큰이 아닐 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n\n        // Refresh 토큰 경로는 일반적으로 공개되지 않으므로, 이 조건은 거의 해당되지 않을 수 있습니다.\n        if (isPublic === IsPublicEnum.IS_PUBLIC) {\n            return true;\n        }\n\n        await super.canActivate(context);\n\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest();\n\n        if (!req) {\n            throw new UnauthorizedException('Request object not found in RefreshTokenGuard.');\n        }\n\n        if (!req.tokenType) {\n            throw new UnauthorizedException('Token type not found on request.');\n        }\n\n        if (req.tokenType !== 'refresh') {\n            throw new UnauthorizedException('Refresh Token이 아닙니다.');\n        }\n\n        return true;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatsModule\n\nChatsModule\n\nAppModule -->\n\nChatsModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatsModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ClassSerializerInterceptor, Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PostsModule } from './posts/posts.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostsModel } from './posts/entity/posts.entity';\nimport { UsersModule } from './users/users.module';\nimport { UsersModel } from './users/entity/users.entity';\nimport { AuthModule } from './auth/auth.module';\nimport { CommonModule } from './common/common.module';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { PUBLIC_FOLDER_PATH } from './common/const/path.const';\nimport { ImageModel } from './common/entity/image.entity';\n// import { LogMiddleware } from './common/middleware/log.middleware';\nimport { ChatsModule } from './chats/chats.module';\nimport { ChatsModel } from './chats/entity/chats.entity';\nimport { MessagesModel } from './chats/messages/entity/messages.entity';\nimport { CommentsModel } from './posts/comments/entity/comments.entity';\nimport { CommentsModule } from './posts/comments/comments.module';\nimport { RolesGuard } from './users/guard/roles.guard';\nimport { AccessTokenGuard } from './auth/guard/bearer-token.guard';\nimport { UserFollowersModel } from './users/entity/user-followers.entity';\nimport { RedisModule } from './redis/redis.module';\nimport appConfig from './configs/app.config';\nimport dbConfig from './configs/db.config';\nimport { LogInterceptor } from './common/interceptor/log.interceptor';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { join } from 'path';\nimport depthLimit from 'graphql-depth-limit';\nimport { createComplexityRule, directiveEstimator, simpleEstimator } from 'graphql-query-complexity';\nimport { GraphQLError } from 'graphql';\n\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: join(process.cwd(), 'src/schema.gql'), // 스키마 파일 생성 경로\n      sortSchema: true, // 스키마를 알파벳 순으로 정렬 (선택 사항)\n      playground: true, // 개발 환경에서 GraphQL Playground 활성화\n      debug: true, // 개발 환경에서 디버그 정보 활성화\n      validationRules: [\n        // 1) 최대 깊이 제한 (optional)\n        depthLimit(5),\n\n        // 2) 쿼리 복잡도 제한\n        createComplexityRule({\n          estimators: [\n            // (1) directive-based estimation: @complexity(value) 사용 시\n            directiveEstimator(),\n            // (2) 기본 필드당 1점\n            simpleEstimator({ defaultComplexity: 1 }),\n          ],\n    \n          // 최대 허용 복잡도\n          maximumComplexity: 100,\n    \n          // 실행 후 콜백\n          onComplete: (complexity: number) => {\n            console.log('💡 GraphQL query complexity:', complexity);\n          },\n    \n          // 초과 시 던질 에러\n          createError: (max: number, actual: number) =>\n            new GraphQLError(\n              `Query is too complex: ${actual}. Maximum allowed complexity: ${max}`,\n              { extensions: { code: 'GRAPHQL_COMPLEXITY_LIMIT' } },\n            ),\n        }),\n      ],\n    }),\n    PostsModule,\n    ServeStaticModule.forRoot({\n      // xxx.jpg\n      // rootPath만 있을 시 -> http://localhost:3000/posts/xxx.jpg\n      rootPath: PUBLIC_FOLDER_PATH,\n      // serveRoot를 추가 시 -> http://localhost:3000/public/posts/xxx.jpg\n      serveRoot: '/public',\n    }),\n    ConfigModule.forRoot({\n      isGlobal: true, // 전체적으로 사용하기 위해\n      envFilePath: `src/configs/env/.${process.env.NODE_ENV}.env`,\n      load: [appConfig, dbConfig],\n    }),\n    // TypeOrmModule을 ConfigService를 통해 동적으로 설정합니다.\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        const isDevelopment = process.env.NODE_ENV === 'dev'; // 개발 환경인지 확인\n\n        return {\n          type: 'postgres',\n          host: configService.get('db.host'),\n          port: configService.get('db.port'),\n          username: configService.get('db.username'),\n          password: configService.get('db.password'),\n          database: configService.get('db.database'),\n          entities: [\n            PostsModel,\n            UsersModel,\n            ImageModel,\n            ChatsModel,\n            MessagesModel,\n            CommentsModel,\n            UserFollowersModel,\n          ],\n          // synchronize: true,\n          synchronize: configService.get('db.synchronize', true),\n\n          // --- 로깅 설정 추가 ---\n          // NODE_ENV가 'development'일 때만 상세 로깅을 활성화하거나, ConfigService를 통해 로깅 레벨을 관리할 수 있습니다.\n          logging: isDevelopment ? ['query', 'error'] : ['error'], // 개발 환경에서는 쿼리와 에러 로깅, 그 외에는 에러만 로깅\n          // logging: configService.get('db.loggingLevel', ['query', 'error']), // ConfigService에서 로깅 레벨을 가져올 수도 있습니다.\n          logger: 'advanced-console', // 또는 'simple-console'\n          maxQueryExecutionTime: 1000, // (선택 사항) 1초 이상 소요되는 쿼리 경고 (TypeORM 0.3.0 이상)\n          // --- 로깅 설정 끝 ---\n        };\n      },\n    }),\n    UsersModule,\n    AuthModule,\n    CommonModule,\n    ChatsModule,\n    CommentsModule,\n    RedisModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService, \n  {\n    provide: APP_INTERCEPTOR,\n    useClass: LogInterceptor,\n  },\n  {\n    provide: APP_INTERCEPTOR,\n    useClass: ClassSerializerInterceptor,\n  },\n  {\n    provide: APP_GUARD,\n    useClass: AccessTokenGuard,\n  },\n  {\n    provide: APP_GUARD,\n    useClass: RolesGuard,\n  }\n],\n})\n// export class AppModule implements NestModule {\n//   configure(consumer: MiddlewareConsumer) {\n//     consumer.apply(\n//       LogMiddleware,\n//     ).forRoutes({\n//       path: '*',\n//       method: RequestMethod.ALL,\n//     });\n//   }\n// }\n\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                인증 관련 API 엔드포인트를 제공하는 컨트롤러\n로그인, 회원가입, 토큰 갱신, OAuth 인증 등의 기능을 제공합니다\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                googleAuth\n                            \n                            \n                                    \n                                    \n                                    \n                                googleAuthRedirect\n                            \n                            \n                                    \n                                    \n                                    \n                                kakaoAuth\n                            \n                            \n                                    \n                                    \n                                kakaoAuthLogout\n                            \n                            \n                                    \n                                    \n                                kakaoAuthLogoutRedirect\n                            \n                            \n                                    \n                                    \n                                    \n                                kakaoAuthRedirect\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                postLoginEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                postRegisterEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                postTokenAccess\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                postTokenRefresh\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        googleAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login/google')@UseGuards(GoogleAuthGuard)@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:130\n                        \n                    \n\n\n            \n                \n                        구글 OAuth 로그인을 시작합니다\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        googleAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthRedirect(user: UsersModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/callback')@UseGuards(GoogleAuthGuard)@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:142\n                        \n                    \n\n\n            \n                \n                        구글 OAuth 인증 후 리디렉션되는 콜백 엔드포인트입니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UsersModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    인증된 사용자 정보\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                액세스 토큰과 리프레시 토큰 객체\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        kakaoAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoAuth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login/kakao')@IsPublic(IsPublicEnum.IS_PUBLIC)@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:152\n                        \n                    \n\n\n            \n                \n                        카카오 OAuth 로그인을 시작합니다\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        kakaoAuthLogout\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoAuthLogout(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logout/kakao')@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:176\n                        \n                    \n\n\n            \n                \n                        카카오 계정에서 로그아웃합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    HTTP 응답 객체\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                카카오 로그아웃 페이지로 리디렉션\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        kakaoAuthLogoutRedirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoAuthLogoutRedirect(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('kakao/logout/callback')@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:191\n                        \n                    \n\n\n            \n                \n                        카카오 로그아웃 후 리디렉션되는 콜백 엔드포인트입니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    HTTP 응답 객체\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                로그아웃 완료 메시지가 포함된 HTML\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        kakaoAuthRedirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoAuthRedirect(user: UsersModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('kakao/callback')@IsPublic(IsPublicEnum.IS_PUBLIC)@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:165\n                        \n                    \n\n\n            \n                \n                        카카오 OAuth 인증 후 리디렉션되는 콜백 엔드포인트입니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UsersModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    인증된 사용자 정보\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                액세스 토큰과 리프레시 토큰 객체\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        postLoginEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    postLoginEmail(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login/email')@ApiConsumes('application/x-www-form-urlencoded')@ApiBody({type: LoginDto})@ApiOperation({summary: '로그인', description: '사용자가 이메일, 비밀번호로 로그인합니다. AccessToken과 RefreshToken이 반환됩니다.'})@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:101\n                        \n                    \n\n\n            \n                \n                        이메일과 비밀번호로 로그인합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                액세스 토큰과 리프레시 토큰 객체\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        postRegisterEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    postRegisterEmail(body: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register/email')@ApiConsumes('application/x-www-form-urlencoded')@ApiBody({type: RegisterUserDto})@ApiOperation({summary: '회원가입', description: '사용자가 이메일, 비밀번호, 닉네임을 입력하여 회원가입합니다. AccessToken과 RefreshToken이 반환됩니다.'})@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:118\n                        \n                    \n\n\n            \n                \n                        이메일, 비밀번호, 닉네임으로 회원가입합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    회원가입 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                액세스 토큰과 리프레시 토큰 객체\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        postTokenAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    postTokenAccess(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token/access')@ApiBearerAuth(AuthScheme.REFRESH)@ApiOperation({summary: 'AccessToken 재발급', description: 'login/email 이후, AccessToken을 재발급 받는 엔드포인트입니다.'})@IsPublic(IsPublicEnum.IS_REFRESH_TOKEN)@UseGuards(RefreshTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        액세스 토큰을 재발급합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    HTTP 요청 객체\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { accessToken: any; }\n\n                        \n                            \n                                새로운 액세스 토큰\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        postTokenRefresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    postTokenRefresh(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token/refresh')@ApiBearerAuth(AuthScheme.REFRESH)@ApiOperation({summary: 'RefreshToken 재발급', description: 'login/email 이후, RrefreshToken을 재발급 받는 엔드포인트입니다.'})@IsPublic(IsPublicEnum.IS_REFRESH_TOKEN)@UseGuards(RefreshTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:72\n                        \n                    \n\n\n            \n                \n                        리프레시 토큰을 재발급합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    HTTP 요청 객체\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { refreshToken: any; }\n\n                        \n                            \n                                새로운 리프레시 토큰\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards, Req, Get, Inject, Res } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { RefreshTokenGuard } from './guard/bearer-token.guard';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { IsPublic } from 'src/common/decorator/is-public.decorator';\nimport { IsPublicEnum } from 'src/common/const/is-public.const';\nimport { ApiBearerAuth, ApiBody, ApiConsumes, ApiOperation } from '@nestjs/swagger';\nimport { LoginDto } from './dto/login.dto';\nimport { AuthScheme } from 'src/common/const/auth-schema.const';\nimport { GoogleAuthGuard } from './guard/google-auth.guard';\nimport { User } from 'src/users/decorator/user.decorator';\nimport { UsersModel } from 'src/users/entity/users.entity';\nimport { KakaoAuthGuard } from './guard/kakao-auth.guard';\nimport kakaoConfig from 'src/configs/kakao.config';\nimport { ConfigType } from '@nestjs/config';\nimport { Response } from 'express';\n\n/**\n * 인증 관련 API 엔드포인트를 제공하는 컨트롤러\n * 로그인, 회원가입, 토큰 갱신, OAuth 인증 등의 기능을 제공합니다\n */\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    @Inject(kakaoConfig.KEY)\n    private readonly config: ConfigType\n  ) {}\n\n  /**\n   * 액세스 토큰을 재발급합니다\n   * @param req HTTP 요청 객체\n   * @returns 새로운 액세스 토큰\n   */\n  @Post('token/access')\n  @ApiBearerAuth(AuthScheme.REFRESH)\n  @ApiOperation({ \n    summary: 'AccessToken 재발급', \n    description: 'login/email 이후, AccessToken을 재발급 받는 엔드포인트입니다.' \n  })\n  @IsPublic(IsPublicEnum.IS_REFRESH_TOKEN)\n  @UseGuards(RefreshTokenGuard)\n  postTokenAccess(\n    @Req() req: Request\n  ) {\n    const rawToken = req.headers['authorization'] as string;\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    const newToken = this.authService.rotateToken(token, false);\n\n    /**\n     * {accessToken: {token}}\n     */\n    return {\n      accessToken: newToken,\n    }\n  }\n\n  /**\n   * 리프레시 토큰을 재발급합니다\n   * @param req HTTP 요청 객체\n   * @returns 새로운 리프레시 토큰\n   */\n  @Post('token/refresh')\n  @ApiBearerAuth(AuthScheme.REFRESH)\n  @ApiOperation({ \n    summary: 'RefreshToken 재발급', \n    description: 'login/email 이후, RrefreshToken을 재발급 받는 엔드포인트입니다.' \n  })\n  @IsPublic(IsPublicEnum.IS_REFRESH_TOKEN)\n  @UseGuards(RefreshTokenGuard)\n  postTokenRefresh(\n    @Req() req: Request\n  ) {\n    const rawToken = req.headers['authorization'] as string;\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    const newToken = this.authService.rotateToken(token, true);\n\n    /**\n     * {refreshToken: {token}}\n     */\n    return {\n      refreshToken: newToken,\n    }\n  }\n\n  /**\n   * 이메일과 비밀번호로 로그인합니다\n   * @param loginDto 로그인 정보가 담긴 DTO\n   * @returns 액세스 토큰과 리프레시 토큰 객체\n   */\n  @Post('login/email')\n  @ApiConsumes('application/x-www-form-urlencoded')\n  @ApiBody({ type: LoginDto })\n  @ApiOperation({ \n    summary: '로그인', \n    description: '사용자가 이메일, 비밀번호로 로그인합니다. AccessToken과 RefreshToken이 반환됩니다.' \n  })\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  postLoginEmail(@Body() loginDto: LoginDto) {\n    return this.authService.loginWithEmail(loginDto);\n  }\n\n  /**\n   * 이메일, 비밀번호, 닉네임으로 회원가입합니다\n   * @param body 회원가입 정보가 담긴 DTO\n   * @returns 액세스 토큰과 리프레시 토큰 객체\n   */\n  @Post('register/email')\n  @ApiConsumes('application/x-www-form-urlencoded')\n  @ApiBody({ type: RegisterUserDto })\n  @ApiOperation({ \n    summary: '회원가입', \n    description: '사용자가 이메일, 비밀번호, 닉네임을 입력하여 회원가입합니다. AccessToken과 RefreshToken이 반환됩니다.' \n  })\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  postRegisterEmail(\n    @Body() body: RegisterUserDto,\n  ) {\n    return this.authService.registerWithEmail(body);\n  }\n\n  /**\n   * 구글 OAuth 로그인을 시작합니다\n   */\n  @Get(\"login/google\")\n  @UseGuards(GoogleAuthGuard)\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  googleAuth() {\n    console.log('GET google/login')\n  }\n\n  /**\n   * 구글 OAuth 인증 후 리디렉션되는 콜백 엔드포인트입니다\n   * @param user 인증된 사용자 정보\n   * @returns 액세스 토큰과 리프레시 토큰 객체\n   */\n  @Get(\"google/callback\")\n  @UseGuards(GoogleAuthGuard)\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  googleAuthRedirect(@User() user: UsersModel) {\n    return this.authService.loginUser(user);\n  }\n\n  /**\n   * 카카오 OAuth 로그인을 시작합니다\n   */\n  @Get('login/kakao')\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  @UseGuards(KakaoAuthGuard)\n  kakaoAuth() {\n    // 이 엔드포인트는 KakaoAuthGuard가 리다이렉션 처리합니다.\n    console.log('GET kakao/login');\n  }\n\n  /**\n   * 카카오 OAuth 인증 후 리디렉션되는 콜백 엔드포인트입니다\n   * @param user 인증된 사용자 정보\n   * @returns 액세스 토큰과 리프레시 토큰 객체\n   */\n  @Get('kakao/callback')\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  @UseGuards(KakaoAuthGuard)\n  kakaoAuthRedirect(@User() user: UsersModel) {\n    return this.authService.loginUser(user);\n  }\n\n  /**\n   * 카카오 계정에서 로그아웃합니다\n   * @param res HTTP 응답 객체\n   * @returns 카카오 로그아웃 페이지로 리디렉션\n   */\n  @Get('logout/kakao')\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  kakaoAuthLogout(@Res() res: Response) {\n    const restApiKey = this.config.clientId;\n    // 로그아웃 후 사용자에게 리다이렉트할 URL 설정 (예: 홈 페이지 또는 로그인 페이지)\n    const logoutRedirectUri = this.config.logoutCallbackUrl as string;\n    const logoutUrl = `https://kauth.kakao.com/oauth/logout?client_id=${restApiKey}&logout_redirect_uri=${encodeURIComponent(logoutRedirectUri)}`;\n    return res.redirect(logoutUrl);\n  }\n\n  /**\n   * 카카오 로그아웃 후 리디렉션되는 콜백 엔드포인트입니다\n   * @param res HTTP 응답 객체\n   * @returns 로그아웃 완료 메시지가 포함된 HTML\n   */\n  @Get('kakao/logout/callback')\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  kakaoAuthLogoutRedirect(@Res() res: Response) {\n    res.send('카카오계정이 로그아웃 되었습니다.');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nKakaoStrategy\n\nKakaoStrategy\n\nAuthModule -->\n\nKakaoStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            KakaoStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from 'src/users/users.module';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { ConfigModule } from '@nestjs/config';\nimport googleConfig from 'src/configs/google.config';\nimport kakaoConfig from 'src/configs/kakao.config';\nimport { KakaoStrategy } from './strategies/kakao.strategy';\n\n@Module({\n  imports: [\n    ConfigModule.forFeature(googleConfig),\n    ConfigModule.forFeature(kakaoConfig),\n    JwtModule.register({}),\n    UsersModule,\n  ],\n  exports: [AuthService],\n  controllers: [AuthController],\n  providers: [AuthService, GoogleStrategy, KakaoStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                인증 관련 비즈니스 로직을 처리하는 서비스\n사용자 인증, 토큰 생성 및 검증 기능을 제공합니다\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticateWithEmailAndPassword\n                            \n                            \n                                decodeBasicToken\n                            \n                            \n                                extractTokenFromHeader\n                            \n                            \n                                loginUser\n                            \n                            \n                                    Async\n                                loginWithEmail\n                            \n                            \n                                    Async\n                                registerWithEmail\n                            \n                            \n                                rotateToken\n                            \n                            \n                                signToken\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, usersService: UsersService, config: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authenticateWithEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticateWithEmailAndPassword(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:202\n                        \n                    \n\n\n            \n                \n                        이메일과 비밀번호로 사용자를 인증합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                인증된 사용자 정보\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeBasicToken\n                        \n                    \n                \n            \n            \n                \ndecodeBasicToken(base64String: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Basic 인증 토큰을 디코딩합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                base64String\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Base64로 인코딩된 토큰 문자열\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { email: any; password: any; }\n\n                        \n                            \n                                디코딩된 이메일과 비밀번호 객체\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \nextractTokenFromHeader(header: string, isBearer: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:58\n                        \n                    \n\n\n            \n                \n                        HTTP 헤더에서 토큰을 추출합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                header\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isBearer\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginUser\n                        \n                    \n                \n            \n            \n                \nloginUser(user: Pick)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:189\n                        \n                    \n\n\n            \n                \n                        사용자 로그인에 필요한 액세스 토큰과 리프레시 토큰을 생성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    토큰을 발급받을 사용자 정보\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { accessToken: any; refreshToken: any; }\n\n                        \n                            \n                                액세스 토큰과 리프레시 토큰 객체\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loginWithEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithEmail(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:229\n                        \n                    \n\n\n            \n                \n                        이메일과 비밀번호로 로그인합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                액세스 토큰과 리프레시 토큰 객체\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registerWithEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerWithEmail(user: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:240\n                        \n                    \n\n\n            \n                \n                        이메일로 회원가입 후 로그인합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    회원가입 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                액세스 토큰과 리프레시 토큰 객체\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rotateToken\n                        \n                    \n                \n            \n            \n                \nrotateToken(token: string, isRefreshToken: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:120\n                        \n                    \n\n\n            \n                \n                        기존 토큰을 기반으로 새 토큰을 발급합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    기존 리프레시 토큰\n\n                                            \n                                        \n                                        \n                                                isRefreshToken\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    발급할 토큰 타입 (true: 리프레시 토큰, false: 액세스 토큰)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                새로 발급된 토큰\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signToken\n                        \n                    \n                \n            \n            \n                \nsignToken(user: Pick, isRefreshToken: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:170\n                        \n                    \n\n\n            \n                \n                        JWT 토큰을 생성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isRefreshToken\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:102\n                        \n                    \n\n\n            \n                \n                        JWT 토큰을 검증합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    검증할 JWT 토큰\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                디코딩된 토큰 정보\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersModel } from 'src/users/entity/users.entity';\nimport { UsersService } from 'src/users/users.service';\nimport * as bcrypt from 'bcrypt';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { ConfigType } from '@nestjs/config';\nimport appConfig from 'src/configs/app.config';\nimport { LoginDto } from './dto/login.dto';\n\n/**\n * 인증 관련 비즈니스 로직을 처리하는 서비스\n * 사용자 인증, 토큰 생성 및 검증 기능을 제공합니다\n */\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly jwtService: JwtService,\n        private readonly usersService: UsersService,\n        @Inject(appConfig.KEY)\n        private readonly config: ConfigType\n    ) {}\n\n    /**\n     * 토큰을 사용하게 되는 방식\n     * \n     * 1) 사용자가 로그인 또는 회원가입을 진행하면\n     *      accessToken 과 refreshToken을 발급받는다.\n     * \n     * 2) 로그인 할때는 Basic 토큰과 함께 요청을 보낸다.\n     *      Basic 토큰은 '이메일:비밀번호'를 Base64로 인코딩한 형태이다. (발급)\n     *      예) {authorization: 'Basic {token}'}\n     * \n     * 3) 아무나 접근 할 수 없는 정보 (private route)를 접근 할때는\n     *      accessToken을 Header에 추가해서 요청과 함께 보낸다. (사용)\n     *      예) {authorization: 'Bearer {token}'}\n     * \n     * 4) 토큰 요청을 함께 받은 서버는 토큰 검증을 통해 현재 요청을 보낸\n     *      사용자가 누구인지 알 수 있다.\n     *      예를 들어 현재 로그인한 사용자가 작성한 포스트만 가져오려면\n     *      토큰의 sub 값에 입력되어있는 사용자의 포스트만 따로 필터링 할 수 있다.\n     *      특정 사용자의 토큰이 없다면 다른 사용자의 데이터를 접근 못한다.\n     * \n     * 5) 모든 토큰은 만료기간이 있다. 만료기간이 지나면 새로 토큰을 발급받아야 한다.\n     *      그렇지 않으면 jwtService.verify()에서 인증이 통과 안된다.\n     *      그러니 accessToken 을 새로 발급 받을 수 있는 /auth/token/access 와\n     *      refreshToken을 새로 발급받을 수 있는 /auth/token/refresh 가 필요하다.\n     *      refreshToken 발급 여부는 시스템설계마다 다르다. (만료되면 로그아웃시키고 다시 로그인하도록 할 수 있음.)\n     */\n\n    /**\n     * HTTP 헤더에서 토큰을 추출합니다\n     * @param header Authorization 헤더 값\n     * @param isBearer Bearer 토큰 여부 (true: Bearer, false: Basic)\n     * @returns 추출된 토큰\n     * @throws UnauthorizedException 토큰 형식이 잘못된 경우\n     */\n    extractTokenFromHeader(header: string, isBearer: boolean) {\n        const splitToken = header.split(' ');\n\n        const prefix = isBearer ? 'Bearer' : 'Basic';\n\n        if(splitToken.length !== 2 || splitToken[0] !== prefix) {\n            throw new UnauthorizedException('잘못된 토큰입니다.');\n        }\n\n        const token = splitToken[1];\n\n        return token;\n    }\n\n    /**\n     * Basic 인증 토큰을 디코딩합니다\n     * @param base64String Base64로 인코딩된 토큰 문자열\n     * @returns 디코딩된 이메일과 비밀번호 객체\n     * @throws UnauthorizedException 토큰 형식이 잘못된 경우\n     */\n    decodeBasicToken(base64String: string) {\n        const decoded = Buffer.from(base64String, 'base64').toString('utf8');\n\n        const split = decoded.split(':');\n\n        if(split.length !== 2) {\n            throw new UnauthorizedException('잘못된 유형의 토큰입니다.');\n        }\n\n        const email = split[0];\n        const password = split[1];\n\n        return {\n            email,\n            password,\n        }\n    }\n\n    /**\n     * JWT 토큰을 검증합니다\n     * @param token 검증할 JWT 토큰\n     * @returns 디코딩된 토큰 정보\n     * @throws UnauthorizedException 토큰이 유효하지 않거나 만료된 경우\n     */\n    verifyToken(token: string) {\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return this.jwtService.verify(token, {\n                secret: this.config.jwt.secretKey,\n            });\n        } catch (error) {\n            throw new UnauthorizedException(`${error} : 토큰이 만료되었거나 잘못된 토큰입니다.`);\n        }\n    }\n\n    /**\n     * 기존 토큰을 기반으로 새 토큰을 발급합니다\n     * @param token 기존 리프레시 토큰\n     * @param isRefreshToken 발급할 토큰 타입 (true: 리프레시 토큰, false: 액세스 토큰)\n     * @returns 새로 발급된 토큰\n     * @throws UnauthorizedException 리프레시 토큰이 아닌 경우\n     */\n    rotateToken(token: string, isRefreshToken: boolean) {\n        const decoded = this.verifyToken(token);\n\n        /**\n         * sub: id\n         * email: email,\n         * type: 'access' | 'refresh'\n         */\n        if(decoded.type !== 'refresh') {\n            throw new UnauthorizedException('토큰 재발급은 Refresh 토큰으로만 가능합니다!');\n        }\n\n        return this.signToken({\n            ...decoded\n        }, isRefreshToken);\n    }\n\n    /**\n     * 만들려는 기능\n     * \n     * 1) registerWithEmail\n     *  - email, nickname, password를 입력받고 사용자 생성\n     *  - 생성이 완료되면 accessToken과 refreshToken을 반환한다.\n     *      - 회원가입 후 다시 로그인해주세요 , isRefreshToken: boolean) {\n        const payload = {\n            email: user.email,\n            sub: user.id,\n            type: isRefreshToken ? 'refresh' : 'access',\n        };\n\n        return this.jwtService.sign(payload, {\n            secret: this.config.jwt.secretKey,\n            //seconds\n            expiresIn: isRefreshToken ? 2592000 : 3600,\n        })\n    }\n\n    /**\n     * 사용자 로그인에 필요한 액세스 토큰과 리프레시 토큰을 생성합니다\n     * @param user 토큰을 발급받을 사용자 정보\n     * @returns 액세스 토큰과 리프레시 토큰 객체\n     */\n    loginUser(user: Pick) {\n        return {\n            accessToken: this.signToken(user, false),\n            refreshToken: this.signToken(user, true),\n        }\n    }\n\n    /**\n     * 이메일과 비밀번호로 사용자를 인증합니다\n     * @param loginDto 로그인 정보가 담긴 DTO\n     * @returns 인증된 사용자 정보\n     * @throws UnauthorizedException 사용자가 존재하지 않거나 비밀번호가 일치하지 않는 경우\n     */\n    async authenticateWithEmailAndPassword(loginDto: LoginDto) {\n        const existingUser = await this.usersService.getUserByEmail(loginDto.email);\n\n        if (!existingUser) {\n            throw new UnauthorizedException('존재하지 않는 사용자입니다.');\n        }\n\n        /**\n         * 파라미터\n         * \n         * 1) 입력된 비밀번호\n         * 2) 기존 해시(hash) -> 사용자 정보에 저장되어있는 hash\n         */\n        const passOk = await bcrypt.compare(loginDto.password, existingUser.password);\n\n        if (!passOk) {\n            throw new UnauthorizedException('비밀번호가 틀렸습니다.');\n        }\n\n        return existingUser;\n    }\n\n    /**\n     * 이메일과 비밀번호로 로그인합니다\n     * @param loginDto 로그인 정보가 담긴 DTO\n     * @returns 액세스 토큰과 리프레시 토큰 객체\n     */\n    async loginWithEmail(loginDto: LoginDto) {\n        const existingUser = await this.authenticateWithEmailAndPassword(loginDto);\n\n        return this.loginUser(existingUser);\n    }\n\n    /**\n     * 이메일로 회원가입 후 로그인합니다\n     * @param user 회원가입 정보가 담긴 DTO\n     * @returns 액세스 토큰과 리프레시 토큰 객체\n     */\n    async registerWithEmail(user: RegisterUserDto) {\n        const hash = await bcrypt.hash(\n            user.password,\n            parseInt(this.config.encrypt.hash_Rounds!),\n        );\n\n        const newUser = await this.usersService.createUser({\n            ...user,\n            password: hash,\n        });\n\n        return this.loginUser(newUser);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseModel.html":{"url":"classes/BaseModel.html","title":"class - BaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/base.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                기본 모델 추상 클래스\n모든 엔티티가 공통으로 가져야 할 기본 필드들을 정의\nGraphQL 스키마에서도 사용 가능\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/base.entity.ts:33\n                        \n                    \n\n            \n                \n                    생성일시\n데이터가 처음 생성될 때 자동으로 설정\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/base.entity.ts:17\n                        \n                    \n\n            \n                \n                    기본 키 (Primary Key)\n자동 증가되는 고유 식별자\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/base.entity.ts:25\n                        \n                    \n\n            \n                \n                    수정일시\n데이터가 수정될 때마다 자동으로 업데이트\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from \"@nestjs/graphql\";\nimport { CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n/**\n * 기본 모델 추상 클래스\n * 모든 엔티티가 공통으로 가져야 할 기본 필드들을 정의\n * GraphQL 스키마에서도 사용 가능\n */\n@ObjectType()\nexport abstract class BaseModel {\n    /**\n     * 기본 키 (Primary Key)\n     * 자동 증가되는 고유 식별자\n     */\n    @Field(() => ID)\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    /**\n     * 수정일시\n     * 데이터가 수정될 때마다 자동으로 업데이트\n     */\n    @Field()\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * 생성일시\n     * 데이터가 처음 생성될 때 자동으로 설정\n     */\n    @Field()\n    @CreateDateColumn()\n    createdAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BasePaginationDto.html":{"url":"classes/BasePaginationDto.html","title":"class - BasePaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BasePaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/base-pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                기본 페이지네이션 DTO\n커서 기반 페이지네이션과 오프셋 기반 페이지네이션을 지원\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                order__createdAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                take\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__id__less_than\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__id__more_than\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order__createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['ASC', 'DESC'])@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/base-pagination.dto.ts:41\n                        \n                    \n\n            \n                \n                    정렬 순서 (생성일시 기준)\nASC: 오름차순, DESC: 내림차순\n기본값: ASC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/base-pagination.dto.ts:14\n                        \n                    \n\n            \n                \n                    페이지 번호 (오프셋 기반 페이지네이션)\n선택적 필드\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/base-pagination.dto.ts:49\n                        \n                    \n\n            \n                \n                    한 번에 가져올 데이터 개수\n기본값: 20개\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__id__less_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/base-pagination.dto.ts:22\n                        \n                    \n\n            \n                \n                    커서 기반 페이지네이션 - 이전 페이지 조회\n입력된 ID보다 작은 ID를 가진 데이터들을 조회\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__id__more_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/base-pagination.dto.ts:31\n                        \n                    \n\n            \n                \n                    커서 기반 페이지네이션 - 다음 페이지 조회\n이전 마지막 데이터의 ID\n이 프로퍼티에 입력된 ID 보다 높은 ID 부터 값을 가져오기\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional } from \"class-validator\";\n\n/**\n * 기본 페이지네이션 DTO\n * 커서 기반 페이지네이션과 오프셋 기반 페이지네이션을 지원\n */\nexport class BasePaginationDto {\n    /**\n     * 페이지 번호 (오프셋 기반 페이지네이션)\n     * 선택적 필드\n     */\n    @IsNumber()\n    @IsOptional()\n    page?: number;\n\n    /**\n     * 커서 기반 페이지네이션 - 이전 페이지 조회\n     * 입력된 ID보다 작은 ID를 가진 데이터들을 조회\n     */\n    @IsNumber()\n    @IsOptional()\n    where__id__less_than?: number;\n    \n    /**\n     * 커서 기반 페이지네이션 - 다음 페이지 조회\n     * 이전 마지막 데이터의 ID\n     * 이 프로퍼티에 입력된 ID 보다 높은 ID 부터 값을 가져오기\n     */\n    @IsNumber()\n    @IsOptional()\n    where__id__more_than?: number;\n\n    /**\n     * 정렬 순서 (생성일시 기준)\n     * ASC: 오름차순, DESC: 내림차순\n     * 기본값: ASC\n     */\n    @IsIn(['ASC', 'DESC'])\n    @IsOptional()\n    // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    order__createdAt: 'ASC' | 'DESC' = 'ASC';\n\n    /**\n     * 한 번에 가져올 데이터 개수\n     * 기본값: 20개\n     */\n    @IsNumber()\n    @IsOptional()\n    take: number = 20;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/BasicTokenGuard.html":{"url":"guards/BasicTokenGuard.html","title":"guard - BasicTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    BasicTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/basic-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Basic 토큰 인증 가드\nAuthorization 헤더에서 Basic 토큰을 추출하여 이메일과 비밀번호를 검증합니다.\n구현 기능:\n\n요청 객체에서 authorization header로부터 토큰을 가져옴\nauthService.extractTokenFromHeader를 이용해서 사용할 수 있는 형태의 토큰을 추출\nauthService.decodedBasicToken을 실행해서 email과 password를 추출\nemail과 password를 이용해서 사용자를 가져옴 (authService.authenticateWithEmailAndPassword)\n찾아낸 사용자를 요청 객체에 붙여줌 (req.user = user)\n\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/basic-token.guard.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/basic-token.guard.ts:28\n                        \n                    \n\n\n            \n                \n                        가드 활성화 여부를 확인하는 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                인증 성공 여부\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { AuthService } from \"../auth.service\";\n\n/**\n * Basic 토큰 인증 가드\n * \n * @description HTTP Basic Authentication을 처리하는 가드입니다.\n * Authorization 헤더에서 Basic 토큰을 추출하여 이메일과 비밀번호를 검증합니다.\n * \n * 구현 기능:\n * 1. 요청 객체에서 authorization header로부터 토큰을 가져옴\n * 2. authService.extractTokenFromHeader를 이용해서 사용할 수 있는 형태의 토큰을 추출\n * 3. authService.decodedBasicToken을 실행해서 email과 password를 추출\n * 4. email과 password를 이용해서 사용자를 가져옴 (authService.authenticateWithEmailAndPassword)\n * 5. 찾아낸 사용자를 요청 객체에 붙여줌 (req.user = user)\n */\n@Injectable()\nexport class BasicTokenGuard implements CanActivate {\n    constructor(private readonly authService: AuthService) {}\n\n    /**\n     * 가드 활성화 여부를 확인하는 메서드\n     * \n     * @param context - 실행 컨텍스트\n     * @returns 인증 성공 여부\n     * @throws {UnauthorizedException} 토큰이 없거나 인증에 실패할 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const req = context.switchToHttp().getRequest();\n\n        // { authorization: Basic asdfaldsfadlskfj }\n        const rawToken = req.headers['authorization'];\n\n        if(!rawToken) {\n            throw new UnauthorizedException('토큰이 없습니다!');\n        }\n\n        const token = this.authService.extractTokenFromHeader(rawToken, false);\n\n        const { email, password } = this.authService.decodeBasicToken(token);\n\n        const user = await this.authService.authenticateWithEmailAndPassword({\n            email,\n            password,\n        });\n\n        req.user = user;\n\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/BearerTokenGuard.html":{"url":"guards/BearerTokenGuard.html","title":"guard - BearerTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    BearerTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/bearer-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Bearer 토큰 기본 가드\nHTTP와 GraphQL 요청을 모두 지원하며, @IsPublic 데코레이터로 표시된 경로는 인증을 건너뜁니다.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/bearer-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:30\n                        \n                    \n\n\n            \n                \n                        가드 활성화 여부를 확인하는 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트 (HTTP 또는 GraphQL)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                인증 성공 여부\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { AuthService } from \"../auth.service\";\nimport { UsersService } from \"src/users/users.service\";\nimport { Reflector } from \"@nestjs/core\";\nimport { IS_PUBLIC_KEY } from \"src/common/decorator/is-public.decorator\";\nimport { IsPublicEnum } from \"src/common/const/is-public.const\";\nimport { GqlExecutionContext } from \"@nestjs/graphql\";\n\n/**\n * Bearer 토큰 기본 가드\n * \n * @description JWT Bearer 토큰을 검증하고 사용자 정보를 요청 객체에 주입합니다.\n * HTTP와 GraphQL 요청을 모두 지원하며, @IsPublic 데코레이터로 표시된 경로는 인증을 건너뜁니다.\n */\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n    constructor(\n        protected readonly authService: AuthService,\n        protected readonly usersService: UsersService,\n        protected readonly reflector: Reflector,\n    ) {}\n\n    /**\n     * 가드 활성화 여부를 확인하는 메서드\n     * \n     * @param context - 실행 컨텍스트 (HTTP 또는 GraphQL)\n     * @returns 인증 성공 여부\n     * @throws {UnauthorizedException} 토큰이 없거나 유효하지 않을 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n          ]);\n      \n          if (isPublic) {\n            return true;\n          }\n\n        // GraphQL 요청인지 확인하고, 맞다면 GqlExecutionContext 사용\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest(); // GraphQL 컨텍스트에서 req 가져오기, 없으면 HTTP 컨텍스트 시도\n\n        if (!req) {\n            // 요청 객체를 가져올 수 없는 경우 (예상치 못한 상황)\n            throw new UnauthorizedException('Request object not found in context.');\n        }\n\n        const rawToken = req.headers['authorization']; // 여기서 req.headers 접근\n\n        if (!rawToken) {\n            throw new UnauthorizedException('토큰이 없습니다!');\n        }\n\n        const token = this.authService.extractTokenFromHeader(rawToken, true);\n        const result = await this.authService.verifyToken(token);\n        const user = await this.usersService.getUserByEmail(result.email);\n\n        // req에 user 정보 주입 (GraphQL 컨텍스트와 HTTP 컨텍스트 모두에)\n        if (gqlContext.getContext().req) {\n            gqlContext.getContext().req.user = user;\n            gqlContext.getContext().req.token = token;\n            gqlContext.getContext().req.tokenType = result.type;\n        } else {\n            req.user = user;\n            req.token = token;\n            req.tokenType = result.type;\n        }\n\n        return true;\n    }\n}\n\n/**\n * Access 토큰 전용 가드\n * \n * @description Bearer 토큰 중 Access 토큰만을 허용하는 가드입니다.\n * BearerTokenGuard를 상속받아 토큰 유형을 추가로 검증합니다.\n */\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n    /**\n     * Access 토큰 검증 메서드\n     * \n     * @param context - 실행 컨텍스트\n     * @returns 인증 및 토큰 유형 검증 성공 여부\n     * @throws {UnauthorizedException} Access 토큰이 아닐 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        // 1. 현재 경로가 @IsPublic으로 지정되었는지 확인 (BearerTokenGuard와 동일한 방식)\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n\n        if (isPublic === IsPublicEnum.IS_PUBLIC) {\n            // 공개 경로이면 AccessTokenGuard도 즉시 통과\n            return true;\n        }\n\n        // 2. 공개 경로가 아니라면, BearerTokenGuard의 로직 실행\n        // (토큰 추출, 기본 검증. 실패 시 BearerTokenGuard에서 예외 발생)\n        await super.canActivate(context);\n\n        // 3. BearerTokenGuard가 성공적으로 완료되었다면, req 객체를 올바르게 가져옴\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest();\n\n        if (!req) {\n            // 이 경우는 super.canActivate()가 req를 설정하지 않았거나, 컨텍스트에서 req를 찾을 수 없는 예외적 상황\n            throw new UnauthorizedException('Request object not found in AccessTokenGuard.');\n        }\n\n        if (!req.tokenType) {\n            // BearerTokenGuard에서 tokenType을 설정해야 함\n            throw new UnauthorizedException('Token type not found on request.');\n        }\n\n        if (req.tokenType !== 'access') {\n            throw new UnauthorizedException('Access Token이 아닙니다.');\n        }\n\n        return true;\n    }\n}\n\n/**\n * Refresh 토큰 전용 가드\n * \n * @description Bearer 토큰 중 Refresh 토큰만을 허용하는 가드입니다.\n * BearerTokenGuard를 상속받아 토큰 유형을 추가로 검증합니다.\n */\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n    /**\n     * Refresh 토큰 검증 메서드\n     * \n     * @param context - 실행 컨텍스트\n     * @returns 인증 및 토큰 유형 검증 성공 여부\n     * @throws {UnauthorizedException} Refresh 토큰이 아닐 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n\n        // Refresh 토큰 경로는 일반적으로 공개되지 않으므로, 이 조건은 거의 해당되지 않을 수 있습니다.\n        if (isPublic === IsPublicEnum.IS_PUBLIC) {\n            return true;\n        }\n\n        await super.canActivate(context);\n\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest();\n\n        if (!req) {\n            throw new UnauthorizedException('Request object not found in RefreshTokenGuard.');\n        }\n\n        if (!req.tokenType) {\n            throw new UnauthorizedException('Token type not found on request.');\n        }\n\n        if (req.tokenType !== 'refresh') {\n            throw new UnauthorizedException('Refresh Token이 아닙니다.');\n        }\n\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatsController.html":{"url":"controllers/ChatsController.html","title":"controller - ChatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/chats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chats\n            \n\n\n            \n                Description\n            \n            \n                채팅방 관련 API 엔드포인트를 제공하는 컨트롤러\n채팅방 조회 기능을 제공합니다\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                paginateChat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        paginateChat\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateChat(dto: PaginateChatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '생성된 모든 채팅방 보기', description: 'create_chat 으로 생성된 모든 채팅방을 불러옵니다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/chats/chats.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        채팅방 목록을 페이징하여 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            PaginateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이징 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                페이징된 채팅방 목록\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from '@nestjs/common';\nimport { ChatsService } from './chats.service';\nimport { PaginateChatDto } from './dto/paginate-chat.dto';\nimport { ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { AuthScheme } from 'src/common/const/auth-schema.const';\n\n/**\n * 채팅방 관련 API 엔드포인트를 제공하는 컨트롤러\n * 채팅방 조회 기능을 제공합니다\n */\n@Controller('chats')\nexport class ChatsController {\n  constructor(private readonly chatsService: ChatsService) {}\n\n  /**\n   * 채팅방 목록을 페이징하여 조회합니다\n   * @param dto 페이징 정보가 담긴 DTO\n   * @returns 페이징된 채팅방 목록\n   */\n  @Get()\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n    summary: '생성된 모든 채팅방 보기', \n    description: 'create_chat 으로 생성된 모든 채팅방을 불러옵니다.' \n  })\n  paginateChat(\n    @Query() dto: PaginateChatDto,\n  ) {\n    return this.chatsService.paginateChats(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatsGateway.html":{"url":"classes/ChatsGateway.html","title":"class - ChatsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/chats.gateway.ts\n        \n\n\n            \n                Description\n            \n            \n                채팅 웹소켓 게이트웨이\n실시간 채팅 기능을 제공하는 WebSocket 게이트웨이입니다.\n채팅방 생성, 입장, 메시지 전송 및 귓속말 기능을 지원합니다.\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayInit\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                            \n                                    \n                                    Async\n                                createChat\n                            \n                            \n                                    \n                                    Async\n                                enterChat\n                            \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatsService: ChatsService, messagesService: ChatsMessagesService, authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/chats/chats.gateway.ts:38\n                            \n                        \n\n                \n                    \n                            채팅 게이트웨이 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        chatsService\n                                                  \n                                                        \n                                                                        ChatsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                채팅 서비스\n\n                                                        \n                                                \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        ChatsMessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                메시지 서비스\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                인증 서비스\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                사용자 서비스\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/chats.gateway.ts:58\n                        \n                    \n\n            \n                \n                    WebSocket 서버 인스턴스\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        afterInit\n                        \n                    \n                \n            \n            \n                \nafterInit(server: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chats/chats.gateway.ts:65\n                        \n                    \n\n\n            \n                \n                        게이트웨이 초기화 후 실행되는 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                server\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    WebSocket 서버 인스턴스\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createChat\n                        \n                    \n                \n            \n            \n                \n                        \n                    createChat(data: CreateChatDto, socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('create_chat')\n                \n            \n\n                    \n                        \n                            Defined in src/chats/chats.gateway.ts:128\n                        \n                    \n\n\n            \n                \n                        새 채팅방 생성\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    채팅방 생성 데이터\n\n                                            \n                                        \n                                        \n                                                socket\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    요청한 클라이언트 소켓\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                생성된 채팅방 정보\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        enterChat\n                        \n                    \n                \n            \n            \n                \n                        \n                    enterChat(data: EnterChatDto, socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('enter_chat')\n                \n            \n\n                    \n                        \n                            Defined in src/chats/chats.gateway.ts:148\n                        \n                    \n\n\n            \n                \n                        채팅방 입장\n지정된 채팅방 ID 목록의 유효성을 검사하고,\n유효한 채팅방들에 소켓을 참여시킵니다.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            EnterChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    입장할 채팅방 ID 목록\n\n                                            \n                                        \n                                        \n                                                socket\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    요청한 클라이언트 소켓\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleConnection(socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chats/chats.gateway.ts:87\n                        \n                    \n\n\n            \n                \n                        클라이언트 연결 시 실행되는 메서드\nJWT 토큰을 검증하고 사용자 정보를 소켓에 저장합니다.\n각 사용자를 고유한 룸에 참여시켜 개별 메시지 전송을 가능하게 합니다.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                socket\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    연결된 소켓 (사용자 정보 포함)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                연결 성공 여부\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(socket: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chats/chats.gateway.ts:74\n                        \n                    \n\n\n            \n                \n                        클라이언트 연결 해제 시 실행되는 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                socket\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    연결 해제된 소켓\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage(dto: CreateMessagesDto, socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('send_message')\n                \n            \n\n                    \n                        \n                            Defined in src/chats/chats.gateway.ts:180\n                        \n                    \n\n\n            \n                \n                        메시지 전송\n채팅방 메시지 또는 귓속말을 전송합니다.\n채팅방 메시지는 해당 채팅방의 모든 참여자에게 브로드캐스트되고,\n귓속말은 지정된 사용자에게만 전송됩니다.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateMessagesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    메시지 생성 데이터 (채팅방 ID 또는 귓속말 대상 ID 포함)\n\n                                            \n                                        \n                                        \n                                                socket\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    메시지를 전송하는 클라이언트 소켓\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                생성된 메시지 정보\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedSocket, MessageBody, OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit, SubscribeMessage, WebSocketGateway, WebSocketServer, WsException } from \"@nestjs/websockets\";\nimport { Server, Socket } from \"socket.io\";\nimport { CreateChatDto } from \"./dto/create-chat.dto\";\nimport { ChatsService } from \"./chats.service\";\nimport { EnterChatDto } from \"./dto/enter-chat.dto\";\nimport { UseFilters, UsePipes, ValidationPipe } from \"@nestjs/common\";\nimport { WsErrorFilter } from \"src/common/exception-filter/ws.exception-filter\";\nimport { CreateMessagesDto } from \"./messages/dto/create-messages.dto\";\nimport { ChatsMessagesService } from \"./messages/messages.service\";\nimport { MessagesModel } from \"./messages/entity/messages.entity\";\nimport { UsersModel } from \"src/users/entity/users.entity\";\nimport { AuthService } from \"src/auth/auth.service\";\nimport { UsersService } from \"src/users/users.service\";\n\n/**\n * 채팅 웹소켓 게이트웨이\n * \n * 실시간 채팅 기능을 제공하는 WebSocket 게이트웨이입니다.\n * 채팅방 생성, 입장, 메시지 전송 및 귓속말 기능을 지원합니다.\n * \n * @namespace chats\n */\n@UsePipes(\n    new ValidationPipe({\n      transform: true, \n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n      whitelist: true, \n      forbidNonWhitelisted: true,\n    }),\n  )\n@WebSocketGateway({\n    // ws://localhost:3000/chats\n    namespace: 'chats'\n})\n@UseFilters(WsErrorFilter)\nexport class ChatsGateway implements OnGatewayConnection, OnGatewayInit, OnGatewayDisconnect {\n    /**\n     * 채팅 게이트웨이 생성자\n     * \n     * @param chatsService 채팅 서비스\n     * @param messagesService 메시지 서비스\n     * @param authService 인증 서비스\n     * @param usersService 사용자 서비스\n     */\n    constructor(\n        private readonly chatsService: ChatsService,\n        private readonly messagesService: ChatsMessagesService,\n        private readonly authService: AuthService,\n        private readonly usersService: UsersService,\n    ) {}\n\n    /**\n     * WebSocket 서버 인스턴스\n     */\n    @WebSocketServer()\n    server: Server;\n\n    /**\n     * 게이트웨이 초기화 후 실행되는 메서드\n     * \n     * @param server WebSocket 서버 인스턴스\n     */\n    afterInit(server: any) {\n        console.log(`${server} after gateway init`);\n    }\n\n    /**\n     * 클라이언트 연결 해제 시 실행되는 메서드\n     * \n     * @param socket 연결 해제된 소켓\n     */\n    handleDisconnect(socket: Socket) {\n        console.log(`on disconnect called : ${socket.id}`);\n    }\n\n    /**\n     * 클라이언트 연결 시 실행되는 메서드\n     * \n     * JWT 토큰을 검증하고 사용자 정보를 소켓에 저장합니다.\n     * 각 사용자를 고유한 룸에 참여시켜 개별 메시지 전송을 가능하게 합니다.\n     * \n     * @param socket 연결된 소켓 (사용자 정보 포함)\n     * @returns 연결 성공 여부\n     */\n    async handleConnection(socket: Socket & {user: UsersModel}) {\n        console.log(`on connect called : ${socket.id}`);\n\n        const headers = socket.handshake.headers;\n\n        // Bearer xxxxxx\n        const rawToken = headers['authorization'] as string;\n\n        if (!rawToken) {\n            socket.disconnect();\n        }\n\n        try {\n            const token = this.authService.extractTokenFromHeader(\n                rawToken,\n                true,\n            );\n\n            const payload = this.authService.verifyToken(token);\n            const user = await this.usersService.getUserByEmail(payload.email) as UsersModel;\n\n            socket.user = user;\n\n            // 각 사용자에게 고유한 룸(예: user id)을 할당하여 join 시킵니다.\n            await socket.join(user.id.toString());\n\n            return true;\n        } catch (e) {\n            console.log(e);\n            socket.disconnect();\n        }\n    }\n\n    /**\n     * 새 채팅방 생성\n     * \n     * @param data 채팅방 생성 데이터\n     * @param socket 요청한 클라이언트 소켓\n     * @returns 생성된 채팅방 정보\n     */\n    @SubscribeMessage('create_chat')\n    async createChat(\n        @MessageBody() data: CreateChatDto,\n        @ConnectedSocket() socket: Socket & {user: UsersModel},\n    ) {\n        const chat = await this.chatsService.createChat(\n            data,\n        );\n    }\n\n    /**\n     * 채팅방 입장\n     * \n     * 지정된 채팅방 ID 목록의 유효성을 검사하고,\n     * 유효한 채팅방들에 소켓을 참여시킵니다.\n     * \n     * @param data 입장할 채팅방 ID 목록\n     * @param socket 요청한 클라이언트 소켓\n     * @throws WsException 존재하지 않는 채팅방 ID가 있을 경우\n     */\n    @SubscribeMessage('enter_chat')\n    async enterChat(\n        // 방의 chat ID들을 리스트로 받는다.\n        @MessageBody() data: EnterChatDto,\n        @ConnectedSocket() socket: Socket & {user: UsersModel},\n    ) {\n        for(const chatId of data.chatIds) {\n            const exists = await this.chatsService.checkIfChatExists(chatId);\n\n            if(!exists) {\n                throw new WsException({\n                    code: 100,\n                    message: `존재하지 않는 chat 입니다. chatId: ${chatId}`,\n                });\n            }\n        }\n\n        await socket.join(data.chatIds.map((x) => x.toString()));\n    }\n\n    /**\n     * 메시지 전송\n     * \n     * 채팅방 메시지 또는 귓속말을 전송합니다.\n     * 채팅방 메시지는 해당 채팅방의 모든 참여자에게 브로드캐스트되고,\n     * 귓속말은 지정된 사용자에게만 전송됩니다.\n     * \n     * @param dto 메시지 생성 데이터 (채팅방 ID 또는 귓속말 대상 ID 포함)\n     * @param socket 메시지를 전송하는 클라이언트 소켓\n     * @throws WsException 존재하지 않는 채팅방 또는 사용자일 경우\n     * @returns 생성된 메시지 정보\n     */\n    @SubscribeMessage('send_message')\n    async sendMessage(\n        @MessageBody() dto: CreateMessagesDto,\n        @ConnectedSocket() socket: Socket & {user: UsersModel},\n    ) {\n        if(dto.chatId !== undefined && dto.chatId !== null) {\n            const chatExists = await this.chatsService.checkIfChatExists(dto.chatId);\n\n            if(!chatExists) {\n                throw new WsException({\n                    code: 100,\n                    message: `존재하지 않는 chat 입니다. chatId: ${dto.chatId}`,\n                });\n            }\n        }\n\n        if(dto.whisperTargetId !== undefined && dto.whisperTargetId !== null) {\n            const userExists = await this.usersService.checkIfUserExists(dto.whisperTargetId);\n\n            if(!userExists) {\n                throw new WsException({\n                    code: 100,\n                    message: `존재하지 않는 user 입니다. whisperTargetId: ${dto.whisperTargetId}`,\n                });\n            }\n        }\n\n        const message = await this.messagesService.createMessage(dto, socket.user.id) as MessagesModel;\n\n        // broadcast\n        if (message.chat && message.chat.id) {\n            // 해당 채팅방에 join된 모든 사용자에게 메시지 전달.\n            socket.to(message.chat.id.toString()).emit('receive_message', message.message);\n        }\n\n        // 귓속말인 경우 (whisperTargetId가 있을 때)\n        if (dto.whisperTargetId) {\n            // 대상 사용자는 연결 시 자신을 user id로 join 했으므로, 해당 룸으로 emit 하면 귓속말이 전달됩니다.\n            this.server.to(dto.whisperTargetId.toString()).emit('receive_whisper', {\n                message: message.message,\n                from: socket.user.id,\n            });\n    \n            // 발신자에게도 귓속말 전송(본인도 귓속말 내역을 확인하도록)\n            socket.emit('receive_whisper', {\n                message: message.message,\n                from: socket.user.id,\n            });\n        }\n\n        // room 통신 (특정 room에 속해있는 소켓들에게 브로드캐스트)\n        // this.server.in(message.chatId.toString()).emit('receive_message', message.message);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatsMessagesService.html":{"url":"injectables/ChatsMessagesService.html","title":"injectable - ChatsMessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatsMessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/messages/messages.service.ts\n        \n\n\n            \n                Description\n            \n            \n                채팅 메시지 관련 비즈니스 로직을 처리하는 서비스\n메시지 생성 및 조회 기능을 제공합니다\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                paginateMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesRepository: Repository, commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/chats/messages/messages.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMessage(dto: CreateMessagesDto, authorId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chats/messages/messages.service.ts:37\n                        \n                    \n\n\n            \n                \n                        새로운 메시지를 생성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateMessagesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    메시지 생성 정보가 담긴 DTO\n\n                                            \n                                        \n                                        \n                                                authorId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    작성자 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                생성된 메시지 정보\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paginateMessages\n                        \n                    \n                \n            \n            \n                \npaginateMessages(dto: BasePaginationDto, overrideFindOptions: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chats/messages/messages.service.ts:73\n                        \n                    \n\n\n            \n                \n                        메시지 목록을 페이징하여 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            BasePaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이징 정보가 담긴 DTO\n\n                                            \n                                        \n                                        \n                                                overrideFindOptions\n                                            \n                                                            FindManyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    추가적인 조회 옵션\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                페이징된 메시지 목록\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { MessagesModel } from \"./entity/messages.entity\";\nimport { FindManyOptions, Repository } from \"typeorm\";\nimport { CommonService } from \"src/common/common.service\";\nimport { BasePaginationDto } from \"src/common/dto/base-pagination.dto\";\nimport { CreateMessagesDto } from \"./dto/create-messages.dto\";\n\n/**\n * 메시지 저장 데이터 인터페이스\n */\ninterface SavePayload {\n    author: { id: number };\n    message: string;\n    chat?: { id: number };\n    whisperTargetUser?: { id: number };\n}\n\n/**\n * 채팅 메시지 관련 비즈니스 로직을 처리하는 서비스\n * 메시지 생성 및 조회 기능을 제공합니다\n */\n@Injectable()\nexport class ChatsMessagesService {\n    constructor(\n        @InjectRepository(MessagesModel)\n        private readonly messagesRepository: Repository,\n        private readonly commonService: CommonService,\n    ) {}\n\n    /**\n     * 새로운 메시지를 생성합니다\n     * @param dto 메시지 생성 정보가 담긴 DTO\n     * @param authorId 작성자 ID\n     * @returns 생성된 메시지 정보\n     */\n    async createMessage(\n        dto: CreateMessagesDto,\n        authorId: number,\n    ) {\n        const savePayload: SavePayload = {\n            author: { id: authorId },\n            message: dto.message,\n        };\n\n        if (dto.chatId !== undefined && dto.chatId !== null) {\n            savePayload.chat = { id: dto.chatId };\n        }\n\n        if (dto.whisperTargetId !== undefined && dto.whisperTargetId !== null) {\n            savePayload.whisperTargetUser = { id: dto.whisperTargetId };\n        }\n    \n        const message = await this.messagesRepository.save(savePayload);\n\n        return this.messagesRepository.findOne({\n            where: {\n                id: message.id,\n            },\n            relations: {\n                chat: true,\n                whisperTargetUser: true,\n            }\n        });\n    }\n\n    /**\n     * 메시지 목록을 페이징하여 조회합니다\n     * @param dto 페이징 정보가 담긴 DTO\n     * @param overrideFindOptions 추가적인 조회 옵션\n     * @returns 페이징된 메시지 목록\n     */\n    paginateMessages(\n        dto: BasePaginationDto,\n        overrideFindOptions: FindManyOptions,\n    ) {\n        return this.commonService.paginate(\n            dto,\n            this.messagesRepository,\n            overrideFindOptions,\n            'messages',\n        )\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatsModel.html":{"url":"entities/ChatsModel.html","title":"entity - ChatsModel","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatsModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/entity/chats.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                채팅방 엔티티 모델\n사용자 간의 채팅방 또는 대화를 나타냅니다\n참여자와 그들의 메시지를 포함합니다\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                messages\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MessagesModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, message => message.chat)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/entity/chats.entity.ts:26\n                        \n                    \n\n            \n                \n                    이 채팅에서 보낸 메시지들\nMessagesModel과의 일대다(One-to-Many) 관계\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.chats)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/entity/chats.entity.ts:19\n                        \n                    \n\n            \n                \n                    이 채팅에 참여하는 사용자들\nUsersModel과의 다대다(Many-to-Many) 관계\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BaseModel } from \"src/common/entity/base.entity\";\nimport { UsersModel } from \"src/users/entity/users.entity\";\nimport { Entity, ManyToMany, OneToMany } from \"typeorm\";\nimport { MessagesModel } from \"../messages/entity/messages.entity\";\n\n/**\n * 채팅방 엔티티 모델\n * \n * 사용자 간의 채팅방 또는 대화를 나타냅니다\n * 참여자와 그들의 메시지를 포함합니다\n */\n@Entity()\nexport class ChatsModel extends BaseModel {\n    /**\n     * 이 채팅에 참여하는 사용자들\n     * UsersModel과의 다대다(Many-to-Many) 관계\n     */\n    @ManyToMany(() => UsersModel, (user) => user.chats)\n    users: UsersModel[];\n\n    /**\n     * 이 채팅에서 보낸 메시지들\n     * MessagesModel과의 일대다(One-to-Many) 관계\n     */\n    @OneToMany(() => MessagesModel, (message) => message.chat)\n    messages: MessagesModel[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatsModule.html":{"url":"modules/ChatsModule.html","title":"module - ChatsModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatsModule\n\n\n\ncluster_ChatsModule_providers\n\n\n\ncluster_ChatsModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nChatsModule\n\nChatsModule\n\nChatsModule -->\n\nAuthModule->ChatsModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nChatsModule -->\n\nCommonModule->ChatsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nChatsModule -->\n\nUsersModule->ChatsModule\n\n\n\n\n\nChatsMessagesService\n\nChatsMessagesService\n\nChatsModule -->\n\nChatsMessagesService->ChatsModule\n\n\n\n\n\nChatsService\n\nChatsService\n\nChatsModule -->\n\nChatsService->ChatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chats/chats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatsMessagesService\n                        \n                        \n                            ChatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatsController\n                        \n                        \n                            MessagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatsService } from './chats.service';\nimport { ChatsController } from './chats.controller';\nimport { ChatsGateway } from './chats.gateway';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ChatsModel } from './entity/chats.entity';\nimport { CommonModule } from 'src/common/common.module';\nimport { MessagesModel } from './messages/entity/messages.entity';\nimport { ChatsMessagesService } from './messages/messages.service';\nimport { MessagesController } from './messages/messages.controller';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ChatsModel, MessagesModel]),\n    CommonModule,\n    AuthModule,\n    UsersModule,\n  ],\n  controllers: [ChatsController, MessagesController],\n  providers: [ChatsGateway, ChatsService, ChatsMessagesService],\n})\nexport class ChatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatsService.html":{"url":"injectables/ChatsService.html","title":"injectable - ChatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/chats.service.ts\n        \n\n\n            \n                Description\n            \n            \n                채팅방 관련 비즈니스 로직을 처리하는 서비스\n채팅방 생성 및 조회 기능을 제공합니다\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfChatExists\n                            \n                            \n                                    Async\n                                createChat\n                            \n                            \n                                paginateChats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatsRepository: Repository, commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/chats/chats.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkIfChatExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfChatExists(chatId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chats/chats.service.ts:60\n                        \n                    \n\n\n            \n                \n                        특정 ID의 채팅방 존재 여부를 확인합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                chatId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    채팅방 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                채팅방 존재 여부\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createChat\n                        \n                    \n                \n            \n            \n                \n                        \n                    createChat(dto: CreateChatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chats/chats.service.ts:43\n                        \n                    \n\n\n            \n                \n                        새로운 채팅방을 생성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    채팅방 생성 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                생성된 채팅방 정보\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paginateChats\n                        \n                    \n                \n            \n            \n                \npaginateChats(dto: PaginateChatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chats/chats.service.ts:26\n                        \n                    \n\n\n            \n                \n                        채팅방 목록을 페이징하여 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            PaginateChatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이징 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                페이징된 채팅방 목록\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ChatsModel } from './entity/chats.entity';\nimport { Repository } from 'typeorm';\nimport { CreateChatDto } from './dto/create-chat.dto';\nimport { CommonService } from 'src/common/common.service';\nimport { PaginateChatDto } from './dto/paginate-chat.dto';\n\n/**\n * 채팅방 관련 비즈니스 로직을 처리하는 서비스\n * 채팅방 생성 및 조회 기능을 제공합니다\n */\n@Injectable()\nexport class ChatsService {\n    constructor(\n        @InjectRepository(ChatsModel)\n        private readonly chatsRepository: Repository,\n        private readonly commonService: CommonService,\n    ){}\n\n    /**\n     * 채팅방 목록을 페이징하여 조회합니다\n     * @param dto 페이징 정보가 담긴 DTO\n     * @returns 페이징된 채팅방 목록\n     */\n    paginateChats(dto: PaginateChatDto) {\n        return this.commonService.paginate(dto,\n            this.chatsRepository,\n            {\n                relations: {\n                    users: true,\n                }\n            },\n            'chats',\n        )\n    }\n\n    /**\n     * 새로운 채팅방을 생성합니다\n     * @param dto 채팅방 생성 정보가 담긴 DTO\n     * @returns 생성된 채팅방 정보\n     */\n    async createChat(dto: CreateChatDto) {\n        const chat = await this.chatsRepository.save({\n            users: dto.userIds.map((id) => ({id})),\n        });\n\n        return this.chatsRepository.findOne({\n            where: {\n                id: chat.id,\n            }\n        });\n    }\n\n    /**\n     * 특정 ID의 채팅방 존재 여부를 확인합니다\n     * @param chatId 채팅방 ID\n     * @returns 채팅방 존재 여부\n     */\n    async checkIfChatExists(chatId: number) {\n        const exists = this.chatsRepository.exists({\n            where: {\n                id: chatId,\n            }\n        });\n\n        return exists;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts/:postId/comments\n            \n\n\n            \n                Description\n            \n            \n                댓글 관련 API 엔드포인트를 제공하는 컨트롤러\n게시물에 대한 댓글 CRUD 엔드포인트를 관리합니다\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getComments\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                patchComment\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                postComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(postId: number, commentId: number, qr: QueryRunner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':commentId')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '댓글 삭제', description: '댓글 Id와 일치하는 댓글을 삭제합니다.'})@UseGuards(IsCommentMineOrAdminGuard)@UseInterceptors(TransactionInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/comments/comments.controller.ts:138\n                        \n                    \n\n\n            \n                \n                        특정 게시물의 특정 댓글을 삭제합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 ID\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    트랜잭션 처리를 위한 쿼리 러너\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                삭제 결과\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComment(postId: number, commentId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':commentId')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '특정 댓글 가져오기', description: '입력된 댓글 Id와 일치하는 댓글을 가져옵니다.'})@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/comments/comments.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        특정 게시물의 특정 댓글을 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                댓글 정보\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComments(postId: number, query: PaginateCommentsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '모든 댓글 가져오기', description: '작성된 모든 댓글을 가져옵니다.'})@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/comments/comments.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        특정 게시물의 모든 댓글을 페이징하여 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                query\n                                            \n                                                            PaginateCommentsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이징 정보가 담긴 쿼리 파라미터\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                페이징된 댓글 목록\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        patchComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchComment(postId: number, commentId: number, body: UpdateCommentsDto, qr: QueryRunner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':commentId')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '댓글 수정', description: '댓글 Id와 일치하는 댓글을 수정합니다.'})@UseGuards(IsCommentMineOrAdminGuard)@UseInterceptors(TransactionInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/comments/comments.controller.ts:114\n                        \n                    \n\n\n            \n                \n                        특정 게시물의 특정 댓글을 수정합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 ID\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateCommentsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 수정 정보가 담긴 DTO\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    트랜잭션 처리를 위한 쿼리 러너\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                수정된 댓글 정보\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        postComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    postComment(postId: number, body: CreateCommentsDto, user: UsersModel, qr: QueryRunner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '댓글 작성', description: '댓글 하나를 작성합니다.'})@UseInterceptors(TransactionInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/comments/comments.controller.ts:85\n                        \n                    \n\n\n            \n                \n                        특정 게시물에 새로운 댓글을 작성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            CreateCommentsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 생성 정보가 담긴 DTO\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            UsersModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    현재 인증된 사용자 정보\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    트랜잭션 처리를 위한 쿼리 러너\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                생성된 댓글 정보\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Query, UseGuards, UseInterceptors } from '@nestjs/common';\nimport { CommentsService } from './comments.service';\nimport { PaginateCommentsDto } from './dto/paginate-comments.dto';\nimport { CreateCommentsDto } from './dto/create-comments.dto';\nimport { User } from 'src/users/decorator/user.decorator';\nimport { UsersModel } from 'src/users/entity/users.entity';\nimport { UpdateCommentsDto } from './dto/update-comments.dto';\nimport { IsPublic } from 'src/common/decorator/is-public.decorator';\nimport { IsPublicEnum } from 'src/common/const/is-public.const';\nimport { IsCommentMineOrAdminGuard } from './guard/is-comment-mine-or-admin.guard';\nimport { TransactionInterceptor } from 'src/common/interceptor/transaction.interceptor';\nimport { QueryRunnerDecorator } from 'src/common/decorator/query-runner.decorator';\nimport { QueryRunner } from 'typeorm';\nimport { PostsService } from '../posts.service';\nimport { ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { AuthScheme } from 'src/common/const/auth-schema.const';\n\n/**\n * 댓글 관련 API 엔드포인트를 제공하는 컨트롤러\n * 게시물에 대한 댓글 CRUD 엔드포인트를 관리합니다\n */\n@Controller('posts/:postId/comments')\nexport class CommentsController {\n  constructor(\n    private readonly commentsService: CommentsService,\n    private readonly postService: PostsService,\n  ) {}\n\n  /**\n   * 특정 게시물의 모든 댓글을 페이징하여 조회합니다\n   * @param postId 게시물 ID\n   * @param query 페이징 정보가 담긴 쿼리 파라미터\n   * @returns 페이징된 댓글 목록\n   */\n  @Get()\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '모든 댓글 가져오기', \n      description: '작성된 모든 댓글을 가져옵니다.' \n  })\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  getComments(\n    @Param('postId', ParseIntPipe) postId: number,\n    @Query() query: PaginateCommentsDto\n  ) {\n    return this.commentsService.paginateComments(query, postId);\n  }\n\n  /**\n   * 특정 게시물의 특정 댓글을 조회합니다\n   * @param postId 게시물 ID\n   * @param commentId 댓글 ID\n   * @returns 댓글 정보\n   */\n  @Get(':commentId')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '특정 댓글 가져오기', \n      description: '입력된 댓글 Id와 일치하는 댓글을 가져옵니다.' \n  })\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  async getComment(\n    @Param('postId', ParseIntPipe) postId: number,\n    @Param('commentId', ParseIntPipe) commentId: number,\n  ) {\n    const { comment } = await this.commentsService.getCommentById(postId, commentId);\n    return comment;\n  }\n\n  /**\n   * 특정 게시물에 새로운 댓글을 작성합니다\n   * @param postId 게시물 ID\n   * @param body 댓글 생성 정보가 담긴 DTO\n   * @param user 현재 인증된 사용자 정보\n   * @param qr 트랜잭션 처리를 위한 쿼리 러너\n   * @returns 생성된 댓글 정보\n   */\n  @Post()\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '댓글 작성', \n      description: '댓글 하나를 작성합니다.' \n  })\n  @UseInterceptors(TransactionInterceptor)\n  async postComment(\n    @Param('postId', ParseIntPipe) postId: number,\n    @Body() body: CreateCommentsDto,\n    @User() user: UsersModel,\n    @QueryRunnerDecorator() qr: QueryRunner,\n  ) {\n    const resp = await this.commentsService.createComment(body, postId, user, qr);\n\n    await this.postService.incrementFollowerCount(postId, 'commentCount', 1, qr);\n\n    return resp;\n  }\n\n  /**\n   * 특정 게시물의 특정 댓글을 수정합니다\n   * @param postId 게시물 ID\n   * @param commentId 댓글 ID\n   * @param body 댓글 수정 정보가 담긴 DTO\n   * @param qr 트랜잭션 처리를 위한 쿼리 러너\n   * @returns 수정된 댓글 정보\n   */\n  @Patch(':commentId')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '댓글 수정', \n      description: '댓글 Id와 일치하는 댓글을 수정합니다.' \n  })\n  @UseGuards(IsCommentMineOrAdminGuard)\n  @UseInterceptors(TransactionInterceptor)\n  patchComment(\n    @Param('postId', ParseIntPipe) postId: number,\n    @Param('commentId', ParseIntPipe) commentId: number,\n    @Body() body: UpdateCommentsDto,\n    @QueryRunnerDecorator() qr: QueryRunner,\n  ) {\n    return this.commentsService.updateComment(body, postId, commentId, qr);\n  }\n\n  /**\n   * 특정 게시물의 특정 댓글을 삭제합니다\n   * @param postId 게시물 ID\n   * @param commentId 댓글 ID\n   * @param qr 트랜잭션 처리를 위한 쿼리 러너\n   * @returns 삭제 결과\n   */\n  @Delete(':commentId')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '댓글 삭제', \n      description: '댓글 Id와 일치하는 댓글을 삭제합니다.' \n  })\n  @UseGuards(IsCommentMineOrAdminGuard)\n  @UseInterceptors(TransactionInterceptor)\n  async deleteComment(\n    @Param('postId', ParseIntPipe) postId: number,\n    @Param('commentId', ParseIntPipe) commentId: number,\n    @QueryRunnerDecorator() qr: QueryRunner,\n  ) {\n    const resp = await this.commentsService.deleteComment(postId, commentId, qr);\n\n    await this.postService.decrementFollowerCount(postId, 'commentCount', 1, qr);\n\n    return resp;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CommentsModel.html":{"url":"entities/CommentsModel.html","title":"entity - CommentsModel","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CommentsModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/comments/entity/comments.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                댓글 엔티티 모델\n게시물에 대한 사용자 댓글을 나타냅니다\n댓글 내용, 작성자, 연관된 게시물 및 참여 지표를 저장합니다\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                comment\n                            \n                            \n                                    \n                                    \n                                likeCount\n                            \n                            \n                                    \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/comments/entity/comments.entity.ts:20\n                        \n                    \n\n            \n                \n                    댓글 작성자\nUsersModel과의 다대일(Many-to-One) 관계\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/comments/entity/comments.entity.ts:34\n                        \n                    \n\n            \n                \n                    댓글의 텍스트 내용\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        likeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/comments/entity/comments.entity.ts:43\n                        \n                    \n\n            \n                \n                    이 댓글에 받은 좋아요 수\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostsModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/comments/entity/comments.entity.ts:27\n                        \n                    \n\n            \n                \n                    이 댓글이 속한 게시물\nPostsModel과의 다대일(Many-to-One) 관계\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsNumber, IsString } from \"class-validator\";\nimport { BaseModel } from \"src/common/entity/base.entity\";\nimport { PostsModel } from \"src/posts/entity/posts.entity\";\nimport { UsersModel } from \"src/users/entity/users.entity\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\n\n/**\n * 댓글 엔티티 모델\n * \n * 게시물에 대한 사용자 댓글을 나타냅니다\n * 댓글 내용, 작성자, 연관된 게시물 및 참여 지표를 저장합니다\n */\n@Entity()\nexport class CommentsModel extends BaseModel {\n    /**\n     * 댓글 작성자\n     * UsersModel과의 다대일(Many-to-One) 관계\n     */\n    @ManyToOne(() => UsersModel, (user) => user.comments)\n    author: UsersModel;\n\n    /**\n     * 이 댓글이 속한 게시물\n     * PostsModel과의 다대일(Many-to-One) 관계\n     */\n    @ManyToOne(() => PostsModel, (post) => post.comments)\n    post: PostsModel;\n\n    /**\n     * 댓글의 텍스트 내용\n     */\n    @Column()\n    @IsString()\n    comment: string;\n\n    /**\n     * 이 댓글에 받은 좋아요 수\n     */\n    @Column({\n        default: 0,\n    })\n    @IsNumber()\n    likeCount: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_CommentsModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nAuthModule->CommentsModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nCommentsModule -->\n\nCommonModule->CommentsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nCommentsModule -->\n\nPostsModule->CommentsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCommentsModule -->\n\nUsersModule->CommentsModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/comments.module.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { CommentsService } from './comments.service';\nimport { CommentsController } from './comments.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CommentsModel } from './entity/comments.entity';\nimport { CommonModule } from 'src/common/common.module';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { PostExistsMiddleware } from './middleware/post-exists.middleware';\nimport { PostsModule } from '../posts.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      CommentsModel,\n    ]),\n    CommonModule,\n    AuthModule,\n    UsersModule,\n    PostsModule,\n  ],\n  controllers: [CommentsController],\n  providers: [CommentsService],\n})\nexport class CommentsModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(PostExistsMiddleware).forRoutes(CommentsController);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/comments/comments.service.ts\n        \n\n\n            \n                Description\n            \n            \n                댓글 관련 비즈니스 로직을 처리하는 서비스\n게시물에 대한 댓글 CRUD 기능을 제공합니다\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                getCommentById\n                            \n                            \n                                getRepository\n                            \n                            \n                                    Async\n                                isCommentMine\n                            \n                            \n                                    Async\n                                paginateComments\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository, commonService: CommonService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/comments/comments.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(dto: CreateCommentsDto, postId: number, author: UsersModel, qr?: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/comments.service.ts:92\n                        \n                    \n\n\n            \n                \n                        새로운 댓글을 생성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCommentsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 생성 정보가 담긴 DTO\n\n                                            \n                                        \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                author\n                                            \n                                                            UsersModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    작성자 정보\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    쿼리 러너 (트랜잭션 처리용)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                생성된 댓글 정보\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(postId: number, commentId: number, qr?: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/comments.service.ts:151\n                        \n                    \n\n\n            \n                \n                        댓글을 삭제합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 ID\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    쿼리 러너 (트랜잭션 처리용)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                삭제 결과\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCommentById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentById(postId: number, commentId: number, qr?: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/comments.service.ts:54\n                        \n                    \n\n\n            \n                \n                        특정 게시물의 특정 댓글을 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 ID\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    쿼리 러너 (트랜잭션 처리용)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                댓글 정보와 해당 댓글의 리포지토리\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepository\n                        \n                    \n                \n            \n            \n                \ngetRepository(qr?: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/comments.service.ts:80\n                        \n                    \n\n\n            \n                \n                        쿼리 러너 유무에 따라 적절한 리포지토리를 반환합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    쿼리 러너 (트랜잭션 처리용)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                댓글 모델 리포지토리\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isCommentMine\n                        \n                    \n                \n            \n            \n                \n                        \n                    isCommentMine(userId: number, commentId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/comments.service.ts:167\n                        \n                    \n\n\n            \n                \n                        해당 댓글이 특정 사용자의 것인지 확인합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    사용자 ID\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                사용자의 댓글인 경우 true, 아닌 경우 false\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginateComments\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateComments(dto: PaginateCommentsDto, postId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/comments.service.ts:30\n                        \n                    \n\n\n            \n                \n                        특정 게시물에 대한 댓글 목록을 페이징하여 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            PaginateCommentsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이징 정보가 담긴 DTO\n\n                                            \n                                        \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                페이징된 댓글 목록\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateComment(dto: UpdateCommentsDto, postId: number, commentId: number, qr?: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/comments.service.ts:118\n                        \n                    \n\n\n            \n                \n                        댓글을 수정합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateCommentsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 수정 정보가 담긴 DTO\n\n                                            \n                                        \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                commentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    댓글 ID\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    쿼리 러너 (트랜잭션 처리용)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                수정된 댓글 정보\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { PaginateCommentsDto } from './dto/paginate-comments.dto';\nimport { CommonService } from 'src/common/common.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CommentsModel } from './entity/comments.entity';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { CreateCommentsDto } from './dto/create-comments.dto';\nimport { UsersModel } from 'src/users/entity/users.entity';\nimport { DEFAULT_COMMENT_FIND_OPTIONS } from './const/default-comment-find-options.const';\nimport { UpdateCommentsDto } from './dto/update-comments.dto';\n\n/**\n * 댓글 관련 비즈니스 로직을 처리하는 서비스\n * 게시물에 대한 댓글 CRUD 기능을 제공합니다\n */\n@Injectable()\nexport class CommentsService {\n    constructor(\n    @InjectRepository(CommentsModel)\n    private readonly commentsRepository: Repository,\n    private readonly commonService: CommonService,\n    ) {}\n\n    /**\n     * 특정 게시물에 대한 댓글 목록을 페이징하여 조회합니다\n     * @param dto 페이징 정보가 담긴 DTO\n     * @param postId 게시물 ID\n     * @returns 페이징된 댓글 목록\n     */\n    async paginateComments(dto: PaginateCommentsDto, postId: number) {\n        return this.commonService.paginate(\n            dto,\n            this.commentsRepository,\n            {\n                where: {\n                    post: {\n                        id: postId,\n                    }\n                },\n                ...DEFAULT_COMMENT_FIND_OPTIONS,\n            },\n            `posts/${postId}/comments`,\n            );\n    }\n\n    /**\n     * 특정 게시물의 특정 댓글을 조회합니다\n     * @param postId 게시물 ID\n     * @param commentId 댓글 ID\n     * @param qr 쿼리 러너 (트랜잭션 처리용)\n     * @returns 댓글 정보와 해당 댓글의 리포지토리\n     * @throws BadRequestException 댓글이 존재하지 않을 경우\n     */\n    async getCommentById(postId: number, commentId: number, qr?: QueryRunner) {\n        const repository = this.getRepository(qr);\n        const comment = await repository.findOne({\n            where: {\n                post: {\n                    id: postId,\n                },\n                id: commentId,\n            },\n            ...DEFAULT_COMMENT_FIND_OPTIONS,\n        });\n\n        if (!comment) {\n            throw new BadRequestException(\n                `id: ${commentId} Comment는 존재하지 않습니다.`\n            )\n        }\n\n        return { repository, comment };\n    }\n\n    /**\n     * 쿼리 러너 유무에 따라 적절한 리포지토리를 반환합니다\n     * @param qr 쿼리 러너 (트랜잭션 처리용)\n     * @returns 댓글 모델 리포지토리\n     */\n    getRepository(qr?: QueryRunner) {\n        return qr ? qr.manager.getRepository(CommentsModel) : this.commentsRepository;\n      }\n\n    /**\n     * 새로운 댓글을 생성합니다\n     * @param dto 댓글 생성 정보가 담긴 DTO\n     * @param postId 게시물 ID\n     * @param author 작성자 정보\n     * @param qr 쿼리 러너 (트랜잭션 처리용)\n     * @returns 생성된 댓글 정보\n     */\n    async createComment(\n        dto: CreateCommentsDto,\n        postId: number,\n        author: UsersModel,\n        qr?: QueryRunner,\n    ) {\n        const repository = this.getRepository(qr);\n\n        return repository.save({\n            ...dto,\n            post: {\n                id: postId,\n            },\n            author,\n        });\n    }\n\n    /**\n     * 댓글을 수정합니다\n     * @param dto 댓글 수정 정보가 담긴 DTO\n     * @param postId 게시물 ID\n     * @param commentId 댓글 ID\n     * @param qr 쿼리 러너 (트랜잭션 처리용)\n     * @returns 수정된 댓글 정보\n     * @throws BadRequestException 댓글이 존재하지 않을 경우\n     */\n    async updateComment(\n        dto: UpdateCommentsDto,\n        postId: number,\n        commentId: number,\n        qr?: QueryRunner\n    ) {\n        const { repository } = await this.getCommentById(postId, commentId, qr);\n        \n        const prevComment = await repository.preload({\n            id: commentId,\n            ...dto,\n        });\n\n        if (!prevComment) {\n            throw new BadRequestException(`댓글을 찾을 수 없습니다. id: ${commentId}`);\n        }\n\n        const newComment = await repository.save(\n            {\n                ...prevComment,\n            }\n        );\n\n        return newComment;\n    }\n\n    /**\n     * 댓글을 삭제합니다\n     * @param postId 게시물 ID\n     * @param commentId 댓글 ID\n     * @param qr 쿼리 러너 (트랜잭션 처리용)\n     * @returns 삭제 결과\n     */\n    async deleteComment(\n        postId: number,\n        commentId: number,\n        qr?: QueryRunner\n    ) {\n        const { repository } = await this.getCommentById(postId, commentId, qr);\n\n        return await repository.delete(commentId);\n    }\n\n    /**\n     * 해당 댓글이 특정 사용자의 것인지 확인합니다\n     * @param userId 사용자 ID\n     * @param commentId 댓글 ID\n     * @returns 사용자의 댓글인 경우 true, 아닌 경우 false\n     */\n    async isCommentMine(userId: number, commentId: number) {\n        return await this.commentsRepository.exist({\n            where: {\n                id: commentId,\n                author: {\n                    id: userId,\n                }\n            },\n            relations: {\n                author: true,\n            }\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommonController.html":{"url":"controllers/CommonController.html","title":"controller - CommonController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommonController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/common.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                common\n            \n\n\n            \n                Description\n            \n            \n                공통 기능을 제공하는 컨트롤러\n이미지 업로드 등의 공통 기능을 처리합니다.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                postImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        postImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    postImage(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/common/common.controller.ts:21\n                        \n                    \n\n\n            \n                \n                        이미지를 업로드합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    업로드된 파일 정보\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { fileName: any; }\n\n                        \n                            \n                                업로드된 파일명\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { CommonService } from './common.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n/**\n * 공통 기능을 제공하는 컨트롤러\n * \n * 이미지 업로드 등의 공통 기능을 처리합니다.\n */\n@Controller('common')\nexport class CommonController {\n  constructor(private readonly commonService: CommonService) {}\n\n  /**\n   * 이미지를 업로드합니다\n   * @param file 업로드된 파일 정보\n   * @returns 업로드된 파일명\n   */\n  @Post('image')\n  @UseInterceptors(FileInterceptor('image'))\n  postImage(\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return {\n      fileName: file.filename,\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_imports\n\n\n\ncluster_CommonModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nAuthModule->CommonModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCommonModule -->\n\nUsersModule->CommonModule\n\n\n\n\n\nCommonService \n\nCommonService \n\nCommonService  -->\n\nCommonModule->CommonService \n\n\n\n\n\nCommonService\n\nCommonService\n\nCommonModule -->\n\nCommonService->CommonModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommonService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommonController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommonService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Module } from '@nestjs/common';\nimport { CommonService } from './common.service';\nimport { CommonController } from './common.controller';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { extname } from 'path';\nimport * as multer from 'multer';\nimport {v4 as uuid} from 'uuid';\nimport { existsSync, mkdirSync } from 'fs';\nimport { TEMP_FOLDER_PATH } from './const/path.const';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UsersModule } from 'src/users/users.module';\n\n// 업로드 경로가 존재하지 않으면 생성 (recursive 옵션으로 상위 폴더까지 생성)\nif (!existsSync(TEMP_FOLDER_PATH)) {\n  mkdirSync(TEMP_FOLDER_PATH, { recursive: true });\n}\n\n@Module({\n  imports: [\n    MulterModule.register({\n      limits: {\n        // 바이트 단위로 입력\n        fileSize: 1024 * 1024 * 10,\n      },\n      fileFilter: (req, file, cb) => {\n        /**\n         * cb(에러, boolean)\n         * \n         * 첫 번째 파라미터에는 에러가 있을 경우 에러 정보를 넣어준다.\n         * 두 번째 파라미터는 파일을 받을지 말지 boolean을 넣어준다.\n         */\n\n        // xxx.jpg -> jpg(확장자)만 가져옴\n        const ext = extname(file.originalname);\n\n        if(ext !== '.jpg' && ext !== '.jpeg' && ext !== '.png') {\n          return cb(\n            new BadRequestException('jpg/jpeg/png 파일만 업로드 가능합니다.'),\n            false,\n          );\n        }\n\n        return cb(null, true);\n      },\n      storage: multer.diskStorage({\n        destination: function(req, res, cb) {\n          cb(null, TEMP_FOLDER_PATH);\n        },\n        filename: function(req, file, cb) {\n          cb(null, `${uuid()}${extname(file.originalname)}`)\n        }\n      }),\n    }),\n    AuthModule,\n    UsersModule,\n  ],\n  controllers: [CommonController],\n  providers: [CommonService],\n  exports: [CommonService],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommonService.html":{"url":"injectables/CommonService.html","title":"injectable - CommonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/common.service.ts\n        \n\n\n            \n                Description\n            \n            \n                공통 기능을 제공하는 서비스\n페이지네이션, 필터링 등의 공통 기능을 처리합니다.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                composeFindOptions\n                            \n                            \n                                    Private\n                                    Async\n                                cursorPaginate\n                            \n                            \n                                    Private\n                                    Async\n                                pagePaginate\n                            \n                            \n                                paginate\n                            \n                            \n                                    Private\n                                parseWhereFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/common/common.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        composeFindOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    composeFindOptions(dto: BasePaginationDto, additionalWhere?: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/common.service.ts:154\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        페이지네이션을 위한 조회 옵션을 구성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            BasePaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이지네이션 옵션\n\n                                            \n                                        \n                                        \n                                                additionalWhere\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    추가 조건\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     FindManyOptions\n\n                        \n                            \n                                구성된 조회 옵션\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        cursorPaginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    cursorPaginate(dto: BasePaginationDto, repository: Repository, overrideFindOptions: FindManyOptions, path: string, additionalWhere?: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/common.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                                    R\n                            \n                        \n                    \n\n            \n                \n                        커서 기반 페이지네이션 결과를 반환합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            BasePaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    페이지네이션 옵션\n\n                                            \n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    대상 리포지토리\n\n                                            \n                                        \n                                        \n                                                overrideFindOptions\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    추가 조회 옵션\n\n                                            \n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    API 경로\n\n                                            \n                                        \n                                        \n                                                additionalWhere\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    추가 조건\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                커서 기반 페이지네이션 결과\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        pagePaginate\n                        \n                    \n                \n            \n            \n                \n                        \n                    pagePaginate(dto: BasePaginationDto, repository: Repository, overrideFindOptions: FindManyOptions, additionalWhere?: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/common.service.ts:64\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                                    R\n                            \n                        \n                    \n\n            \n                \n                        페이지 번호 기반 페이지네이션 결과를 반환합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            BasePaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    페이지네이션 옵션\n\n                                            \n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    대상 리포지토리\n\n                                            \n                                        \n                                        \n                                                overrideFindOptions\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    추가 조회 옵션\n\n                                            \n                                        \n                                        \n                                                additionalWhere\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    추가 조건\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                페이지 기반 페이지네이션 결과\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paginate\n                        \n                    \n                \n            \n            \n                \npaginate(dto: BasePaginationDto, repository: Repository, overrideFindOptions: FindManyOptions, path: string, additionalWhere?: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/common.service.ts:31\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                                    R\n                            \n                        \n                    \n\n            \n                \n                        페이지네이션 결과를 반환합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            BasePaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    페이지네이션 옵션\n\n                                            \n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    대상 리포지토리\n\n                                            \n                                        \n                                        \n                                                overrideFindOptions\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    추가 조회 옵션\n\n                                            \n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    API 경로\n\n                                            \n                                        \n                                        \n                                                additionalWhere\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    추가 조건\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                페이지 또는 커서 기반 페이지네이션 결과\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseWhereFilter\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseWhereFilter(key: string, value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/common.service.ts:199\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        필터 키와 값을 파싱하여 TypeORM 조건으로 변환합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    필터 키\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    필터 값\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     FindOptionsWhere | FindOptionsOrder\n\n                        \n                            \n                                TypeORM 조건 객체\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { BasePaginationDto } from './dto/base-pagination.dto';\nimport { FindManyOptions, FindOptionsOrder, FindOptionsWhere, Repository } from 'typeorm';\nimport { BaseModel } from './entity/base.entity';\nimport { FILTER_MAPPER } from './const/filter-mapper.const';\nimport { ConfigType } from '@nestjs/config';\nimport appConfig from 'src/configs/app.config';\n\n/**\n * 공통 기능을 제공하는 서비스\n * \n * 페이지네이션, 필터링 등의 공통 기능을 처리합니다.\n */\n@Injectable()\nexport class CommonService {\n    constructor(\n        @Inject(appConfig.KEY)\n        private readonly config: ConfigType\n    ){}\n\n    /**\n     * 페이지네이션 결과를 반환합니다\n     * @param dto 페이지네이션 옵션\n     * @param repository 대상 리포지토리\n     * @param overrideFindOptions 추가 조회 옵션\n     * @param path API 경로\n     * @param additionalWhere 추가 조건\n     * @returns 페이지 또는 커서 기반 페이지네이션 결과\n     */\n    paginate(\n        dto: BasePaginationDto,\n        repository: Repository,\n        overrideFindOptions: FindManyOptions = {},\n        path: string,\n        additionalWhere?: FindOptionsWhere,\n      ): Promise {\n        if(dto.page) {\n          return this.pagePaginate(\n            dto,\n            repository,\n            overrideFindOptions,\n            additionalWhere,\n          );\n        } else {\n          return this.cursorPaginate(\n            dto,\n            repository,\n            overrideFindOptions,\n            path,\n            additionalWhere,\n          );\n        }\n    }\n\n    /**\n     * 페이지 번호 기반 페이지네이션 결과를 반환합니다\n     * @param dto 페이지네이션 옵션\n     * @param repository 대상 리포지토리\n     * @param overrideFindOptions 추가 조회 옵션\n     * @param additionalWhere 추가 조건\n     * @returns 페이지 기반 페이지네이션 결과\n     */\n    private async pagePaginate(\n        dto: BasePaginationDto,\n        repository: Repository,\n        overrideFindOptions: FindManyOptions = {},\n        additionalWhere?: FindOptionsWhere,\n      ): Promise {\n        const findOptions = this.composeFindOptions(dto, additionalWhere);\n      \n        const [data, count] = await repository.findAndCount({\n          ...findOptions,\n          ...overrideFindOptions,\n        });\n      \n        // 여기서 반환하는 객체의 구조가 R과 일치한다고 가정합니다.\n        return {\n          data,\n          total: count,\n        } as unknown as R;\n    }\n    \n    /**\n     * 커서 기반 페이지네이션 결과를 반환합니다\n     * @param dto 페이지네이션 옵션\n     * @param repository 대상 리포지토리\n     * @param overrideFindOptions 추가 조회 옵션\n     * @param path API 경로\n     * @param additionalWhere 추가 조건\n     * @returns 커서 기반 페이지네이션 결과\n     */\n    private async cursorPaginate(\n        dto: BasePaginationDto,\n        repository: Repository,\n        overrideFindOptions: FindManyOptions = {},\n        path: string,\n        additionalWhere?: FindOptionsWhere,\n      ): Promise {\n        const findOptions = this.composeFindOptions(dto, additionalWhere);\n      \n        const results = await repository.find({\n          ...findOptions,\n          ...overrideFindOptions,\n        });\n      \n        const whereMoreThanName = 'where__id__more_than';\n        const whereLessThanName = 'where__id__less_than';\n      \n        const lastItem = results.length > 0 && results.length === dto.take ? results[results.length - 1] : null;\n      \n        const protocol = this.config.http.protocol;\n        const host = this.config.http.host;\n      \n        const nextURL = lastItem && new URL(`${protocol}://${host}/${path}`);\n      \n        if (nextURL) {\n          for (const key of Object.keys(dto)) {\n            if (dto[key]) {\n              if (key !== whereMoreThanName && key !== whereLessThanName) {\n                nextURL.searchParams.append(key, dto[key]);\n              }\n            }\n          }\n      \n          let key: string | null = null;\n      \n          if (dto.order__createdAt === 'ASC') {\n            key = whereMoreThanName;\n          } else {\n            key = whereLessThanName;\n          }\n      \n          nextURL.searchParams.append(key, lastItem.id.toString());\n        }\n      \n        // 페이지 기반이 아닌 경우에는 이 구조로 반환하게 됩니다.\n        return {\n          data: results,\n          cursor: {\n            after: lastItem?.id ?? null,\n          },\n          count: results.length,\n          next: nextURL?.toString() ?? null,\n        } as unknown as R;\n    }\n\n    /**\n     * 페이지네이션을 위한 조회 옵션을 구성합니다\n     * @param dto 페이지네이션 옵션\n     * @param additionalWhere 추가 조건\n     * @returns 구성된 조회 옵션\n     */\n    private composeFindOptions(\n        dto: BasePaginationDto,\n        additionalWhere?: FindOptionsWhere,\n    ) : FindManyOptions {\n        /**\n         * where\n         * order,\n         * take,\n         * skip -> page 기반일때만,\n         */\n\n        let where: FindOptionsWhere = additionalWhere ? { ...additionalWhere } : {};\n        let order: FindOptionsOrder = {};\n        \n        // dto를 plain object로 변환\n        const plainDto = JSON.parse(JSON.stringify(dto));\n        for(const [key, value] of Object.entries(plainDto)) {\n            if(key.startsWith('where__')) {\n                where = {\n                    ...where,\n                    ...this.parseWhereFilter(key, value),\n                }\n            } else if(key.startsWith('order__')) {\n                order = {\n                    ...order,\n                    ...this.parseWhereFilter(key, value),\n                }\n            }\n        }\n\n        return {\n            where,\n            order,\n            take: dto.take,\n            skip: dto.page ? dto.take * (dto.page - 1) : undefined,\n        }\n    }\n\n    /**\n     * 필터 키와 값을 파싱하여 TypeORM 조건으로 변환합니다\n     * @param key 필터 키\n     * @param value 필터 값\n     * @returns TypeORM 조건 객체\n     * @throws BadRequestException 필터 형식이 잘못된 경우\n     */\n    private parseWhereFilter(key: string, value: any) : FindOptionsWhere | FindOptionsOrder {\n        const options: FindOptionsWhere = {};\n\n        const split = key.split('__');\n\n        if(split.length !== 2 && split.length !== 3) {\n            throw new BadRequestException(\n                `where 필터는 '__'로 split했을 때 길이가 2 또는 3이어야 합니다 - 문제되는 키값 : ${key}`\n            );\n        }\n\n        if(split.length === 2) {\n            const [_, field] = split;\n\n            options[field] = value;\n        } else {\n            const [_, field, operator] = split;\n\n            // const values = value.toString().split(',');\n\n            // if(operator === 'between') {\n            //     options[field] = FILTER_MAPPER[operator](values[0], values[1]);\n            // } else {\n            //     options[field] = FILTER_MAPPER[operator](value);\n            // }\n            if(operator === 'i_like') {\n                options[field] = FILTER_MAPPER[operator](`%${value}%`);\n            } else {\n                options[field] = FILTER_MAPPER[operator](value);\n            }\n        }\n\n        return options;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatDto.html":{"url":"classes/CreateChatDto.html","title":"class - CreateChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/dto/create-chat.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                채팅방 생성 DTO\n새로운 채팅방을 생성할 때 참여할 사용자들의 ID 목록을 받음\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                userIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/dto/create-chat.dto.ts:14\n                        \n                    \n\n            \n                \n                    채팅방에 참여할 사용자 ID 배열\n각 요소는 숫자(사용자 ID)여야 함\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNumber } from \"class-validator\";\n\n/**\n * 채팅방 생성 DTO\n * 새로운 채팅방을 생성할 때 참여할 사용자들의 ID 목록을 받음\n */\nexport class CreateChatDto {\n    /**\n     * 채팅방에 참여할 사용자 ID 배열\n     * 각 요소는 숫자(사용자 ID)여야 함\n     */\n    @IsArray()\n    @IsNumber({}, {each: true})\n    userIds: number[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentsDto.html":{"url":"classes/CreateCommentsDto.html","title":"class - CreateCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/comments/dto/create-comments.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                댓글 생성 DTO\n새로운 댓글을 생성할 때 필요한 데이터를 정의\n\n            \n\n            \n                Extends\n            \n            \n                            PickType(CommentsModel, [\n    'comment'  // 댓글 내용\n])\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '댓글 내용'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/comments/dto/create-comments.dto.ts:17\n                        \n                    \n\n            \n                \n                    댓글 내용\nCommentsModel에서 상속받은 필드를 명시적으로 재선언\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from \"@nestjs/mapped-types\";\nimport { CommentsModel } from \"../entity/comments.entity\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * 댓글 생성 DTO\n * 새로운 댓글을 생성할 때 필요한 데이터를 정의\n */\nexport class CreateCommentsDto extends PickType(CommentsModel, [\n    'comment'  // 댓글 내용\n]) {\n    /**\n     * 댓글 내용\n     * CommentsModel에서 상속받은 필드를 명시적으로 재선언\n     */\n    @ApiProperty({ description: '댓글 내용' })\n    comment: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessagesDto.html":{"url":"classes/CreateMessagesDto.html","title":"class - CreateMessagesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessagesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/messages/dto/create-messages.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                메시지 생성 DTO\n일반 채팅 메시지와 귓속말 메시지 생성을 모두 지원\n\n            \n\n            \n                Extends\n            \n            \n                            PickType(MessagesModel, [\n    'message',  // 메시지 내용\n])\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                chatId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                whisperTargetId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        chatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/messages/dto/create-messages.dto.ts:26\n                        \n                    \n\n            \n                \n                    채팅방 ID\n일반 채팅 메시지를 보낼 때 사용 (선택적)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        whisperTargetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/messages/dto/create-messages.dto.ts:18\n                        \n                    \n\n            \n                \n                    귓속말 대상 사용자 ID\n귓속말을 보낼 때만 사용 (선택적)\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from \"@nestjs/mapped-types\";\nimport { MessagesModel } from \"../entity/messages.entity\";\nimport { IsNumber, IsOptional } from \"class-validator\";\n\n/**\n * 메시지 생성 DTO\n * 일반 채팅 메시지와 귓속말 메시지 생성을 모두 지원\n */\nexport class CreateMessagesDto extends PickType(MessagesModel, [\n    'message',  // 메시지 내용\n]) {\n    /**\n     * 귓속말 대상 사용자 ID\n     * 귓속말을 보낼 때만 사용 (선택적)\n     */\n    @IsNumber()\n    @IsOptional()\n    whisperTargetId?: number;\n\n    /**\n     * 채팅방 ID\n     * 일반 채팅 메시지를 보낼 때 사용 (선택적)\n     */\n    @IsNumber()\n    @IsOptional()\n    chatId?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                포스트 생성 DTO\n새로운 포스트를 생성할 때 필요한 데이터를 정의\n\n            \n\n            \n                Extends\n            \n            \n                            PickType(PostsModel, ['title', 'content'] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                images\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '포스트 내용'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:23\n                        \n                    \n\n            \n                \n                    포스트 내용\nPostsModel에서 상속받은 필드를 명시적으로 재선언\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '포스트에 첨부할 이미지 URL 배열', required: false, default: undefined})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:36\n                        \n                    \n\n            \n                \n                    포스트에 첨부할 이미지 URL 배열\n선택적 필드로, 기본값은 빈 배열\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '포스트 제목'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:16\n                        \n                    \n\n            \n                \n                    포스트 제목\nPostsModel에서 상속받은 필드를 명시적으로 재선언\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from \"@nestjs/mapped-types\";\nimport { PostsModel } from \"../entity/posts.entity\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * 포스트 생성 DTO\n * 새로운 포스트를 생성할 때 필요한 데이터를 정의\n */\nexport class CreatePostDto extends PickType(PostsModel, ['title', 'content'] as const) {\n    /**\n     * 포스트 제목\n     * PostsModel에서 상속받은 필드를 명시적으로 재선언\n     */\n  @ApiProperty({ description: '포스트 제목' })\n  title: string;\n\n  /**\n   * 포스트 내용\n   * PostsModel에서 상속받은 필드를 명시적으로 재선언\n   */\n  @ApiProperty({ description: '포스트 내용' })\n  content: string;\n\n  /**\n   * 포스트에 첨부할 이미지 URL 배열\n   * 선택적 필드로, 기본값은 빈 배열\n   */\n  @ApiProperty({\n    description: '포스트에 첨부할 이미지 URL 배열',\n    required: false,\n    default: [],\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  images: string[] = [];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostImageDto.html":{"url":"classes/CreatePostImageDto.html","title":"class - CreatePostImageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostImageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/image/dto/create-image.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                포스트 이미지 생성 DTO\nImageModel에서 필요한 필드들만 선택하여 사용\n\n            \n\n            \n                Extends\n            \n            \n                            PickType(ImageModel, [\n    'path',      // 이미지 파일 경로\n    'post',      // 연관된 포스트\n    'order',     // 이미지 순서\n    'type',      // 이미지 타입\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from \"@nestjs/mapped-types\";\nimport { ImageModel } from \"src/common/entity/image.entity\";\n\n/**\n * 포스트 이미지 생성 DTO\n * ImageModel에서 필요한 필드들만 선택하여 사용\n */\nexport class CreatePostImageDto extends PickType(ImageModel, [\n    'path',      // 이미지 파일 경로\n    'post',      // 연관된 포스트\n    'order',     // 이미지 순서\n    'type',      // 이미지 타입\n]) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostsSeeder.html":{"url":"classes/CreatePostsSeeder.html","title":"class - CreatePostsSeeder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostsSeeder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seeds/create-posts.seeder.ts\n        \n\n\n            \n                Description\n            \n            \n                포스트 데이터 시더\n개발 및 테스트를 위한 대량의 포스트 데이터를 생성\n\n            \n\n\n            \n                Implements\n            \n            \n                        Seeder\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run(dataSource: DataSource, factoryManager: SeederFactoryManager)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/seeds/create-posts.seeder.ts:17\n                        \n                    \n\n\n            \n                \n                        시드 데이터 생성 실행\n총 500,000개의 포스트를 5,000개씩 청크 단위로 생성하여 메모리 사용량 최적화\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    TypeORM 데이터 소스\n\n                                            \n                                        \n                                        \n                                                factoryManager\n                                            \n                                                        SeederFactoryManager\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    팩토리 매니저\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Seeder, SeederFactoryManager } from 'typeorm-extension';\nimport { DataSource } from 'typeorm';\nimport { PostsModel } from '../../posts/entity/posts.entity';\n\n/**\n * 포스트 데이터 시더\n * 개발 및 테스트를 위한 대량의 포스트 데이터를 생성\n */\nexport default class CreatePostsSeeder implements Seeder {\n  /**\n   * 시드 데이터 생성 실행\n   * 총 500,000개의 포스트를 5,000개씩 청크 단위로 생성하여 메모리 사용량 최적화\n   * \n   * @param dataSource TypeORM 데이터 소스\n   * @param factoryManager 팩토리 매니저\n   */\n  public async run(\n    dataSource: DataSource,\n    factoryManager: SeederFactoryManager\n  ): Promise {\n    // // PostsModel 팩토리를 가져와서 500,000개 생성,저장\n    // const postFactory = factoryManager.get(PostsModel);\n    // await postFactory.saveMany(500_000);\n\n    const postFactory = factoryManager.get(PostsModel);\n    const total = 500_000;      // 총 생성할 포스트 수\n    const chunkSize = 5_000;    // 한 번에 처리할 청크 크기\n\n    // 청크 단위로 포스트 생성하여 메모리 효율성 확보\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnterChatDto.html":{"url":"classes/EnterChatDto.html","title":"class - EnterChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnterChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/dto/enter-chat.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                채팅방 입장 DTO\n하나 이상의 채팅방에 동시 입장할 때 사용\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                chatIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chatIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/dto/enter-chat.dto.ts:13\n                        \n                    \n\n            \n                \n                    입장할 채팅방 ID 배열\n각 요소는 숫자(채팅방 ID)여야 함\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from \"class-validator\";\n\n/**\n * 채팅방 입장 DTO\n * 하나 이상의 채팅방에 동시 입장할 때 사용\n */\nexport class EnterChatDto {\n    /**\n     * 입장할 채팅방 ID 배열\n     * 각 요소는 숫자(채팅방 ID)여야 함\n     */\n    @IsNumber({}, {each: true})\n    chatIds: number[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthGuard.html":{"url":"injectables/GoogleAuthGuard.html","title":"injectable - GoogleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/google-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                구글 인증 가드\nPassport의 google 전략을 사용합니다.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard(\"google\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/google-auth.guard.ts:18\n                        \n                    \n\n\n            \n                \n                        가드 활성화 여부를 확인하는 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                인증 성공 여부\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * 구글 인증 가드\n * \n * @description 구글 OAuth 2.0을 통한 사용자 인증을 처리하는 가드입니다.\n * Passport의 google 전략을 사용합니다.\n */\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard(\"google\") {\n  /**\n   * 가드 활성화 여부를 확인하는 메서드\n   * \n   * @param context - 실행 컨텍스트\n   * @returns 인증 성공 여부\n   */\n  async canActivate(context: any): Promise {\n    const result = (await super.canActivate(context)) as boolean;\n    return result;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                구글 OAuth 인증을 처리하는 전략 클래스\n구글 계정으로 로그인 및 회원가입을 처리합니다\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authorizationParams\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigType<>, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authorizationParams\n                        \n                    \n                \n            \n            \n                \nauthorizationParams()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google.strategy.ts:31\n                        \n                    \n\n\n            \n                \n                        리프레시 토큰을 얻기 위한 인증 파라미터를 설정합니다\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                구글 OAuth 인증 파라미터\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google.strategy.ts:45\n                        \n                    \n\n\n            \n                \n                        구글 인증 후 사용자 정보를 검증하고 처리합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    구글로부터 받은 액세스 토큰\n\n                                            \n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    구글로부터 받은 리프레시 토큰\n\n                                            \n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    구글로부터 받은 사용자 프로필 정보\n\n                                            \n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    인증 완료 콜백 함수\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { ConfigType } from '@nestjs/config'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { Profile, Strategy, VerifyCallback } from 'passport-google-oauth20'\nimport googleConfig from 'src/configs/google.config'\nimport { UsersService } from 'src/users/users.service'\n\n/**\n * 구글 OAuth 인증을 처리하는 전략 클래스\n * 구글 계정으로 로그인 및 회원가입을 처리합니다\n */\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(\n    @Inject(googleConfig.KEY)\n    private readonly config: ConfigType,\n    private usersService: UsersService,\n  ) {\n    super({\n      clientID: config.clientId as string,\n      clientSecret: config.clientSecret as string,\n      callbackURL: config.callbackUrl as string,\n      scope: ['email', 'profile'],\n    })\n  }\n\n  /**\n   * 리프레시 토큰을 얻기 위한 인증 파라미터를 설정합니다\n   * @returns 구글 OAuth 인증 파라미터\n   */\n  authorizationParams(): {[key: string]: string; } {\n    return ({\n      access_type: 'offline',\n      prompt: 'select_account',\n    });\n  }\n\n  /**\n   * 구글 인증 후 사용자 정보를 검증하고 처리합니다\n   * @param accessToken 구글로부터 받은 액세스 토큰\n   * @param refreshToken 구글로부터 받은 리프레시 토큰\n   * @param profile 구글로부터 받은 사용자 프로필 정보\n   * @param done 인증 완료 콜백 함수\n   */\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    done: VerifyCallback,\n  ) {\n    const { id, displayName, emails } = profile;\n    const googleId = id;\n    const email = emails && emails.length > 0 ? emails[0].value : '';\n\n    // 사용자를 조회하거나 생성하는 로직을 실행합니다.\n    const user = await this.usersService.findOrCreateByGoogle({\n        email,\n        displayName,\n        googleId,\n    });\n\n    done(null, user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception-filter/http.exception-filter.ts\n        \n\n\n            \n                Description\n            \n            \n                HTTP 예외 필터\nHTTP 요청 처리 중 발생하는 예외를 전역적으로 처리합니다.\n예외 정보를 일관된 형태로 클라이언트에게 응답합니다.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exception-filter/http.exception-filter.ts:20\n                        \n                    \n\n\n            \n                \n                        예외 처리 메서드\nHTTP 예외를 캐치하여 구조화된 에러 응답을 생성합니다.\n상태 코드, 에러 메시지, 타임스탬프, 요청 경로 등을 포함합니다.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    발생한 HTTP 예외\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    실행 컨텍스트 호스트\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpException } from \"@nestjs/common\";\n\n/**\n * HTTP 예외 필터\n * \n * HTTP 요청 처리 중 발생하는 예외를 전역적으로 처리합니다.\n * 예외 정보를 일관된 형태로 클라이언트에게 응답합니다.\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    /**\n     * 예외 처리 메서드\n     * \n     * HTTP 예외를 캐치하여 구조화된 에러 응답을 생성합니다.\n     * 상태 코드, 에러 메시지, 타임스탬프, 요청 경로 등을 포함합니다.\n     * \n     * @param exception 발생한 HTTP 예외\n     * @param host 실행 컨텍스트 호스트\n     */\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n        const res = exception.getResponse();\n        const error = typeof res === 'object' && (res as any).error ? (res as any).error : exception.message;\n        const message = typeof res === 'object' && (res as any).message ? (res as any).message : exception.message;\n\n        response.status(status).json({\n            statusCode: status,\n            error,        // 예: \"Bad Request\"\n            message,      // 예: \"테스트\"\n            timeStamp: new Date().toLocaleString('kr'),\n            path: request.url,\n        });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ImageModel.html":{"url":"entities/ImageModel.html","title":"entity - ImageModel","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ImageModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entity/image.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                이미지 엔티티 모델 (ImageModel)\n시스템에서 사용되는 이미지 정보를 나타냅니다. BaseModel을 상속받습니다.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                path\n                            \n                            \n                                    \n                                    Optional\n                                post\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/image.entity.ts:39\n                        \n                    \n\n            \n                \n                    이미지 순서\n여러 이미지가 있을 경우 표시되는 순서를 나타냅니다.\n기본값은 0이며, 선택적으로 사용될 수 있습니다.\n정수형(Int)입니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/image.entity.ts:77\n                        \n                    \n\n            \n                \n                    이미지 경로\n이미지 파일의 실제 저장 경로 또는 접근 가능한 URL 경로입니다.\nTransform 데코레이터를 사용하여 객체 변환 시 동적으로 경로를 가공합니다.\n예를 들어, POST_IMAGE 타입인 경우 POST_PUBLIC_IMAGE_PATH를 기준으로 전체 URL을 생성합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostsModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.images)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/image.entity.ts:87\n                        \n                    \n\n            \n                \n                    관련 게시물 (선택적)\n이미지가 특정 게시물에 속한 경우, 해당 PostsModel과의 다대일(ManyToOne) 관계를 나타냅니다.\n게시물 이미지가 아닌 경우 null일 수 있습니다 (예: 사용자 프로필 이미지).\nPostsModel의 'images' 필드와 연결됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ImageModelType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({enum: ImageModelType})@IsEnum(ImageModelType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entity/image.entity.ts:56\n                        \n                    \n\n            \n                \n                    이미지 타입\n이미지의 종류를 나타냅니다 (예: 게시물 이미지, 사용자 프로필 이미지 등).\nImageModelType 열거형 값을 가집니다.\n이 값에 따라 이미지 경로 변환 로직 등이 달라질 수 있습니다.\n예시:\n\nUsersModel -> 사용자 프로필 이미지\nPostsModel -> 포스트 이미지\n\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { BaseModel } from \"./base.entity\";\nimport { IsEnum, IsInt, IsOptional, IsString } from \"class-validator\";\nimport { Transform } from \"class-transformer\";\nimport { join } from \"path\";\nimport { POST_PUBLIC_IMAGE_PATH } from \"../const/path.const\";\nimport { PostsModel } from \"src/posts/entity/posts.entity\";\n\n/**\n * 이미지 모델 타입 열거형 (ImageModelType)\n * \n * 이미지의 종류를 구분하기 위한 열거형입니다.\n * 현재는 POST_IMAGE (게시물 이미지)만 정의되어 있습니다.\n */\nexport enum ImageModelType {\n    /** 게시물에 첨부된 이미지 */\n    POST_IMAGE,\n}\n\n/**\n * 이미지 엔티티 모델 (ImageModel)\n * \n * 시스템에서 사용되는 이미지 정보를 나타냅니다. BaseModel을 상속받습니다.\n */\n@Entity()\nexport class ImageModel extends BaseModel {\n    /**\n     * 이미지 순서\n     * \n     * 여러 이미지가 있을 경우 표시되는 순서를 나타냅니다.\n     * 기본값은 0이며, 선택적으로 사용될 수 있습니다.\n     * 정수형(Int)입니다.\n     */\n    @Column({\n        default: 0,\n    })\n    @IsInt()\n    @IsOptional()\n    order: number;\n\n    /**\n     * 이미지 타입\n     * \n     * 이미지의 종류를 나타냅니다 (예: 게시물 이미지, 사용자 프로필 이미지 등).\n     * ImageModelType 열거형 값을 가집니다.\n     * 이 값에 따라 이미지 경로 변환 로직 등이 달라질 수 있습니다.\n     * \n     * 예시:\n     * - UsersModel -> 사용자 프로필 이미지\n     * - PostsModel -> 포스트 이미지\n     */\n    @Column({\n        enum: ImageModelType,\n    })\n    @IsEnum(ImageModelType)\n    type: ImageModelType;\n\n    /**\n     * 이미지 경로\n     * \n     * 이미지 파일의 실제 저장 경로 또는 접근 가능한 URL 경로입니다.\n     * Transform 데코레이터를 사용하여 객체 변환 시 동적으로 경로를 가공합니다.\n     * 예를 들어, POST_IMAGE 타입인 경우 POST_PUBLIC_IMAGE_PATH를 기준으로 전체 URL을 생성합니다.\n     */\n    @Column()\n    @IsString()\n    @Transform(({value, obj}) => {\n        if(obj.type === ImageModelType.POST_IMAGE) {\n            return `/${join(\n                POST_PUBLIC_IMAGE_PATH,\n                value,\n            )}`;\n        } else {\n            return value as string;\n        }\n    })\n    path: string;\n\n    /**\n     * 관련 게시물 (선택적)\n     * \n     * 이미지가 특정 게시물에 속한 경우, 해당 PostsModel과의 다대일(ManyToOne) 관계를 나타냅니다.\n     * 게시물 이미지가 아닌 경우 null일 수 있습니다 (예: 사용자 프로필 이미지).\n     * PostsModel의 'images' 필드와 연결됩니다.\n     */\n    @ManyToOne(() => PostsModel, (post) => post.images)\n    post?: PostsModel;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsCommentMineOrAdminGuard.html":{"url":"guards/IsCommentMineOrAdminGuard.html","title":"guard - IsCommentMineOrAdminGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsCommentMineOrAdminGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/posts/comments/guard/is-comment-mine-or-admin.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    댓글 소유자 또는 관리자 권한 가드\n관리자는 모든 댓글에 대한 권한을 가지며, 일반 사용자는 자신의 댓글에만 접근 가능합니다.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(commentService: CommentsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/comments/guard/is-comment-mine-or-admin.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentService\n                                                  \n                                                        \n                                                                        CommentsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/guard/is-comment-mine-or-admin.guard.ts:27\n                        \n                    \n\n\n            \n                \n                        가드 활성화 여부를 확인하는 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                접근 허용 여부\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, ForbiddenException, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { RoleEnum } from \"src/users/entity/users.entity\";\nimport { CommentsService } from \"../comments.service\";\n\n/**\n * 댓글 소유자 또는 관리자 권한 가드\n * \n * @description 사용자가 댓글의 소유자이거나 관리자 권한을 가지고 있는지 확인합니다.\n * 관리자는 모든 댓글에 대한 권한을 가지며, 일반 사용자는 자신의 댓글에만 접근 가능합니다.\n */\n@Injectable()\nexport class IsCommentMineOrAdminGuard implements CanActivate{\n    constructor(\n        private readonly commentService: CommentsService,\n    ){\n\n    }\n\n    /**\n     * 가드 활성화 여부를 확인하는 메서드\n     * \n     * @param context - 실행 컨텍스트\n     * @returns 접근 허용 여부\n     * @throws {UnauthorizedException} 사용자 정보가 없을 때\n     * @throws {ForbiddenException} 권한이 없을 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const req = context.switchToHttp().getRequest();\n\n        const {user} = req;\n\n        if(!user){\n            throw new UnauthorizedException(\n                '사용자 정보를 가져올 수 없습니다.',\n            );\n        }\n\n        if(user.role === RoleEnum.ADMIN){\n            return true;\n        }\n\n        const commentId = req.params.commentId;\n\n        const isOk = await this.commentService.isCommentMine(\n            user.id,\n            parseInt(commentId),\n        );\n\n        if(!isOk){\n            throw new ForbiddenException(\n                '권한이 없습니다.',\n            );\n        }\n\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsPostMineOrAdminGuard.html":{"url":"guards/IsPostMineOrAdminGuard.html","title":"guard - IsPostMineOrAdminGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsPostMineOrAdminGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/posts/guard/is-post-mine-or-admin.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    게시물 소유권 또는 관리자 권한을 검증하는 가드\n다음 조건 중 하나라도 만족하면 접근을 허용합니다:\n\n사용자가 ADMIN 역할을 가진 경우\n해당 게시물의 작성자인 경우\n\nExample :```typescript\n@UseGuards(IsPostMineOrAdminGuard)\nasync updatePost(@Param('postId') postId: string) { ... }Example :\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(postService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/guard/is-post-mine-or-admin.guard.ts:19\n                            \n                        \n\n                \n                    \n                            IsPostMineOrAdminGuard 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n게시물 서비스, 게시물 소유권 검증에 사용\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/guard/is-post-mine-or-admin.guard.ts:44\n                        \n                    \n\n\n            \n                \n                        게시물에 대한 접근 권한을 검증합니다.\n검증 단계:\n\n사용자 인증 상태 확인\nADMIN 역할이면 즉시 허용\npostId 파라미터 존재 여부 확인\n게시물 소유권 검증\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트 (HTTP 요청)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                접근 허용 여부를 나타내는 Promise\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { BadRequestException, CanActivate, ExecutionContext, ForbiddenException, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PostsService } from \"../posts.service\";\nimport { RoleEnum } from \"src/users/entity/users.entity\";\n\n/**\n * 게시물 소유권 또는 관리자 권한을 검증하는 가드\n * \n * 다음 조건 중 하나라도 만족하면 접근을 허용합니다:\n * - 사용자가 ADMIN 역할을 가진 경우\n * - 해당 게시물의 작성자인 경우\n * \n * @example\n * ```typescript\n * @UseGuards(IsPostMineOrAdminGuard)\n * async updatePost(@Param('postId') postId: string) { ... }\n * ```\n */\n@Injectable()\nexport class IsPostMineOrAdminGuard implements CanActivate{\n    /**\n     * IsPostMineOrAdminGuard 생성자\n     * \n     * @param postService - 게시물 서비스, 게시물 소유권 검증에 사용\n     */\n    constructor(\n        private readonly postService: PostsService,\n    ){}\n\n    /**\n     * 게시물에 대한 접근 권한을 검증합니다.\n     * \n     * 검증 단계:\n     * 1. 사용자 인증 상태 확인\n     * 2. ADMIN 역할이면 즉시 허용\n     * 3. postId 파라미터 존재 여부 확인\n     * 4. 게시물 소유권 검증\n     * \n     * @param context - 실행 컨텍스트 (HTTP 요청)\n     * @returns 접근 허용 여부를 나타내는 Promise\n     * @throws UnauthorizedException - 사용자 정보를 가져올 수 없는 경우\n     * @throws BadRequestException - Post ID가 파라미터로 제공되지 않은 경우\n     * @throws ForbiddenException - 게시물 소유권이 없고 관리자가 아닌 경우\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const req = context.switchToHttp().getRequest();\n\n        const {user} = req;\n\n        if(!user){\n            throw new UnauthorizedException(\n                '사용자 정보를 가져올 수 없습니다.',\n            )\n        }\n\n        /**\n         * Admin일 경우 그냥 패스\n         */\n        if(user.role === RoleEnum.ADMIN){\n            return true;\n        }\n\n        const postId = req.params.postId;\n\n        if(!postId){\n            throw new BadRequestException(\n                'Post ID가 파라미터로 제공 돼야합니다.',\n            );\n        }\n\n        const isOk = await this.postService.isPostMine(\n            user.id,\n            parseInt(postId),\n        );\n\n        if(!isOk){\n            throw new ForbiddenException(\n                '권한이 없습니다.',\n            );\n        }\n\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KakaoAuthGuard.html":{"url":"injectables/KakaoAuthGuard.html","title":"injectable - KakaoAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/kakao-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                카카오 인증 가드\nPassport의 kakao 전략을 사용합니다.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard(\"kakao\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/kakao-auth.guard.ts:18\n                        \n                    \n\n\n            \n                \n                        가드 활성화 여부를 확인하는 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                인증 성공 여부\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n/**\n * 카카오 인증 가드\n * \n * @description 카카오 OAuth 2.0을 통한 사용자 인증을 처리하는 가드입니다.\n * Passport의 kakao 전략을 사용합니다.\n */\n@Injectable()\nexport class KakaoAuthGuard extends AuthGuard(\"kakao\") {\n  /**\n   * 가드 활성화 여부를 확인하는 메서드\n   * \n   * @param context - 실행 컨텍스트\n   * @returns 인증 성공 여부\n   */\n  async canActivate(context: any): Promise {\n    const result = (await super.canActivate(context)) as boolean;\n    return result;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KakaoStrategy.html":{"url":"injectables/KakaoStrategy.html","title":"injectable - KakaoStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/kakao.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                카카오 OAuth 인증을 처리하는 전략 클래스\n카카오 계정으로 로그인 및 회원가입을 처리합니다\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'kakao')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigType<>, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/kakao.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/kakao.strategy.ts:33\n                        \n                    \n\n\n            \n                \n                        카카오 인증 후 사용자 정보를 검증하고 처리합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    카카오로부터 받은 액세스 토큰\n\n                                            \n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    카카오로부터 받은 리프레시 토큰\n\n                                            \n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    카카오로부터 받은 사용자 프로필 정보\n\n                                            \n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    인증 완료 콜백 함수\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                인증된 사용자 정보\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, Profile, VerifyCallback } from 'passport-kakao';\nimport { ConfigType } from '@nestjs/config';\nimport kakaoConfig from 'src/configs/kakao.config';\nimport { UsersService } from 'src/users/users.service';\n\n/**\n * 카카오 OAuth 인증을 처리하는 전략 클래스\n * 카카오 계정으로 로그인 및 회원가입을 처리합니다\n */\n@Injectable()\nexport class KakaoStrategy extends PassportStrategy(Strategy, 'kakao') {\n  constructor(\n    @Inject(kakaoConfig.KEY)\n    private readonly config: ConfigType,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      clientID: config.clientId,\n      callbackURL: config.callbackUrl,\n    });\n  }\n\n  /**\n   * 카카오 인증 후 사용자 정보를 검증하고 처리합니다\n   * @param accessToken 카카오로부터 받은 액세스 토큰\n   * @param refreshToken 카카오로부터 받은 리프레시 토큰\n   * @param profile 카카오로부터 받은 사용자 프로필 정보\n   * @param done 인증 완료 콜백 함수\n   * @returns 인증된 사용자 정보\n   */\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    done: VerifyCallback,\n  ): Promise {\n    // profile에서 필요한 정보를 추출합니다.\n    // passport-kakao는 profile 객체 내 _json 속성에 추가 정보를 포함합니다.\n    const { id, username, _json } = profile;\n    const email =\n      _json?.kakao_account && _json.kakao_account.email\n        ? _json.kakao_account.email\n        : null;\n\n    /*\n      UsersService에 kakaOAuth 전용 메소드 (예: findOrCreateByKakao())를 만들어서\n      기존 사용자와의 중복 검사 및 신규 생성 로직을 처리할 수 있습니다.\n      예)\n      async findOrCreateByKakao({ kakaoId, email, nickname }: { kakaoId: string; email?: string; nickname: string; }): Promise;\n    */\n    const user = await this.usersService.findOrCreateByKakao({\n      email,\n      nickname: username,\n      kakaoId: id,\n    });\n\n    done(null, user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogInterceptor.html":{"url":"injectables/LogInterceptor.html","title":"injectable - LogInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/log.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                로그 인터셉터\n실행 시간을 측정하여 성능 모니터링에 도움을 줍니다.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/log.interceptor.ts:28\n                        \n                    \n\n\n            \n                \n                        인터셉터 실행 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트 (HTTP 또는 GraphQL)\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n다음 핸들러\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable 형태의 응답\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LogInterceptor.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/interceptor/log.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NestInterceptor,\n    ExecutionContext,\n    CallHandler,\n    Logger,\n  } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n  import { Observable, tap } from 'rxjs';\n\n/**\n * 로그 인터셉터\n * \n * @description HTTP 요청과 GraphQL 요청을 모두 처리하여 요청/응답 정보를 로그로 출력합니다.\n * 실행 시간을 측정하여 성능 모니터링에 도움을 줍니다.\n */\n@Injectable()\nexport class LogInterceptor implements NestInterceptor {\n    private readonly logger = new Logger(LogInterceptor.name);\n\n    /**\n     * 인터셉터 실행 메서드\n     * \n     * @param context - 실행 컨텍스트 (HTTP 또는 GraphQL)\n     * @param next - 다음 핸들러\n     * @returns Observable 형태의 응답\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n      const now = new Date();\n\n      // GraphQL 요청인지 확인하고, 맞다면 GqlExecutionContext 사용\n      const gqlCtx = GqlExecutionContext.create(context);\n      const info = gqlCtx.getInfo(); // GraphQL 요청의 경우 info 객체에서 정보 추출 가능\n      const req = gqlCtx.getContext().req || context.switchToHttp().getRequest(); // 가드에서와 동일한 방식으로 req 객체 가져오기\n\n      let requestInfo = 'Request - ';\n      if (info && info.parentType && info.fieldName) { // GraphQL 요청인 경우\n          requestInfo += `Type: ${info.parentType}, Field: ${info.fieldName}`;\n          if (req && req.ip) { // req 객체가 있고 ip 정보가 있다면 추가\n              requestInfo += `, IP: ${req.ip}`;\n          }\n      } else if (req) { // HTTP 요청인 경우 (기존 로직)\n          const { method, originalUrl, ip } = req;\n          requestInfo += `Method: ${method}, URL: ${originalUrl}, IP: ${ip}`;\n      } else {\n          requestInfo += 'Unknown request type';\n      }\n\n      console.log(`${requestInfo} - ${now.toLocaleString('kr')}`);\n\n      return next.handle().pipe(\n          tap(() => {\n              // 응답 로깅 (필요한 경우)\n              // GraphQL의 경우 응답 구조가 다를 수 있으므로, 응답 로깅 방식도 고려해야 합니다.\n              // const res = gqlCtx.getContext().res || context.switchToHttp().getResponse();\n              console.log(`Response - ${requestInfo} - ${new Date().toLocaleString('kr')} (Execution time: ${new Date().getMilliseconds() - now.getMilliseconds()}ms)`);\n          })\n      );\n    }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogMiddleware.html":{"url":"injectables/LogMiddleware.html","title":"injectable - LogMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/log.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                요청 로그 미들웨어\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middleware/log.middleware.ts:18\n                        \n                    \n\n\n            \n                \n                        미들웨어 실행 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExpress 요청 객체\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExpress 응답 객체\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n다음 미들웨어로 진행하는 함수\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from \"@nestjs/common\";\nimport { NextFunction } from \"express\";\n\n/**\n * 요청 로그 미들웨어\n * \n * @description 들어오는 HTTP 요청의 메서드, URL, 시간을 콘솔에 로그로 출력합니다.\n */\n@Injectable()\nexport class LogMiddleware implements NestMiddleware {\n    /**\n     * 미들웨어 실행 메서드\n     * \n     * @param req - Express 요청 객체\n     * @param res - Express 응답 객체\n     * @param next - 다음 미들웨어로 진행하는 함수\n     */\n    use(req: Request, res: Response, next: NextFunction) {\n        console.log(`[REQ] ${req.method} ${req.url} ${new Date().toLocaleString('kr')}`);\n\n        next();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                로그인 데이터 전송 객체\n사용자 로그인 요청 시 필요한 데이터 구조를 정의합니다.\n이메일과 비밀번호를 통한 인증 방식을 사용합니다.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: '사용자 이메일 주소', example: 'user@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:19\n                        \n                    \n\n            \n                \n                    사용자 이메일 주소\n로그인 시 사용자 식별에 사용되는 고유한 이메일 주소입니다.\n유효한 이메일 형식이어야 하며, 시스템에 등록된 이메일이어야 합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: '사용자 비밀번호', example: 'SecurePassword123!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:29\n                        \n                    \n\n            \n                \n                    사용자 비밀번호\n로그인 인증에 사용되는 비밀번호입니다.\n보안을 위해 적절한 복잡도를 가져야 합니다.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString } from \"class-validator\";\n\n/**\n * 로그인 데이터 전송 객체\n * \n * 사용자 로그인 요청 시 필요한 데이터 구조를 정의합니다.\n * 이메일과 비밀번호를 통한 인증 방식을 사용합니다.\n */\nexport class LoginDto {\n    /**\n     * 사용자 이메일 주소\n     * \n     * 로그인 시 사용자 식별에 사용되는 고유한 이메일 주소입니다.\n     * 유효한 이메일 형식이어야 하며, 시스템에 등록된 이메일이어야 합니다.\n     */\n    @IsString()\n    @ApiProperty({ description: '사용자 이메일 주소', example: 'user@example.com' })\n    email: string;\n  \n    /**\n     * 사용자 비밀번호\n     * \n     * 로그인 인증에 사용되는 비밀번호입니다.\n     * 보안을 위해 적절한 복잡도를 가져야 합니다.\n     */\n    @IsString()\n    @ApiProperty({ description: '사용자 비밀번호', example: 'SecurePassword123!' })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MaxLengthPipe.html":{"url":"injectables/MaxLengthPipe.html","title":"injectable - MaxLengthPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MaxLengthPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/pipe/password.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                최대 길이 유효성 검사 파이프\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(length: number, subject: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/pipe/password.pipe.ts:35\n                            \n                        \n\n                \n                    \n                            최대 길이 파이프 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        length\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n허용되는 최대 길이\n\n\n                                                        \n                                                \n                                                \n                                                        subject\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n검사 대상의 이름 (오류 메시지에 사용)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/pipe/password.pipe.ts:54\n                        \n                    \n\n\n            \n                \n                        파이프 변환 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n입력값\n\n\n                                            \n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n메타데이터\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                변환된 문자열 값\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\n\n/**\n * 비밀번호 유효성 검사 파이프\n * \n * @description 비밀번호가 8자 이하인지 확인하는 파이프입니다.\n */\n@Injectable()\nexport class PasswordPipe implements PipeTransform {\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 비밀번호가 8자를 초과할 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length > 8) {\n            throw new BadRequestException('비밀번호는 8자 이하로 입력해주세요!');\n        }\n\n        return value.toString();\n    }\n}\n\n/**\n * 최대 길이 유효성 검사 파이프\n * \n * @description 입력값이 지정된 최대 길이를 초과하지 않는지 확인합니다.\n */\n@Injectable()\nexport class MaxLengthPipe implements PipeTransform {\n    /**\n     * 최대 길이 파이프 생성자\n     * \n     * @param length - 허용되는 최대 길이\n     * @param subject - 검사 대상의 이름 (오류 메시지에 사용)\n     */\n    constructor(private readonly length: number,\n        private readonly subject: string,\n    ) {}\n\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 입력값이 최대 길이를 초과할 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length > this.length) {\n            throw new BadRequestException(`${this.subject}의 최대 길이는 ${this.length}입니다.`);\n        }\n\n        return value.toString();\n    }\n}\n\n/**\n * 최소 길이 유효성 검사 파이프\n * \n * @description 입력값이 지정된 최소 길이 이상인지 확인합니다.\n */\n@Injectable()\nexport class MinLengthPipe implements PipeTransform {\n    /**\n     * 최소 길이 파이프 생성자\n     * \n     * @param length - 요구되는 최소 길이\n     * @param subject - 검사 대상의 이름 (오류 메시지에 사용)\n     */\n    constructor(private readonly length: number,\n        private readonly subject: string,\n    ) {}\n\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 입력값이 최소 길이 미만일 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesController.html":{"url":"controllers/MessagesController.html","title":"controller - MessagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chats/:cid/messages\n            \n\n\n            \n                Description\n            \n            \n                채팅 메시지 관련 API 엔드포인트를 제공하는 컨트롤러\n특정 채팅방의 메시지 조회 기능을 제공합니다\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                paginateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        paginateMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateMessage(id: number, dto: BasePaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '특정 채팅방의 메세지 불러오기', description: 'chatId에 해당되는 곳의 모든 메세지를 불러옵니다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/chats/messages/messages.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        특정 채팅방의 메시지 목록을 페이징하여 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    채팅방 ID\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            BasePaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이징 정보가 담긴 DTO\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                페이징된 메시지 목록\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ChatsMessagesService } from \"./messages.service\";\nimport { BasePaginationDto } from \"src/common/dto/base-pagination.dto\";\nimport { ApiBearerAuth, ApiOperation } from \"@nestjs/swagger\";\nimport { AuthScheme } from \"src/common/const/auth-schema.const\";\n\n/**\n * 채팅 메시지 관련 API 엔드포인트를 제공하는 컨트롤러\n * 특정 채팅방의 메시지 조회 기능을 제공합니다\n */\n@Controller('chats/:cid/messages')\nexport class MessagesController {\n    constructor(\n        private readonly messagesService: ChatsMessagesService,\n    ) {}\n\n    /**\n     * 특정 채팅방의 메시지 목록을 페이징하여 조회합니다\n     * @param id 채팅방 ID\n     * @param dto 페이징 정보가 담긴 DTO\n     * @returns 페이징된 메시지 목록\n     */\n    @Get()\n    @ApiBearerAuth(AuthScheme.ACCESS)\n    @ApiOperation({ \n        summary: '특정 채팅방의 메세지 불러오기', \n        description: 'chatId에 해당되는 곳의 모든 메세지를 불러옵니다.' \n    })\n    paginateMessage(\n        @Param('cid', ParseIntPipe) id: number,\n        @Query() dto: BasePaginationDto,\n    ) {\n        return this.messagesService.paginateMessages(\n            dto,\n            {\n                where: {\n                    chat: {\n                        id,\n                    }\n                },\n                relations: {\n                    author: true,\n                    chat: true,\n                }\n            }\n        );\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MessagesModel.html":{"url":"entities/MessagesModel.html","title":"entity - MessagesModel","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MessagesModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/messages/entity/messages.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                채팅 메시지 엔티티 모델 (MessagesModel)\n채팅방 내에서 주고받는 메시지 정보를 나타냅니다. BaseModel을 상속받습니다.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                chat\n                            \n                            \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                whisperTargetUser\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.messages)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/messages/entity/messages.entity.ts:32\n                        \n                    \n\n            \n                \n                    메시지 작성자\nUsersModel과의 다대일(ManyToOne) 관계입니다.\n이 메시지를 작성한 사용자를 나타냅니다.\nUsersModel의 'messages' 필드와 연결됩니다. (일반 메시지용)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatsModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, chat => chat.messages)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/messages/entity/messages.entity.ts:22\n                        \n                    \n\n            \n                \n                    메시지가 속한 채팅방\nChatsModel과의 다대일(ManyToOne) 관계입니다.\n이 메시지가 어떤 채팅방에 속해있는지를 나타냅니다.\nChatsModel의 'messages' 필드와 연결됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/messages/entity/messages.entity.ts:52\n                        \n                    \n\n            \n                \n                    메시지 내용\n실제 메시지의 텍스트 내용입니다.\n문자열 타입이어야 합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        whisperTargetUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.whisperMessages)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chats/messages/entity/messages.entity.ts:42\n                        \n                    \n\n            \n                \n                    귓속말 대상 사용자 (선택적)\nUsersModel과의 다대일(ManyToOne) 관계입니다.\n메시지가 특정 사용자에게 보내는 귓속말인 경우, 그 대상 사용자를 나타냅니다.\n일반 메시지의 경우 null일 수 있습니다.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\nimport { ChatsModel } from \"src/chats/entity/chats.entity\";\nimport { BaseModel } from \"src/common/entity/base.entity\";\nimport { UsersModel } from \"src/users/entity/users.entity\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\n\n/**\n * 채팅 메시지 엔티티 모델 (MessagesModel)\n * \n * 채팅방 내에서 주고받는 메시지 정보를 나타냅니다. BaseModel을 상속받습니다.\n */\n@Entity()\nexport class MessagesModel extends BaseModel {\n    /**\n     * 메시지가 속한 채팅방\n     * \n     * ChatsModel과의 다대일(ManyToOne) 관계입니다.\n     * 이 메시지가 어떤 채팅방에 속해있는지를 나타냅니다.\n     * ChatsModel의 'messages' 필드와 연결됩니다.\n     */\n    @ManyToOne(() => ChatsModel, (chat) => chat.messages)\n    chat: ChatsModel;\n\n    /**\n     * 메시지 작성자\n     * \n     * UsersModel과의 다대일(ManyToOne) 관계입니다.\n     * 이 메시지를 작성한 사용자를 나타냅니다.\n     * UsersModel의 'messages' 필드와 연결됩니다. (일반 메시지용)\n     */\n    @ManyToOne(() => UsersModel, (user) => user.messages)\n    author: UsersModel;\n\n    /**\n     * 귓속말 대상 사용자 (선택적)\n     * \n     * UsersModel과의 다대일(ManyToOne) 관계입니다.\n     * 메시지가 특정 사용자에게 보내는 귓속말인 경우, 그 대상 사용자를 나타냅니다.\n     * 일반 메시지의 경우 null일 수 있습니다.\n     */\n    @ManyToOne(() => UsersModel, (user) => user.whisperMessages)\n    whisperTargetUser: UsersModel;\n\n    /**\n     * 메시지 내용\n     * \n     * 실제 메시지의 텍스트 내용입니다.\n     * 문자열 타입이어야 합니다.\n     */\n    @Column()\n    @IsString()\n    message: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinLengthPipe.html":{"url":"injectables/MinLengthPipe.html","title":"injectable - MinLengthPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinLengthPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/pipe/password.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                최소 길이 유효성 검사 파이프\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(length: number, subject: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/pipe/password.pipe.ts:69\n                            \n                        \n\n                \n                    \n                            최소 길이 파이프 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        length\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n요구되는 최소 길이\n\n\n                                                        \n                                                \n                                                \n                                                        subject\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n검사 대상의 이름 (오류 메시지에 사용)\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/pipe/password.pipe.ts:88\n                        \n                    \n\n\n            \n                \n                        파이프 변환 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n입력값\n\n\n                                            \n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n메타데이터\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                변환된 문자열 값\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\n\n/**\n * 비밀번호 유효성 검사 파이프\n * \n * @description 비밀번호가 8자 이하인지 확인하는 파이프입니다.\n */\n@Injectable()\nexport class PasswordPipe implements PipeTransform {\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 비밀번호가 8자를 초과할 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length > 8) {\n            throw new BadRequestException('비밀번호는 8자 이하로 입력해주세요!');\n        }\n\n        return value.toString();\n    }\n}\n\n/**\n * 최대 길이 유효성 검사 파이프\n * \n * @description 입력값이 지정된 최대 길이를 초과하지 않는지 확인합니다.\n */\n@Injectable()\nexport class MaxLengthPipe implements PipeTransform {\n    /**\n     * 최대 길이 파이프 생성자\n     * \n     * @param length - 허용되는 최대 길이\n     * @param subject - 검사 대상의 이름 (오류 메시지에 사용)\n     */\n    constructor(private readonly length: number,\n        private readonly subject: string,\n    ) {}\n\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 입력값이 최대 길이를 초과할 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length > this.length) {\n            throw new BadRequestException(`${this.subject}의 최대 길이는 ${this.length}입니다.`);\n        }\n\n        return value.toString();\n    }\n}\n\n/**\n * 최소 길이 유효성 검사 파이프\n * \n * @description 입력값이 지정된 최소 길이 이상인지 확인합니다.\n */\n@Injectable()\nexport class MinLengthPipe implements PipeTransform {\n    /**\n     * 최소 길이 파이프 생성자\n     * \n     * @param length - 요구되는 최소 길이\n     * @param subject - 검사 대상의 이름 (오류 메시지에 사용)\n     */\n    constructor(private readonly length: number,\n        private readonly subject: string,\n    ) {}\n\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 입력값이 최소 길이 미만일 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginateChatDto.html":{"url":"classes/PaginateChatDto.html","title":"class - PaginateChatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginateChatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/dto/paginate-chat.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                채팅 페이지네이션 데이터 전송 객체\n채팅 목록 조회 시 페이지네이션을 위한 데이터 구조를 정의합니다.\n기본 페이지네이션 DTO를 확장하여 채팅 관련 목록 조회에 사용됩니다.\n\n            \n\n            \n                Extends\n            \n            \n                            BasePaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                order__createdAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                take\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__id__less_than\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__id__more_than\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order__createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['ASC', 'DESC'])@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:41\n\n                        \n                    \n\n            \n                \n                    정렬 순서 (생성일시 기준)\nASC: 오름차순, DESC: 내림차순\n기본값: ASC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:14\n\n                        \n                    \n\n            \n                \n                    페이지 번호 (오프셋 기반 페이지네이션)\n선택적 필드\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:49\n\n                        \n                    \n\n            \n                \n                    한 번에 가져올 데이터 개수\n기본값: 20개\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__id__less_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:22\n\n                        \n                    \n\n            \n                \n                    커서 기반 페이지네이션 - 이전 페이지 조회\n입력된 ID보다 작은 ID를 가진 데이터들을 조회\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__id__more_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:31\n\n                        \n                    \n\n            \n                \n                    커서 기반 페이지네이션 - 다음 페이지 조회\n이전 마지막 데이터의 ID\n이 프로퍼티에 입력된 ID 보다 높은 ID 부터 값을 가져오기\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BasePaginationDto } from \"src/common/dto/base-pagination.dto\";\n\n/**\n * 채팅 페이지네이션 데이터 전송 객체\n * \n * 채팅 목록 조회 시 페이지네이션을 위한 데이터 구조를 정의합니다.\n * 기본 페이지네이션 DTO를 확장하여 채팅 관련 목록 조회에 사용됩니다.\n */\nexport class PaginateChatDto extends BasePaginationDto {\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginateCommentsDto.html":{"url":"classes/PaginateCommentsDto.html","title":"class - PaginateCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginateCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/comments/dto/paginate-comments.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                댓글 페이지네이션 데이터 전송 객체\n댓글 목록 조회 시 페이지네이션을 위한 데이터 구조를 정의합니다.\n기본 페이지네이션 DTO를 확장하여 댓글 목록 조회에 사용됩니다.\n\n            \n\n            \n                Extends\n            \n            \n                            BasePaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                order__createdAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                take\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__id__less_than\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__id__more_than\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order__createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['ASC', 'DESC'])@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:41\n\n                        \n                    \n\n            \n                \n                    정렬 순서 (생성일시 기준)\nASC: 오름차순, DESC: 내림차순\n기본값: ASC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:14\n\n                        \n                    \n\n            \n                \n                    페이지 번호 (오프셋 기반 페이지네이션)\n선택적 필드\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:49\n\n                        \n                    \n\n            \n                \n                    한 번에 가져올 데이터 개수\n기본값: 20개\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__id__less_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:22\n\n                        \n                    \n\n            \n                \n                    커서 기반 페이지네이션 - 이전 페이지 조회\n입력된 ID보다 작은 ID를 가진 데이터들을 조회\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__id__more_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:31\n\n                        \n                    \n\n            \n                \n                    커서 기반 페이지네이션 - 다음 페이지 조회\n이전 마지막 데이터의 ID\n이 프로퍼티에 입력된 ID 보다 높은 ID 부터 값을 가져오기\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BasePaginationDto } from \"src/common/dto/base-pagination.dto\";\n\n/**\n * 댓글 페이지네이션 데이터 전송 객체\n * \n * 댓글 목록 조회 시 페이지네이션을 위한 데이터 구조를 정의합니다.\n * 기본 페이지네이션 DTO를 확장하여 댓글 목록 조회에 사용됩니다.\n */\nexport class PaginateCommentsDto extends BasePaginationDto {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatePostDto.html":{"url":"classes/PaginatePostDto.html","title":"class - PaginatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/paginate-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                게시물 페이지네이션 데이터 전송 객체\n게시물 목록 조회 시 페이지네이션과 필터링을 위한 데이터 구조를 정의합니다.\n기본 페이지네이션 DTO를 확장하여 게시물 특화 필터링 옵션을 제공합니다.\n\n            \n\n            \n                Extends\n            \n            \n                            BasePaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                isOnlyFollowingPosts\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__author__equal\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__likeCount__more_than\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__title__i_like\n                            \n                            \n                                    \n                                    \n                                order__createdAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                take\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__id__less_than\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                where__id__more_than\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isOnlyFollowingPosts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/paginate-post.dto.ts:45\n                        \n                    \n\n            \n                \n                    팔로잉 게시물 필터링\ntrue인 경우 팔로우하는 사용자들의 게시물만 조회합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__author__equal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/paginate-post.dto.ts:36\n                        \n                    \n\n            \n                \n                    작성자 필터링\n특정 작성자의 게시물만 조회합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__likeCount__more_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/paginate-post.dto.ts:18\n                        \n                    \n\n            \n                \n                    좋아요 수 필터링\n지정된 값보다 많은 좋아요를 받은 게시물만 조회합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__title__i_like\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/paginate-post.dto.ts:27\n                        \n                    \n\n            \n                \n                    제목 검색 필터링\n제목에 포함된 문자열로 게시물을 검색합니다. (대소문자 구분 없음)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        order__createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['ASC', 'DESC'])@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:41\n\n                        \n                    \n\n            \n                \n                    정렬 순서 (생성일시 기준)\nASC: 오름차순, DESC: 내림차순\n기본값: ASC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:14\n\n                        \n                    \n\n            \n                \n                    페이지 번호 (오프셋 기반 페이지네이션)\n선택적 필드\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:49\n\n                        \n                    \n\n            \n                \n                    한 번에 가져올 데이터 개수\n기본값: 20개\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__id__less_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:22\n\n                        \n                    \n\n            \n                \n                    커서 기반 페이지네이션 - 이전 페이지 조회\n입력된 ID보다 작은 ID를 가진 데이터들을 조회\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        where__id__more_than\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BasePaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BasePaginationDto:31\n\n                        \n                    \n\n            \n                \n                    커서 기반 페이지네이션 - 다음 페이지 조회\n이전 마지막 데이터의 ID\n이 프로퍼티에 입력된 ID 보다 높은 ID 부터 값을 가져오기\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNumber, IsOptional, IsString } from \"class-validator\";\nimport { BasePaginationDto } from \"src/common/dto/base-pagination.dto\";\n\n/**\n * 게시물 페이지네이션 데이터 전송 객체\n * \n * 게시물 목록 조회 시 페이지네이션과 필터링을 위한 데이터 구조를 정의합니다.\n * 기본 페이지네이션 DTO를 확장하여 게시물 특화 필터링 옵션을 제공합니다.\n */\nexport class PaginatePostDto extends BasePaginationDto{\n    /**\n     * 좋아요 수 필터링\n     * \n     * 지정된 값보다 많은 좋아요를 받은 게시물만 조회합니다.\n     */\n    @IsNumber()\n    @IsOptional()\n    where__likeCount__more_than?: number;\n\n    /**\n     * 제목 검색 필터링\n     * \n     * 제목에 포함된 문자열로 게시물을 검색합니다. (대소문자 구분 없음)\n     */\n    @IsString()\n    @IsOptional()\n    where__title__i_like?: string;\n\n    /**\n     * 작성자 필터링\n     * \n     * 특정 작성자의 게시물만 조회합니다.\n     */\n    @IsString()\n    @IsOptional()\n    where__author__equal?: string;\n\n    /**\n     * 팔로잉 게시물 필터링\n     * \n     * true인 경우 팔로우하는 사용자들의 게시물만 조회합니다.\n     */\n    @IsBoolean()\n    @IsOptional()\n    isOnlyFollowingPosts?: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordPipe.html":{"url":"injectables/PasswordPipe.html","title":"injectable - PasswordPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/pipe/password.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                비밀번호 유효성 검사 파이프\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/pipe/password.pipe.ts:20\n                        \n                    \n\n\n            \n                \n                        파이프 변환 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n입력값\n\n\n                                            \n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n메타데이터\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                변환된 문자열 값\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\n\n/**\n * 비밀번호 유효성 검사 파이프\n * \n * @description 비밀번호가 8자 이하인지 확인하는 파이프입니다.\n */\n@Injectable()\nexport class PasswordPipe implements PipeTransform {\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 비밀번호가 8자를 초과할 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length > 8) {\n            throw new BadRequestException('비밀번호는 8자 이하로 입력해주세요!');\n        }\n\n        return value.toString();\n    }\n}\n\n/**\n * 최대 길이 유효성 검사 파이프\n * \n * @description 입력값이 지정된 최대 길이를 초과하지 않는지 확인합니다.\n */\n@Injectable()\nexport class MaxLengthPipe implements PipeTransform {\n    /**\n     * 최대 길이 파이프 생성자\n     * \n     * @param length - 허용되는 최대 길이\n     * @param subject - 검사 대상의 이름 (오류 메시지에 사용)\n     */\n    constructor(private readonly length: number,\n        private readonly subject: string,\n    ) {}\n\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 입력값이 최대 길이를 초과할 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length > this.length) {\n            throw new BadRequestException(`${this.subject}의 최대 길이는 ${this.length}입니다.`);\n        }\n\n        return value.toString();\n    }\n}\n\n/**\n * 최소 길이 유효성 검사 파이프\n * \n * @description 입력값이 지정된 최소 길이 이상인지 확인합니다.\n */\n@Injectable()\nexport class MinLengthPipe implements PipeTransform {\n    /**\n     * 최소 길이 파이프 생성자\n     * \n     * @param length - 요구되는 최소 길이\n     * @param subject - 검사 대상의 이름 (오류 메시지에 사용)\n     */\n    constructor(private readonly length: number,\n        private readonly subject: string,\n    ) {}\n\n    /**\n     * 파이프 변환 메서드\n     * \n     * @param value - 입력값\n     * @param metadata - 메타데이터\n     * @returns 변환된 문자열 값\n     * @throws {BadRequestException} 입력값이 최소 길이 미만일 때\n     */\n    transform(value: any, metadata: ArgumentMetadata) {\n        if(value.toString().length \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostExistsMiddleware.html":{"url":"injectables/PostExistsMiddleware.html","title":"injectable - PostExistsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostExistsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/comments/middleware/post-exists.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                포스트 존재 여부를 확인하는 미들웨어\n포스트가 존재하지 않으면 BadRequestException을 발생시킵니다.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/comments/middleware/post-exists.middleware.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/comments/middleware/post-exists.middleware.ts:25\n                        \n                    \n\n\n            \n                \n                        미들웨어 실행 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExpress 요청 객체\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExpress 응답 객체\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n다음 미들웨어로 진행하는 함수\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, NestMiddleware } from \"@nestjs/common\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { PostsService } from \"src/posts/posts.service\";\n\n/**\n * 포스트 존재 여부를 확인하는 미들웨어\n * \n * @description 요청 파라미터에서 postId를 추출하여 해당 포스트가 존재하는지 확인합니다.\n * 포스트가 존재하지 않으면 BadRequestException을 발생시킵니다.\n */\n@Injectable()\nexport class PostExistsMiddleware implements NestMiddleware {\n    constructor(\n        private readonly postService: PostsService,\n    ) {}\n\n    /**\n     * 미들웨어 실행 메서드\n     * \n     * @param req - Express 요청 객체\n     * @param res - Express 응답 객체  \n     * @param next - 다음 미들웨어로 진행하는 함수\n     * @throws {BadRequestException} Post ID가 없거나 포스트가 존재하지 않을 때\n     */\n    async use(req: Request, res: Response, next: NextFunction) {\n        const postId = req.params.postId;\n\n        if(!postId) {\n            throw new BadRequestException(\n                'Post ID 파라미터는 필수입니다.'\n            );\n        }\n\n        const exists = await this.postService.checkPostExistsById(parseInt(postId));\n\n        if(!exists) {\n            throw new BadRequestException(\n                'Post가 존재하지 않습니다.'\n            );\n        }\n\n        next();\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                게시물 관련 API 엔드포인트를 제공하는 컨트롤러\n게시물의 조회, 생성, 수정, 삭제 등의 기능을 처리합니다.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                getFollowingPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                patchPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                postPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                postPostsRandom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':postId')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '게시글 삭제', description: 'Post Id 값과 일치하는 게시글을 삭제합니다.'})@Roles(RoleEnum.ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:192\n                        \n                    \n\n\n            \n                \n                        게시물을 삭제합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                삭제된 게시물 ID\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getFollowingPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollowingPosts(userId: number, query: PaginatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('following')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '팔로워 게시글들 가져오기', description: '팔로우 요청이 수락된 팔로워들의 게시글들을 모두 가져옵니다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        팔로우 중인 사용자들의 게시물을 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                        \n                                                query\n                                            \n                                                            PaginatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이지네이션 옵션\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                팔로워들의 게시물 목록\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '게시글 1개 가져오기', description: 'Post Id 값과 일치하는 게시글 1개를 가져옵니다.'})@IsPublic(IsPublicEnum.IS_PUBLIC)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:123\n                        \n                    \n\n\n            \n                \n                        ID로 특정 게시물을 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                조회된 게시물\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(query: PaginatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '모든 게시글 가져오기', description: '모든 게시글을 Paginate 하게 가져옵니다.'})@IsPublic(IsPublicEnum.IS_PUBLIC)@RateLimiter()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        모든 게시물을 페이지네이션 형식으로 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            PaginatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    페이지네이션 옵션\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                페이지네이션된 게시물 목록\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        patchPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchPost(id: number, body: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':postId')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '게시글 수정', description: 'Post Id 값과 일치하는 게시글을 수정합니다.'})@UseGuards(IsPostMineOrAdminGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:173\n                        \n                    \n\n\n            \n                \n                        게시물을 수정합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 ID\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    수정할 내용\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                수정된 게시물\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        postPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    postPosts(userId: number, body: CreatePostDto, qr: QueryRunner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '게시글 작성', description: '게시글 하나를 작성합니다. (title, content, images)'})@UseInterceptors(TransactionInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:141\n                        \n                    \n\n\n            \n                \n                        새로운 게시물을 생성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    게시물 내용\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    QueryRunner 인스턴스\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                생성된 게시물\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        postPostsRandom\n                        \n                    \n                \n            \n            \n                \n                        \n                    postPostsRandom(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('random')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '게시글 100개 자동 생성하기 (테스트 목적용)', description: '게시글을 임의로 100개를 생성합니다. 테스트 목적 외 사용금지'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:104\n                        \n                    \n\n\n            \n                \n                        테스트용 게시물을 대량 생성합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                성공 여부\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { User } from 'src/users/decorator/user.decorator';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\nimport { PaginatePostDto } from './dto/paginate-post.dto';\nimport { ImageModelType } from 'src/common/entity/image.entity';\nimport { Not, QueryRunner } from 'typeorm';\nimport { PostsImagesService } from './image/images.service';\nimport { TransactionInterceptor } from 'src/common/interceptor/transaction.interceptor';\nimport { QueryRunnerDecorator } from 'src/common/decorator/query-runner.decorator';\nimport { Roles } from 'src/users/decorator/roles.decorator';\nimport { RoleEnum } from 'src/users/entity/users.entity';\nimport { IsPublic } from 'src/common/decorator/is-public.decorator';\nimport { IsPublicEnum } from 'src/common/const/is-public.const';\nimport { IsPostMineOrAdminGuard } from './guard/is-post-mine-or-admin.guard';\nimport { ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { AuthScheme } from 'src/common/const/auth-schema.const';\nimport { RateLimiter } from 'src/common/decorator/rate-limiter.decorator';\n\n/**\n * 게시물 관련 API 엔드포인트를 제공하는 컨트롤러\n * \n * 게시물의 조회, 생성, 수정, 삭제 등의 기능을 처리합니다.\n */\n@Controller('posts')\nexport class PostsController {\n  constructor(\n    private readonly postsService: PostsService,\n    private readonly postsImagesService: PostsImagesService,\n  ) {}\n\n  /**\n   * 모든 게시물을 페이지네이션 형식으로 조회합니다\n   * @param query 페이지네이션 옵션\n   * @returns 페이지네이션된 게시물 목록\n   */\n  @Get()\n  @ApiOperation({ \n    summary: '모든 게시글 가져오기', \n    description: '모든 게시글을 Paginate 하게 가져옵니다.' \n  })\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  @RateLimiter() // 비로그인 사용자 1초당 1토큰 회복, 최대 제한 횟수 10번\n  getPosts(\n    @Query() query: PaginatePostDto,\n  ) { \n    return this.postsService.paginatePosts(query);\n  }\n\n  /**\n   * 팔로우 중인 사용자들의 게시물을 조회합니다\n   * @param userId 로그인된 사용자 ID\n   * @param query 페이지네이션 옵션\n   * @returns 팔로워들의 게시물 목록\n   */\n  @Get('following')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n    summary: '팔로워 게시글들 가져오기', \n    description: '팔로우 요청이 수락된 팔로워들의 게시글들을 모두 가져옵니다.' \n  })\n  getFollowingPosts(\n    @User('id') userId: number, \n    @Query() query: PaginatePostDto\n  ) {\n    if (query.isOnlyFollowingPosts) {\n      return this.postsService.paginatePosts(query, {\n        author: {\n          followees: {\n            isConfirmed: true,\n          },\n          id: Not(userId),\n        },\n      }, \n      userId);\n    }\n    return this.postsService.paginatePosts(query);\n  }\n\n  /**\n   * 테스트용 게시물을 대량 생성합니다\n   * @param userId 로그인된 사용자 ID\n   * @returns 성공 여부\n   */\n  @Post('random')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n    summary: '게시글 100개 자동 생성하기 (테스트 목적용)', \n    description: '게시글을 임의로 100개를 생성합니다. 테스트 목적 외 사용금지' \n  })\n  async postPostsRandom(\n    @User('id') userId: number,\n  ) {\n    await this.postsService.generatePosts(userId);\n    return true;\n  }\n\n  /**\n   * ID로 특정 게시물을 조회합니다\n   * @param id 게시물 ID\n   * @returns 조회된 게시물\n   */\n  @Get(':postId')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n    summary: '게시글 1개 가져오기', \n    description: 'Post Id 값과 일치하는 게시글 1개를 가져옵니다.' \n  })\n  @IsPublic(IsPublicEnum.IS_PUBLIC)\n  getPost(@Param('postId', ParseIntPipe) id: number) {\n    return this.postsService.getPostById(id);\n  }\n\n  /**\n   * 새로운 게시물을 생성합니다\n   * @param userId 로그인된 사용자 ID\n   * @param body 게시물 내용\n   * @param qr QueryRunner 인스턴스\n   * @returns 생성된 게시물\n   */\n  @Post()\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '게시글 작성', \n      description: '게시글 하나를 작성합니다. (title, content, images)' \n  })\n  @UseInterceptors(TransactionInterceptor)\n  async postPosts(\n    @User('id') userId: number,\n    @Body() body: CreatePostDto,\n    @QueryRunnerDecorator() qr: QueryRunner,\n  ) {\n      const post = await this.postsService.createPost(userId, body, qr);\n\n      for(let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsImagesService.html":{"url":"injectables/PostsImagesService.html","title":"injectable - PostsImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/image/images.service.ts\n        \n\n\n            \n                Description\n            \n            \n                게시물 이미지 관리 서비스\n게시물 이미지의 생성, 임시 저장, 영구 저장 등의 기능을 처리합니다.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPostImage\n                            \n                            \n                                getRepository\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(imageRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/image/images.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        imageRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPostImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPostImage(dto: CreatePostImageDto, qr?: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/image/images.service.ts:38\n                        \n                    \n\n\n            \n                \n                        게시물 이미지를 생성하고 임시 폴더에서 영구 폴더로 이동합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreatePostImageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    이미지 생성 정보\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    선택적 QueryRunner\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                생성된 이미지 모델\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepository\n                        \n                    \n                \n            \n            \n                \ngetRepository(qr?: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/image/images.service.ts:27\n                        \n                    \n\n\n            \n                \n                        QueryRunner를 이용해 이미지 리포지토리를 가져옵니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    선택적 QueryRunner\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                ImageModel의 Repository\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ImageModel } from \"src/common/entity/image.entity\";\nimport { QueryRunner, Repository } from \"typeorm\";\nimport { POST_IMAGE_PATH, TEMP_FOLDER_PATH } from 'src/common/const/path.const';\nimport { basename, join } from 'path';\nimport { promises } from 'fs';\nimport { CreatePostImageDto } from \"./dto/create-image.dto\";\n\n/**\n * 게시물 이미지 관리 서비스\n * \n * 게시물 이미지의 생성, 임시 저장, 영구 저장 등의 기능을 처리합니다.\n */\n@Injectable()\nexport class PostsImagesService {\n    constructor(\n        @InjectRepository(ImageModel)\n        private readonly imageRepository: Repository\n    ) {}\n\n    /**\n     * QueryRunner를 이용해 이미지 리포지토리를 가져옵니다\n     * @param qr 선택적 QueryRunner\n     * @returns ImageModel의 Repository\n     */\n    getRepository(qr?: QueryRunner) {\n        return qr ? qr.manager.getRepository(ImageModel) : this.imageRepository;\n    }\n\n    /**\n     * 게시물 이미지를 생성하고 임시 폴더에서 영구 폴더로 이동합니다\n     * @param dto 이미지 생성 정보\n     * @param qr 선택적 QueryRunner\n     * @returns 생성된 이미지 모델\n     * @throws BadRequestException 파일이 존재하지 않을 경우\n     */\n    async createPostImage(dto: CreatePostImageDto, qr?: QueryRunner) {\n        const repository = this.getRepository(qr);\n\n        // dto의 이미지 이름을 기반으로 파일의 경로를 생성한다.\n        const tempFilePath = join(\n            TEMP_FOLDER_PATH,\n            dto.path,\n        );\n\n        try {\n            // 파일이 존재하는지 확인. 파일이 없는 경우 에러발생.\n            await promises.access(tempFilePath);\n        } catch (error) {\n            throw new BadRequestException(`${error}: 존재하지 않는 파일입니다.`);\n        }\n\n        // 파일 이름만 가져오기\n        const fileName = basename(tempFilePath);\n\n        // 새로 이동할 포스트 폴더 이름 + 이미지 이름\n        const newPath = join(\n            POST_IMAGE_PATH,\n            fileName,\n        );\n\n        // save -> 파일 옮기기전에 하는 이유는 rollback 시 파일 옮기기가 실행되지 않기 때문\n        const result = repository.save({\n            ...dto,\n        });\n\n        // 파일 옮기기\n        await promises.rename(tempFilePath, newPath);\n\n        return result;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PostsModel.html":{"url":"entities/PostsModel.html","title":"entity - PostsModel","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PostsModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/posts.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                게시물 엔티티 모델\n사용자가 작성한 게시물의 데이터 구조를 정의합니다.\nBaseModel을 상속하여 기본 필드(id, createdAt, updatedAt 등)를 포함합니다.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                commentCount\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                images\n                            \n                            \n                                    \n                                    \n                                likeCount\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@ManyToOne(undefined, user => user.posts, {nullable: false})@JoinColumn({name: 'authorId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/posts.entity.ts:32\n                        \n                    \n\n            \n                \n                    게시물 작성자\nUsersModel과의 다대일(ManyToOne) 관계를 정의합니다.\nnull을 허용하지 않습니다.\nGraphQL 스키마에 UsersModel 타입으로 노출됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@Column()@Index('idx_post_author_id')@RelationId(post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/posts.entity.ts:46\n                        \n                    \n\n            \n                \n                    작성자 ID\n작성자의 외래키로, 데이터베이스에서 'authorId' 컬럼에 저장됩니다.\n'idx_post_author_id' 인덱스를 통해 조회 성능을 향상시킵니다.\nPostsModel 엔티티의 author 관계를 통해 ID를 가져옵니다.\nGraphQL 스키마에 숫자 타입으로 노출됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        commentCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/posts.entity.ts:96\n                        \n                    \n\n            \n                \n                    댓글 수\n게시물에 작성된 댓글의 총 개수입니다. 기본값은 0입니다.\nGraphQL 스키마에 숫자 타입으로 노출됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentsModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/posts.entity.ts:114\n                        \n                    \n\n            \n                \n                    게시물 댓글 목록\nCommentsModel과의 일대다(OneToMany) 관계입니다.\n게시물에 달린 댓글들을 나타냅니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()@IsString({message: stringValidationMessage})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/posts.entity.ts:72\n                        \n                    \n\n            \n                \n                    게시물 내용\n문자열 타입이며, stringValidationMessage에 정의된 유효성 검사 메시지를 사용합니다.\nGraphQL 스키마에 노출됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ImageModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, image => image.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/posts.entity.ts:105\n                        \n                    \n\n            \n                \n                    게시물 이미지 목록\nImageModel과의 일대다(OneToMany) 관계입니다.\n게시물에 첨부된 이미지들을 나타냅니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        likeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/posts.entity.ts:84\n                        \n                    \n\n            \n                \n                    좋아요 수\n게시물이 받은 좋아요의 총 개수입니다. 기본값은 0입니다.\nGraphQL 스키마에 숫자 타입으로 노출됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()@IsString({message: stringValidationMessage})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/posts.entity.ts:59\n                        \n                    \n\n            \n                \n                    게시물 제목\n문자열 타입이며, stringValidationMessage에 정의된 유효성 검사 메시지를 사용합니다.\nGraphQL 스키마에 노출됩니다.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsString } from 'class-validator';\nimport { BaseModel } from 'src/common/entity/base.entity';\nimport { ImageModel } from 'src/common/entity/image.entity';\nimport { stringValidationMessage } from 'src/common/validation-message/string-validation.message';\nimport { UsersModel } from 'src/users/entity/users.entity';\nimport { Column, Entity, Index, JoinColumn, ManyToOne, OneToMany, RelationId } from 'typeorm';\nimport { CommentsModel } from '../comments/entity/comments.entity';\nimport { Field, ObjectType } from '@nestjs/graphql';\n\n/**\n * 게시물 엔티티 모델\n * \n * 사용자가 작성한 게시물의 데이터 구조를 정의합니다.\n * BaseModel을 상속하여 기본 필드(id, createdAt, updatedAt 등)를 포함합니다.\n */\n@ObjectType()\n@Entity()\nexport class PostsModel extends BaseModel {\n\n  /**\n   * 게시물 작성자\n   * \n   * UsersModel과의 다대일(ManyToOne) 관계를 정의합니다.\n   * null을 허용하지 않습니다.\n   * GraphQL 스키마에 UsersModel 타입으로 노출됩니다.\n   */\n  @Field(() => UsersModel)\n  @ManyToOne(() => UsersModel, (user) => user.posts, {\n    nullable: false,\n  })\n  @JoinColumn( {name: 'authorId'})\n  author: UsersModel;\n\n  /**\n   * 작성자 ID\n   * \n   * 작성자의 외래키로, 데이터베이스에서 'authorId' 컬럼에 저장됩니다.\n   * 'idx_post_author_id' 인덱스를 통해 조회 성능을 향상시킵니다.\n   * PostsModel 엔티티의 author 관계를 통해 ID를 가져옵니다.\n   * GraphQL 스키마에 숫자 타입으로 노출됩니다.\n   */\n  @Field(() => Number)\n  @Column()\n  @Index('idx_post_author_id')\n  @RelationId((post: PostsModel) => post.author)\n  authorId: number;\n\n  /**\n   * 게시물 제목\n   * \n   * 문자열 타입이며, stringValidationMessage에 정의된 유효성 검사 메시지를 사용합니다.\n   * GraphQL 스키마에 노출됩니다.\n   */\n  @Field()\n  @Column()\n  @IsString({\n    message: stringValidationMessage,\n  })\n  title: string;\n\n  /**\n   * 게시물 내용\n   * \n   * 문자열 타입이며, stringValidationMessage에 정의된 유효성 검사 메시지를 사용합니다.\n   * GraphQL 스키마에 노출됩니다.\n   */\n  @Field()\n  @Column()\n  @IsString({\n    message: stringValidationMessage,\n  })\n  content: string;\n\n  /**\n   * 좋아요 수\n   * \n   * 게시물이 받은 좋아요의 총 개수입니다. 기본값은 0입니다.\n   * GraphQL 스키마에 숫자 타입으로 노출됩니다.\n   */\n  @Field(() => Number)\n  @Column({\n    default: 0,\n  })\n  likeCount: number;\n\n  /**\n   * 댓글 수\n   * \n   * 게시물에 작성된 댓글의 총 개수입니다. 기본값은 0입니다.\n   * GraphQL 스키마에 숫자 타입으로 노출됩니다.\n   */\n  @Field(() => Number)\n  @Column({\n    default: 0,\n  })\n  commentCount: number;\n\n  /**\n   * 게시물 이미지 목록\n   * \n   * ImageModel과의 일대다(OneToMany) 관계입니다.\n   * 게시물에 첨부된 이미지들을 나타냅니다.\n   */\n  @OneToMany(() => ImageModel, (image) => image.post)\n  images: ImageModel[];\n\n  /**\n   * 게시물 댓글 목록\n   * \n   * CommentsModel과의 일대다(OneToMany) 관계입니다.\n   * 게시물에 달린 댓글들을 나타냅니다.\n   */\n  @OneToMany(() => CommentsModel, (comment) => comment.post)\n  comments: CommentsModel[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nAuthModule->PostsModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nPostsModule -->\n\nCommonModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsImagesService\n\nPostsImagesService\n\nPostsModule -->\n\nPostsImagesService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsImagesService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostsModel } from './entity/posts.entity';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { CommonModule } from 'src/common/common.module';\nimport { ImageModel } from 'src/common/entity/image.entity';\nimport { PostsImagesService } from './image/images.service';\nimport { PostsResolver } from './resolver/posts.resolver';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      PostsModel,\n      ImageModel,\n    ]),\n    AuthModule,\n    UsersModule,\n    CommonModule,\n  ],\n  controllers: [PostsController],\n  providers: [PostsService, PostsImagesService, PostsResolver],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsResolver.html":{"url":"classes/PostsResolver.html","title":"class - PostsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/resolver/posts.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                게시물 GraphQL 리졸버\n게시물 관련 GraphQL 쿼리와 뮤테이션을 처리합니다.\n클라이언트의 GraphQL 요청을 받아 PostsService를 통해 비즈니스 로직을 실행합니다.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/resolver/posts.resolver.ts:12\n                            \n                        \n\n                \n                    \n                            PostsResolver 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                게시물 서비스 인스턴스\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {nullable: true})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/resolver/posts.resolver.ts:28\n                        \n                    \n\n\n            \n                \n                        단일 게시물 조회 쿼리\n주어진 ID에 해당하는 게시물을 조회합니다.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    조회할 게시물의 고유 식별자\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                조회된 게시물 정보 또는 null (게시물이 존재하지 않는 경우)\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Resolver, Query, Args, Int } from '@nestjs/graphql';\nimport { PostsModel } from '../entity/posts.entity';\nimport { PostsService } from '../posts.service';\n\n/**\n * 게시물 GraphQL 리졸버\n * \n * 게시물 관련 GraphQL 쿼리와 뮤테이션을 처리합니다.\n * 클라이언트의 GraphQL 요청을 받아 PostsService를 통해 비즈니스 로직을 실행합니다.\n */\n@Resolver(() => PostsModel)\nexport class PostsResolver {\n  /**\n   * PostsResolver 생성자\n   * @param postsService 게시물 서비스 인스턴스\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * 단일 게시물 조회 쿼리\n   * \n   * 주어진 ID에 해당하는 게시물을 조회합니다.\n   * \n   * @param id 조회할 게시물의 고유 식별자\n   * @returns 조회된 게시물 정보 또는 null (게시물이 존재하지 않는 경우)\n   */\n  @Query(() => PostsModel, { nullable: true })\n  getPost(@Args('id', { type: () => Int }) id: number): Promise {\n    // PostsService를 사용하여 ID로 게시물 조회 로직 구현\n    return this.postsService.getPostById(id);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProviderData.html":{"url":"interfaces/ProviderData.html","title":"interface - ProviderData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProviderData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/provider-data.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                외부 인증 제공자(OAuth)로부터 받은 사용자 데이터 인터페이스\n소셜 로그인 시 Google, Kakao 등의 제공자로부터 전달받는\n사용자 정보를 표준화된 형태로 정의합니다.\nExample :```typescript\nconst googleData: ProviderData = {\n  email: 'user@gmail.com',\n  nickname: 'John Doe',\n  providerId: '123456789',\n  providerKey: AuthProvider.GOOGLE\n};Example :\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nickname\n                                        \n                                \n                                \n                                        \n                                            providerId\n                                        \n                                \n                                \n                                        \n                                            providerKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    사용자 이메일 주소 (필수)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nickname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nickname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    사용자 닉네임 (선택적, 제공자에 따라 없을 수 있음)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        providerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    인증 제공자에서 발급한 고유 사용자 ID\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providerKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        providerKey:         AuthProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthProvider\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    인증 제공자 유형 (Google, Kakao 등)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AuthProvider } from \"../enums/auth-provider.enum\";\n\n/**\n * 외부 인증 제공자(OAuth)로부터 받은 사용자 데이터 인터페이스\n * \n * 소셜 로그인 시 Google, Kakao 등의 제공자로부터 전달받는 \n * 사용자 정보를 표준화된 형태로 정의합니다.\n * \n * @example\n * ```typescript\n * const googleData: ProviderData = {\n *   email: 'user@gmail.com',\n *   nickname: 'John Doe',\n *   providerId: '123456789',\n *   providerKey: AuthProvider.GOOGLE\n * };\n * ```\n */\nexport interface ProviderData {\n    /** 사용자 이메일 주소 (필수) */\n    email: string;\n    /** 사용자 닉네임 (선택적, 제공자에 따라 없을 수 있음) */\n    nickname?: string;\n    /** 인증 제공자에서 발급한 고유 사용자 ID */\n    providerId: string;\n    /** 인증 제공자 유형 (Google, Kakao 등) */\n    providerKey: AuthProvider;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RateLimitOptions.html":{"url":"interfaces/RateLimitOptions.html","title":"interface - RateLimitOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RateLimitOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/decorator/rate-limiter.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                속도 제한 옵션 인터페이스\n토큰 버켓 알고리즘의 동작을 제어하는 설정값들을 정의합니다.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            capacity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            refillRate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        capacity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        capacity:         number\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 30\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    최대 토큰 개수 (버켓 용량)\nExample :\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refillRate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refillRate:         number\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : 10\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    초당 채워지는 토큰 개수 (리필 속도)\nExample :\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { applyDecorators, SetMetadata, UseGuards } from '@nestjs/common';\nimport { RateLimiterGuard } from '../guards/rate-limiter.guard';\n\n/**\n * 속도 제한 옵션 인터페이스\n * \n * 토큰 버켓 알고리즘의 동작을 제어하는 설정값들을 정의합니다.\n */\nexport interface RateLimitOptions {\n  /** \n   * 최대 토큰 개수 (버켓 용량)\n   * @default 30\n   * @example 100 - 최대 100개의 요청을 버스트로 허용\n   */\n  capacity?: number;\n  /** \n   * 초당 채워지는 토큰 개수 (리필 속도)\n   * @default 10\n   * @example 5 - 초당 5개의 토큰이 충전됨 (즉, 초당 5개 요청 허용)\n   */\n  refillRate?: number;\n}\n\n/** 속도 제한 메타데이터 키 */\nexport const RATE_LIMITER_KEY = 'rate_limiter_options';\n\n/**\n * 속도 제한 데코레이터\n * \n * 토큰 버켓 알고리즘을 사용하여 API 엔드포인트에 속도 제한을 적용합니다.\n * 인증된 사용자는 사용자 ID 기반으로, 비인증 사용자는 IP 기반으로 제한됩니다.\n * \n * @param options - 속도 제한 설정 옵션\n * @param options.capacity - 최대 토큰 개수 (기본값: 30)\n * @param options.refillRate - 초당 리필되는 토큰 개수 (기본값: 10)\n * \n * @example\n * ```typescript\n * // 기본 설정 사용 (초당 10개, 최대 30개 버스트)\n * @RateLimiter()\n * async basicEndpoint() { ... }\n * \n * // 커스텀 설정 (초당 5개, 최대 100개 버스트)\n * @RateLimiter({ capacity: 100, refillRate: 5 })\n * async restrictedEndpoint() { ... }\n * \n * // 매우 제한적인 설정 (초당 1개, 최대 3개 버스트)\n * @RateLimiter({ capacity: 3, refillRate: 1 })\n * async sensitiveEndpoint() { ... }\n * ```\n */\nexport const RateLimiter = (options: RateLimitOptions = {}) =>\n  applyDecorators(\n    SetMetadata(RATE_LIMITER_KEY, options),\n    UseGuards(RateLimiterGuard),\n  );\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RateLimiterGuard.html":{"url":"guards/RateLimiterGuard.html","title":"guard - RateLimiterGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RateLimiterGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/rate-limiter.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    토큰 버켓 알고리즘을 사용한 속도 제한 가드\nRedis Lua 스크립트를 활용하여 분산 환경에서도 안전한 속도 제한을 제공합니다.\nHTTP 요청과 GraphQL 요청 모두를 지원하며, 인증된 사용자와 비인증 사용자를\n각각 다른 키로 관리합니다.\nExample :```typescript\n@RateLimiter({ capacity: 100, refillRate: 10 })\nasync sensitiveOperation() { ... }Example :\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                script\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, redis: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/rate-limiter.guard.ts:78\n                            \n                        \n\n                \n                    \n                            RateLimiterGuard 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n메타데이터 리플렉터, 데코레이터에서 설정된 속도 제한 옵션을 추출하는 데 사용\n\n\n                                                        \n                                                \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRedis 클라이언트, 토큰 버켓 상태 저장 및 Lua 스크립트 실행에 사용\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/rate-limiter.guard.ts:106\n                        \n                    \n\n\n            \n                \n                        요청에 대한 속도 제한을 검증합니다.\n처리 과정:\n\nHTTP/GraphQL 요청에서 컨텍스트 추출\n사용자 또는 IP 기반 식별자 생성\n작업별 키 생성 (REST: method:path, GraphQL: type:field)\nRedis Lua 스크립트로 토큰 버켓 알고리즘 적용\n결과에 따른 허용/거부 결정\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트 (HTTP 또는 GraphQL)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                요청 허용 여부를 나타내는 Promise\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { BadRequestException, CanActivate, ExecutionContext, Inject, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { GqlExecutionContext } from '@nestjs/graphql'; // GraphQL 컨텍스트 임포트\nimport Redis from 'ioredis';\nimport { IORedisToken } from 'src/redis/redis.constants';\nimport { RATE_LIMITER_KEY } from '../decorator/rate-limiter.decorator';\n\n/**\n * 토큰 버켓 알고리즘을 사용한 속도 제한 가드\n * \n * Redis Lua 스크립트를 활용하여 분산 환경에서도 안전한 속도 제한을 제공합니다.\n * HTTP 요청과 GraphQL 요청 모두를 지원하며, 인증된 사용자와 비인증 사용자를 \n * 각각 다른 키로 관리합니다.\n * \n * @example\n * ```typescript\n * @RateLimiter({ capacity: 100, refillRate: 10 })\n * async sensitiveOperation() { ... }\n * ```\n */\n@Injectable()\nexport class RateLimiterGuard implements CanActivate {\n  /**\n   * Redis Lua 스크립트 - 토큰 버켓 알고리즘 구현\n   * \n   * 원자적 연산을 보장하며 다음 기능을 수행합니다:\n   * - 토큰 버켓 상태 조회 및 생성\n   * - 시간에 따른 토큰 리필\n   * - 요청에 필요한 토큰 소모 및 검증\n   */\n  private readonly script = `\n    -- 속도 제한 구현 Lua 스크립트\n    -- 토큰 버켓 알고리즘을 사용합니다\n    \n    -- 키 및 매개변수 설정\n    local key = KEYS[1]\n    local max_tokens = tonumber(ARGV[1])\n    local refill_rate = tonumber(ARGV[2])  -- 초당 리필되는 토큰 수\n    local requested = tonumber(ARGV[3])    -- 요청에 필요한 토큰 수\n    local ttl = tonumber(ARGV[4])          -- 버킷 만료 시간(초)\n    local now = tonumber(ARGV[5])          -- 현재 시간(초)\n    \n    -- 현재 버킷 상태 조회\n    local exists = redis.call(\"EXISTS\", key)\n    local tokens, last_refill\n    \n    if exists == 1 then\n      -- 기존 버킷 데이터 가져오기\n      tokens = tonumber(redis.call(\"HGET\", key, \"tokens\"))\n      last_refill = tonumber(redis.call(\"HGET\", key, \"last_refill\"))\n    else\n      -- 새 버킷 생성\n      tokens = max_tokens\n      last_refill = now\n    end\n    \n    -- 토큰 리필 계산\n    local elapsed = now - last_refill\n    if elapsed > 0 then\n      -- 경과 시간에 따라 토큰 추가\n      local new_tokens = math.min(max_tokens, tokens + elapsed * refill_rate)\n      tokens = new_tokens\n    end\n    \n    -- 요청 처리 (토큰이 충분한지 확인)\n    if tokens \n   * @throws BadRequestException - 속도 제한을 초과한 경우\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // HTTP 요청과 GraphQL 요청 모두 지원하기 위해 요청 객체 가져오기\n    let req;\n    let isGraphQL = false;\n\n    if (context.getType() === 'http') {\n      // REST API 요청인 경우\n      req = context.switchToHttp().getRequest();\n    } else {\n      // GraphQL 요청인 경우\n      const gqlContext = GqlExecutionContext.create(context);\n      req = gqlContext.getContext().req;\n      isGraphQL = true;\n    }\n\n    // 요청 객체가 없는 경우\n    if (!req) {\n      console.warn('Rate Limiter Guard: 요청 컨텍스트에 접근할 수 없습니다.');\n      return true; // 안전하게 통과 (또는 필요에 따라 예외를 던질 수도 있음)\n    }\n\n    // 1) 키 전략: 인증된 사용자면 user:{id}, 아니면 ip:{ip}\n    const identifier = req.user?.id\n      ? `user:${req.user.id}`\n      : `ip:${req.ip}`;\n\n    // GraphQL 작업 정보 추가 (GraphQL 요청인 경우)\n    let operationKey = '';\n    if (isGraphQL) {\n      const gqlCtx = GqlExecutionContext.create(context);\n      const info = gqlCtx.getInfo();\n      // 쿼리/뮤테이션 타입과 필드 이름을 기준으로 키 생성 (예: \"Query:getUser\")\n      if (info && info.parentType && info.fieldName) {\n        operationKey = `${info.parentType}:${info.fieldName}`;\n      }\n    } else {\n      // REST API 요청인 경우 메소드와 경로를 기준으로 키 생성\n      operationKey = `${req.method}:${req.route?.path || req.path}`;\n    }\n\n    // 최종 키는 사용자/IP + 작업 유형을 조합하여 생성\n    const key = `rate_limit:${identifier}:${operationKey}`;\n\n    // 2) 레이트 리미트 설정값 가져오기\n    const rateLimit = this.reflector.getAllAndOverride(RATE_LIMITER_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? {\n      // 기본값: 초당 10개 요청, 버스트는 최대 30개까지\n      refillRate: 10,\n      capacity: 30,\n      requested: 1,\n      ttl: 60,\n    };\n\n    const { refillRate, capacity, requested, ttl } = rateLimit;\n\n    // 3) Redis Lua 스크립트를 사용하여 레이트 리미트 적용\n    const now = Math.floor(Date.now() / 1000); // 현재 시간(초)\n    const result = await this.redis.eval(\n      this.script,\n      1, // 키 개수\n      key, // 키\n      capacity, // 최대 토큰 수\n      refillRate, // 초당 리필되는 토큰 수\n      requested, // 요청당 필요한 토큰 수\n      ttl, // 버킷 만료 시간(초)\n      now, // 현재 시간(초)\n    );\n\n    if (result === 0) {\n      // 토큰 부족: 레이트 리미트 초과\n      throw new BadRequestException('너무 많은 요청을 보냈습니다. 잠시 후 다시 시도해주세요.');\n    }\n\n    return true;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\nimport type { Redis as RedisType } from 'ioredis';\nimport Keyv from 'keyv';\nimport KeyvRedis from 'keyv-redis';\nimport { RedisService } from './redis.service';\nimport { KEYV_TOKEN } from './redis.constants';\nimport { IORedisToken } from './redis.constants';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    // 1) ioredis 클라이언트 한 번만 생성\n    {\n      provide: IORedisToken,\n      useFactory: (cs: ConfigService): RedisType => {\n        return new Redis({\n          host: cs.get('app.redis.host'),\n          port: cs.get('app.redis.port'),\n          // password, db 등 필요시 추가\n        });\n      },\n      inject: [ConfigService],\n    },\n    // 2) Keyv 인스턴스는 위 클라이언트를 재활용\n    {\n      provide: KEYV_TOKEN,\n      useFactory: (client: Redis) => {\n        return new Keyv({\n          store: new KeyvRedis({ client }),\n          ttl: 60_000,\n        });\n      },\n      inject: [IORedisToken],\n    },\n    // 3) 기존 RedisService (KEYV_TOKEN 주입)\n    RedisService,\n  ],\n  exports: [RedisService, KEYV_TOKEN, IORedisToken],\n})\nexport class RedisModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/redis/redis.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Redis 캐싱 기능을 제공하는 서비스\n키-값 저장소 기반으로 데이터의 캐싱, 삭제, 패턴 기반 삭제 등의 기능을 제공합니다.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clear\n                            \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                delByPattern\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyv: Keyv)\n                    \n                \n                        \n                            \n                                Defined in src/redis/redis.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyv\n                                                  \n                                                        \n                                                                    Keyv\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:72\n                        \n                    \n\n\n            \n                \n                        모든 키-값 쌍을 삭제합니다\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:42\n                        \n                    \n\n\n            \n                \n                        키에 해당하는 데이터를 삭제합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    삭제할 키\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delByPattern\n                        \n                    \n                \n            \n            \n                \n                        \n                    delByPattern(pattern: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:50\n                        \n                    \n\n\n            \n                \n                        패턴에 일치하는 모든 키를 삭제합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                pattern\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    삭제할 키의 패턴\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:24\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        키에 해당하는 데이터를 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    조회할 키\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                저장된 데이터 또는 undefined\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: T, ttlMs?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/redis/redis.service.ts:34\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        키-값 쌍을 저장합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    저장할 키\n\n                                            \n                                        \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    저장할 값\n\n                                            \n                                        \n                                        \n                                                ttlMs\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    만료 시간(밀리초, 옵션)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport Keyv from 'keyv';\nimport { KEYV_TOKEN } from './redis.constants';\nimport KeyvRedis from 'keyv-redis';\nimport type { Redis } from 'ioredis';\n\n/**\n * Redis 캐싱 기능을 제공하는 서비스\n * \n * 키-값 저장소 기반으로 데이터의 캐싱, 삭제, 패턴 기반 삭제 등의 기능을 제공합니다.\n */\n@Injectable()\nexport class RedisService {\n  constructor(\n    @Inject(KEYV_TOKEN)\n    private readonly keyv: Keyv,\n  ) { }\n\n  /**\n   * 키에 해당하는 데이터를 조회합니다\n   * @param key 조회할 키\n   * @returns 저장된 데이터 또는 undefined\n   */\n  async get(key: string): Promise {\n    return this.keyv.get(key);\n  }\n\n  /**\n   * 키-값 쌍을 저장합니다\n   * @param key 저장할 키\n   * @param value 저장할 값\n   * @param ttlMs 만료 시간(밀리초, 옵션)\n   */\n  async set(key: string, value: T, ttlMs?: number): Promise {\n    await this.keyv.set(key, value, ttlMs);\n  }\n\n  /**\n   * 키에 해당하는 데이터를 삭제합니다\n   * @param key 삭제할 키\n   */\n  async del(key: string): Promise {\n    await this.keyv.delete(key);\n  }\n\n  /**\n   * 패턴에 일치하는 모든 키를 삭제합니다\n   * @param pattern 삭제할 키의 패턴\n   */\n  async delByPattern(pattern: string): Promise {\n    const adapter = this.keyv.store as KeyvRedis;\n    const client = adapter.redis as Redis;\n    const namespaceSet = (adapter as any)._getNamespace();\n    const allKeys: string[] = await client.smembers(namespaceSet);\n\n    // Match keys where the part after the first colon starts with the given pattern\n    const matched = allKeys.filter((key) => {\n      // Split on the first colon only\n      const [, rest] = key.split(/:(.+)/, 2);\n      return rest.startsWith(pattern);\n    });\n\n    if (matched.length > 0) {\n      await client.del(...matched);\n      await client.srem(namespaceSet, ...matched);\n    }\n  }\n\n  /**\n   * 모든 키-값 쌍을 삭제합니다\n   */\n  async clear(): Promise {\n    await this.keyv.clear();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/bearer-token.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                Refresh 토큰 전용 가드\nBearerTokenGuard를 상속받아 토큰 유형을 추가로 검증합니다.\n\n            \n\n            \n                Extends\n            \n            \n                            BearerTokenGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:142\n                        \n                    \n\n\n            \n                \n                        Refresh 토큰 검증 메서드\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                인증 및 토큰 유형 검증 성공 여부\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { AuthService } from \"../auth.service\";\nimport { UsersService } from \"src/users/users.service\";\nimport { Reflector } from \"@nestjs/core\";\nimport { IS_PUBLIC_KEY } from \"src/common/decorator/is-public.decorator\";\nimport { IsPublicEnum } from \"src/common/const/is-public.const\";\nimport { GqlExecutionContext } from \"@nestjs/graphql\";\n\n/**\n * Bearer 토큰 기본 가드\n * \n * @description JWT Bearer 토큰을 검증하고 사용자 정보를 요청 객체에 주입합니다.\n * HTTP와 GraphQL 요청을 모두 지원하며, @IsPublic 데코레이터로 표시된 경로는 인증을 건너뜁니다.\n */\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n    constructor(\n        protected readonly authService: AuthService,\n        protected readonly usersService: UsersService,\n        protected readonly reflector: Reflector,\n    ) {}\n\n    /**\n     * 가드 활성화 여부를 확인하는 메서드\n     * \n     * @param context - 실행 컨텍스트 (HTTP 또는 GraphQL)\n     * @returns 인증 성공 여부\n     * @throws {UnauthorizedException} 토큰이 없거나 유효하지 않을 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n          ]);\n      \n          if (isPublic) {\n            return true;\n          }\n\n        // GraphQL 요청인지 확인하고, 맞다면 GqlExecutionContext 사용\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest(); // GraphQL 컨텍스트에서 req 가져오기, 없으면 HTTP 컨텍스트 시도\n\n        if (!req) {\n            // 요청 객체를 가져올 수 없는 경우 (예상치 못한 상황)\n            throw new UnauthorizedException('Request object not found in context.');\n        }\n\n        const rawToken = req.headers['authorization']; // 여기서 req.headers 접근\n\n        if (!rawToken) {\n            throw new UnauthorizedException('토큰이 없습니다!');\n        }\n\n        const token = this.authService.extractTokenFromHeader(rawToken, true);\n        const result = await this.authService.verifyToken(token);\n        const user = await this.usersService.getUserByEmail(result.email);\n\n        // req에 user 정보 주입 (GraphQL 컨텍스트와 HTTP 컨텍스트 모두에)\n        if (gqlContext.getContext().req) {\n            gqlContext.getContext().req.user = user;\n            gqlContext.getContext().req.token = token;\n            gqlContext.getContext().req.tokenType = result.type;\n        } else {\n            req.user = user;\n            req.token = token;\n            req.tokenType = result.type;\n        }\n\n        return true;\n    }\n}\n\n/**\n * Access 토큰 전용 가드\n * \n * @description Bearer 토큰 중 Access 토큰만을 허용하는 가드입니다.\n * BearerTokenGuard를 상속받아 토큰 유형을 추가로 검증합니다.\n */\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n    /**\n     * Access 토큰 검증 메서드\n     * \n     * @param context - 실행 컨텍스트\n     * @returns 인증 및 토큰 유형 검증 성공 여부\n     * @throws {UnauthorizedException} Access 토큰이 아닐 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        // 1. 현재 경로가 @IsPublic으로 지정되었는지 확인 (BearerTokenGuard와 동일한 방식)\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n\n        if (isPublic === IsPublicEnum.IS_PUBLIC) {\n            // 공개 경로이면 AccessTokenGuard도 즉시 통과\n            return true;\n        }\n\n        // 2. 공개 경로가 아니라면, BearerTokenGuard의 로직 실행\n        // (토큰 추출, 기본 검증. 실패 시 BearerTokenGuard에서 예외 발생)\n        await super.canActivate(context);\n\n        // 3. BearerTokenGuard가 성공적으로 완료되었다면, req 객체를 올바르게 가져옴\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest();\n\n        if (!req) {\n            // 이 경우는 super.canActivate()가 req를 설정하지 않았거나, 컨텍스트에서 req를 찾을 수 없는 예외적 상황\n            throw new UnauthorizedException('Request object not found in AccessTokenGuard.');\n        }\n\n        if (!req.tokenType) {\n            // BearerTokenGuard에서 tokenType을 설정해야 함\n            throw new UnauthorizedException('Token type not found on request.');\n        }\n\n        if (req.tokenType !== 'access') {\n            throw new UnauthorizedException('Access Token이 아닙니다.');\n        }\n\n        return true;\n    }\n}\n\n/**\n * Refresh 토큰 전용 가드\n * \n * @description Bearer 토큰 중 Refresh 토큰만을 허용하는 가드입니다.\n * BearerTokenGuard를 상속받아 토큰 유형을 추가로 검증합니다.\n */\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n    /**\n     * Refresh 토큰 검증 메서드\n     * \n     * @param context - 실행 컨텍스트\n     * @returns 인증 및 토큰 유형 검증 성공 여부\n     * @throws {UnauthorizedException} Refresh 토큰이 아닐 때\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n\n        // Refresh 토큰 경로는 일반적으로 공개되지 않으므로, 이 조건은 거의 해당되지 않을 수 있습니다.\n        if (isPublic === IsPublicEnum.IS_PUBLIC) {\n            return true;\n        }\n\n        await super.canActivate(context);\n\n        const gqlContext = GqlExecutionContext.create(context);\n        const req = gqlContext.getContext().req || context.switchToHttp().getRequest();\n\n        if (!req) {\n            throw new UnauthorizedException('Request object not found in RefreshTokenGuard.');\n        }\n\n        if (!req.tokenType) {\n            throw new UnauthorizedException('Token type not found on request.');\n        }\n\n        if (req.tokenType !== 'refresh') {\n            throw new UnauthorizedException('Refresh Token이 아닙니다.');\n        }\n\n        return true;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                사용자 등록 데이터 전송 객체\n새로운 사용자 등록 요청 시 필요한 데이터 구조를 정의합니다.\n로그인 DTO를 확장하여 추가적인 사용자 등록 필드를 포함합니다.\n이메일, 비밀번호와 함께 닉네임 정보가 필요합니다.\n\n            \n\n            \n                Extends\n            \n            \n                            LoginDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                nickname\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: '사용자 닉네임', example: 'user123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    사용자 닉네임\n사용자의 프로필 식별을 위한 고유한 닉네임입니다.\n다른 사용자들에게 표시되는 사용자명으로 사용됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: '사용자 이메일 주소', example: 'user@example.com'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LoginDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LoginDto:19\n\n                        \n                    \n\n            \n                \n                    사용자 이메일 주소\n로그인 시 사용자 식별에 사용되는 고유한 이메일 주소입니다.\n유효한 이메일 형식이어야 하며, 시스템에 등록된 이메일이어야 합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: '사용자 비밀번호', example: 'SecurePassword123!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LoginDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LoginDto:29\n\n                        \n                    \n\n            \n                \n                    사용자 비밀번호\n로그인 인증에 사용되는 비밀번호입니다.\n보안을 위해 적절한 복잡도를 가져야 합니다.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\nimport { LoginDto } from \"./login.dto\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**\n * 사용자 등록 데이터 전송 객체\n * \n * 새로운 사용자 등록 요청 시 필요한 데이터 구조를 정의합니다.\n * 로그인 DTO를 확장하여 추가적인 사용자 등록 필드를 포함합니다.\n * 이메일, 비밀번호와 함께 닉네임 정보가 필요합니다.\n */\nexport class RegisterUserDto extends LoginDto {\n    /**\n     * 사용자 닉네임\n     * \n     * 사용자의 프로필 식별을 위한 고유한 닉네임입니다.\n     * 다른 사용자들에게 표시되는 사용자명으로 사용됩니다.\n     */\n    @IsString()\n    @ApiProperty({ description: '사용자 닉네임', example: 'user123'})\n    nickname: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/users/guard/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    사용자 역할(Role) 기반 접근 제어를 담당하는 가드\nHTTP 요청과 GraphQL 요청 모두를 지원하며,\n데코레이터로 지정된 역할 요구사항을 검증합니다.\nExample :```typescript\n@UseGuards(RolesGuard)\n@Roles(RoleEnum.ADMIN)\nasync deleteUser() { ... }Example :\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/users/guard/roles.guard.ts:20\n                            \n                        \n\n                \n                    \n                            RolesGuard 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n메타데이터 리플렉터, 데코레이터에서 설정된 역할 정보를 추출하는 데 사용\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/guard/roles.guard.ts:42\n                        \n                    \n\n\n            \n                \n                        사용자의 역할이 요구사항을 충족하는지 검증합니다.\n\nRoles 데코레이터가 없으면 통과\nHTTP와 GraphQL 요청 모두 지원\n사용자 인증 상태 및 역할 권한 검증\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \n실행 컨텍스트 (HTTP 또는 GraphQL)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                접근 허용 여부\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, ForbiddenException, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { GqlExecutionContext } from \"@nestjs/graphql\"; // GraphQL 실행 컨텍스트 임포트\nimport { ROLES_KEY } from \"../decorator/roles.decorator\";\n\n/**\n * 사용자 역할(Role) 기반 접근 제어를 담당하는 가드\n * \n * HTTP 요청과 GraphQL 요청 모두를 지원하며, \n * 데코레이터로 지정된 역할 요구사항을 검증합니다.\n * \n * @example\n * ```typescript\n * @UseGuards(RolesGuard)\n * @Roles(RoleEnum.ADMIN)\n * async deleteUser() { ... }\n * ```\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n    /**\n     * RolesGuard 생성자\n     * \n     * @param reflector - 메타데이터 리플렉터, 데코레이터에서 설정된 역할 정보를 추출하는 데 사용\n     */\n    constructor(\n        private readonly reflector: Reflector,\n    ) {}\n\n    /**\n     * 사용자의 역할이 요구사항을 충족하는지 검증합니다.\n     * \n     * - Roles 데코레이터가 없으면 통과\n     * - HTTP와 GraphQL 요청 모두 지원\n     * - 사용자 인증 상태 및 역할 권한 검증\n     * \n     * @param context - 실행 컨텍스트 (HTTP 또는 GraphQL)\n     * @returns 접근 허용 여부\n     * @throws UnauthorizedException - 토큰이 없거나 요청 컨텍스트에 접근할 수 없는 경우\n     * @throws ForbiddenException - 사용자 역할이 요구사항과 일치하지 않는 경우\n     */\n    canActivate(context: ExecutionContext): boolean {\n        const requiredRole = this.reflector.getAllAndOverride(\n            ROLES_KEY,\n            [\n                context.getHandler(),\n                context.getClass(),\n            ]\n        );\n\n        // Roles Annotation이 등록되어있지 않음\n        if (!requiredRole) {\n            return true;\n        }\n\n        let request;\n\n        // HTTP 요청과 GraphQL 요청 모두 처리\n        if (context.getType() === 'http') {\n            // REST API 요청인 경우\n            request = context.switchToHttp().getRequest();\n        } else {\n            // GraphQL 요청인 경우\n            const gqlContext = GqlExecutionContext.create(context);\n            request = gqlContext.getContext().req;\n        }\n\n        // 요청 객체가 없는 경우 (예상치 못한 컨텍스트)\n        if (!request) {\n            throw new UnauthorizedException('요청 컨텍스트에 접근할 수 없습니다.');\n        }\n\n        const { user } = request;\n\n        if (!user) {\n            throw new UnauthorizedException(\n                `토큰을 제공해주세요.`\n            );\n        }\n\n        if (user.role !== requiredRole) {\n            throw new ForbiddenException(\n                `이 작업을 수행할 권한이 없습니다. ${requiredRole} 권한이 필요합니다.`\n            );\n        }\n\n        return true;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SavePayload.html":{"url":"interfaces/SavePayload.html","title":"interface - SavePayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SavePayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chats/messages/messages.service.ts\n        \n\n\n            \n                Description\n            \n            \n                메시지 저장 데이터 인터페이스\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            author\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            chat\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            whisperTargetUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        author:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chat:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        whisperTargetUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        whisperTargetUser:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { MessagesModel } from \"./entity/messages.entity\";\nimport { FindManyOptions, Repository } from \"typeorm\";\nimport { CommonService } from \"src/common/common.service\";\nimport { BasePaginationDto } from \"src/common/dto/base-pagination.dto\";\nimport { CreateMessagesDto } from \"./dto/create-messages.dto\";\n\n/**\n * 메시지 저장 데이터 인터페이스\n */\ninterface SavePayload {\n    author: { id: number };\n    message: string;\n    chat?: { id: number };\n    whisperTargetUser?: { id: number };\n}\n\n/**\n * 채팅 메시지 관련 비즈니스 로직을 처리하는 서비스\n * 메시지 생성 및 조회 기능을 제공합니다\n */\n@Injectable()\nexport class ChatsMessagesService {\n    constructor(\n        @InjectRepository(MessagesModel)\n        private readonly messagesRepository: Repository,\n        private readonly commonService: CommonService,\n    ) {}\n\n    /**\n     * 새로운 메시지를 생성합니다\n     * @param dto 메시지 생성 정보가 담긴 DTO\n     * @param authorId 작성자 ID\n     * @returns 생성된 메시지 정보\n     */\n    async createMessage(\n        dto: CreateMessagesDto,\n        authorId: number,\n    ) {\n        const savePayload: SavePayload = {\n            author: { id: authorId },\n            message: dto.message,\n        };\n\n        if (dto.chatId !== undefined && dto.chatId !== null) {\n            savePayload.chat = { id: dto.chatId };\n        }\n\n        if (dto.whisperTargetId !== undefined && dto.whisperTargetId !== null) {\n            savePayload.whisperTargetUser = { id: dto.whisperTargetId };\n        }\n    \n        const message = await this.messagesRepository.save(savePayload);\n\n        return this.messagesRepository.findOne({\n            where: {\n                id: message.id,\n            },\n            relations: {\n                chat: true,\n                whisperTargetUser: true,\n            }\n        });\n    }\n\n    /**\n     * 메시지 목록을 페이징하여 조회합니다\n     * @param dto 페이징 정보가 담긴 DTO\n     * @param overrideFindOptions 추가적인 조회 옵션\n     * @returns 페이징된 메시지 목록\n     */\n    paginateMessages(\n        dto: BasePaginationDto,\n        overrideFindOptions: FindManyOptions,\n    ) {\n        return this.commonService.paginate(\n            dto,\n            this.messagesRepository,\n            overrideFindOptions,\n            'messages',\n        )\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SocketBearerTokenGuard.html":{"url":"guards/SocketBearerTokenGuard.html","title":"guard - SocketBearerTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SocketBearerTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/socket/socket-bearer-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    WebSocket 연결에 대한 Bearer 토큰 인증 가드\nWebSocket 핸드셰이크 과정에서 Authorization 헤더의 Bearer 토큰을 검증하고,\n유효한 토큰인 경우 사용자 정보를 소켓 객체에 첨부합니다.\nExample :```typescript\n@UseGuards(SocketBearerTokenGuard)\n@SubscribeMessage('join-room')\nhandleJoinRoom(client: Socket, data: any) { ... }Example :\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/socket/socket-bearer-token.guard.ts:20\n                            \n                        \n\n                \n                    \n                            SocketBearerTokenGuard 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n인증 서비스, 토큰 추출 및 검증에 사용\n\n\n                                                        \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \n사용자 서비스, 토큰에서 추출한 이메일로 사용자 정보 조회에 사용\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/socket/socket-bearer-token.guard.ts:45\n                        \n                    \n\n\n            \n                \n                        WebSocket 연결에 대한 토큰 인증을 수행합니다.\n인증 과정:\n\nWebSocket 핸드셰이크에서 Authorization 헤더 추출\nBearer 토큰 형식 검증 및 토큰 추출\n토큰 유효성 검증 및 페이로드 디코딩\n사용자 정보 조회 및 소켓 객체에 첨부\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWebSocket 실행 컨텍스트\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                인증 성공 여부를 나타내는 Promise\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { WsException } from \"@nestjs/websockets\";\nimport { AuthService } from \"src/auth/auth.service\";\nimport { UsersService } from \"src/users/users.service\";\n\n/**\n * WebSocket 연결에 대한 Bearer 토큰 인증 가드\n * \n * WebSocket 핸드셰이크 과정에서 Authorization 헤더의 Bearer 토큰을 검증하고,\n * 유효한 토큰인 경우 사용자 정보를 소켓 객체에 첨부합니다.\n * \n * @example\n * ```typescript\n * @UseGuards(SocketBearerTokenGuard)\n * @SubscribeMessage('join-room')\n * handleJoinRoom(client: Socket, data: any) { ... }\n * ```\n */\n@Injectable()\nexport class SocketBearerTokenGuard implements CanActivate {\n    /**\n     * SocketBearerTokenGuard 생성자\n     * \n     * @param authService - 인증 서비스, 토큰 추출 및 검증에 사용\n     * @param usersService - 사용자 서비스, 토큰에서 추출한 이메일로 사용자 정보 조회에 사용\n     */\n    constructor(\n        private readonly authService: AuthService,\n        private readonly usersService: UsersService,\n    ) {}\n\n    /**\n     * WebSocket 연결에 대한 토큰 인증을 수행합니다.\n     * \n     * 인증 과정:\n     * 1. WebSocket 핸드셰이크에서 Authorization 헤더 추출\n     * 2. Bearer 토큰 형식 검증 및 토큰 추출\n     * 3. 토큰 유효성 검증 및 페이로드 디코딩\n     * 4. 사용자 정보 조회 및 소켓 객체에 첨부\n     * \n     * @param context - WebSocket 실행 컨텍스트\n     * @returns 인증 성공 여부를 나타내는 Promise\n     * @throws WsException - 토큰이 없거나 유효하지 않은 경우\n     */\n    async canActivate(context: ExecutionContext): Promise {\n        const socket = context.switchToWs().getClient();\n\n        const headers = socket.handshake.headers;\n\n        const rawToken = headers['authorization']\n\n        if(!rawToken) {\n            throw new WsException('토큰이 없습니다!');\n        }\n\n        try {\n            const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n            const payload = await this.authService.verifyToken(token);\n            const user = await this.usersService.getUserByEmail(payload.email);\n\n            socket.user = user;\n            socket.token = token;\n            socket.tokenType = payload.tokenType;\n\n            return true;\n        } catch (error) {\n            throw new WsException(`${error} : 토큰이 유효하지 않습니다.`);\n        }\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionInterceptor.html":{"url":"injectables/TransactionInterceptor.html","title":"injectable - TransactionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/transaction.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                데이터베이스 트랜잭션을 자동으로 관리하는 인터셉터\n이 인터셉터는 HTTP 요청 처리 중에 데이터베이스 트랜잭션을 시작하고,\n요청이 성공적으로 완료되면 커밋하고, 실패하면 롤백합니다.\n주요 기능:\n\n요청 시작 시 자동으로 트랜잭션 시작\n요청 성공 시 자동 커밋\n요청 실패 시 자동 롤백\n쿼리 러너 자동 해제\n\n사용법:\nExample :@UseInterceptors(TransactionInterceptor)\n@Controller('users')\nexport class UsersController {\n  // 컨트롤러 메서드들이 자동으로 트랜잭션 내에서 실행됩니다\n}주의사항:\n\n트랜잭션 내에서 실행되는 모든 데이터베이스 작업은 req.queryRunner를 사용해야 합니다\n중첩된 트랜잭션은 지원하지 않습니다\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptor/transaction.interceptor.ts:35\n                            \n                        \n\n                \n                    \n                            TransactionInterceptor 생성자\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                TypeORM DataSource 인스턴스 - 데이터베이스 연결 및 쿼리 러너 생성을 담당\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                        \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/transaction.interceptor.ts:72\n                        \n                    \n\n\n            \n                \n                        인터셉터의 핵심 메서드 - 트랜잭션을 관리하며 요청을 처리합니다\n처리 과정:\n\n쿼리 러너 생성 및 연결\n트랜잭션 시작\nRequest 객체에 쿼리 러너 주입\n요청 처리 파이프라인 실행\n성공 시 커밋, 실패 시 롤백\n쿼리 러너 해제\n\nExample :```typescript\n// 컨트롤러에서 쿼리 러너 사용\nasync createUser(req: Request) {\n  const queryRunner = req.queryRunner;\n  return await this.userRepository.save(userData, { queryRunner });\n}Example :\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    실행 컨텍스트 - HTTP 요청/응답 정보에 접근할 수 있는 NestJS 컨텍스트\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    다음 핸들러 - 실제 컨트롤러 메서드를 호출하는 핸들러\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                Promise> 처리된 응답을 포함하는 Observable을 반환하는 Promise\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, InternalServerErrorException, NestInterceptor } from \"@nestjs/common\";\nimport { catchError, Observable, tap } from \"rxjs\";\nimport { DataSource } from \"typeorm\";\n\n/**\n * 데이터베이스 트랜잭션을 자동으로 관리하는 인터셉터\n * \n * 이 인터셉터는 HTTP 요청 처리 중에 데이터베이스 트랜잭션을 시작하고,\n * 요청이 성공적으로 완료되면 커밋하고, 실패하면 롤백합니다.\n * \n * **주요 기능:**\n * - 요청 시작 시 자동으로 트랜잭션 시작\n * - 요청 성공 시 자동 커밋\n * - 요청 실패 시 자동 롤백\n * - 쿼리 러너 자동 해제\n * \n * **사용법:**\n * ```typescript\n * @UseInterceptors(TransactionInterceptor)\n * @Controller('users')\n * export class UsersController {\n *   // 컨트롤러 메서드들이 자동으로 트랜잭션 내에서 실행됩니다\n * }\n * ```\n * \n * **주의사항:**\n * - 트랜잭션 내에서 실행되는 모든 데이터베이스 작업은 req.queryRunner를 사용해야 합니다\n * - 중첩된 트랜잭션은 지원하지 않습니다\n * \n * @author 개발팀\n * @since 1.0.0\n */\n@Injectable()\nexport class TransactionInterceptor implements NestInterceptor {\n    /**\n     * TransactionInterceptor 생성자\n     * \n     * @param dataSource TypeORM DataSource 인스턴스 - 데이터베이스 연결 및 쿼리 러너 생성을 담당\n     */\n    constructor(\n        private readonly dataSource: DataSource,\n    ){}\n\n    /**\n     * 인터셉터의 핵심 메서드 - 트랜잭션을 관리하며 요청을 처리합니다\n     * \n     * **처리 과정:**\n     * 1. 쿼리 러너 생성 및 연결\n     * 2. 트랜잭션 시작\n     * 3. Request 객체에 쿼리 러너 주입\n     * 4. 요청 처리 파이프라인 실행\n     * 5. 성공 시 커밋, 실패 시 롤백\n     * 6. 쿼리 러너 해제\n     * \n     * @param context 실행 컨텍스트 - HTTP 요청/응답 정보에 접근할 수 있는 NestJS 컨텍스트\n     * @param next 다음 핸들러 - 실제 컨트롤러 메서드를 호출하는 핸들러\n     * \n     * @returns Promise> 처리된 응답을 포함하는 Observable을 반환하는 Promise\n     * \n     * @throws InternalServerErrorException 트랜잭션 처리 중 오류가 발생한 경우\n     * \n     * @example\n     * ```typescript\n     * // 컨트롤러에서 쿼리 러너 사용\n     * async createUser(req: Request) {\n     *   const queryRunner = req.queryRunner;\n     *   return await this.userRepository.save(userData, { queryRunner });\n     * }\n     * ```\n     */\n    async intercept(context: ExecutionContext, next: CallHandler): Promise> {\n        const req = context.switchToHttp().getRequest();\n        /**\n         * 트랜잭션과 관련된 모든 쿼리를 담당할\n         * 쿼리 러너를 생성한다.\n         */\n        const qr = this.dataSource.createQueryRunner();\n\n        // 쿼리 러너에 연결한다.\n        await qr.connect();\n\n        /**\n         * 쿼리 러너에서 트랜잭션을 시작한다.\n         * 이 시점부터 같은 쿼리 러너를 사용하면, 트랜잭션 안에서 데이터베이스 액션을 실행할 수 있다.\n         */\n        await qr.startTransaction();\n\n        req.queryRunner = qr;\n\n        return next.handle().pipe(\n            catchError(\n                async (e) => {\n                    await qr.rollbackTransaction();\n                    await qr.release();\n\n                    throw new InternalServerErrorException(e.message);\n                }\n            ),\n            tap(async () => {\n                await qr.commitTransaction();\n                await qr.release();\n            })\n        )\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentsDto.html":{"url":"classes/UpdateCommentsDto.html","title":"class - UpdateCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/comments/dto/update-comments.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                댓글 수정 데이터 전송 객체\n댓글 수정 요청 시 필요한 데이터 구조를 정의합니다.\nCreateCommentsDto를 확장하여 댓글 수정에 필요한 모든 필드를 포함합니다.\n\n            \n\n            \n                Extends\n            \n            \n                            CreateCommentsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '댓글 내용'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateCommentsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateCommentsDto:17\n\n                        \n                    \n\n            \n                \n                    댓글 내용\nCommentsModel에서 상속받은 필드를 명시적으로 재선언\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateCommentsDto } from \"./create-comments.dto\";\n\n/**\n * 댓글 수정 데이터 전송 객체\n * \n * 댓글 수정 요청 시 필요한 데이터 구조를 정의합니다.\n * CreateCommentsDto를 확장하여 댓글 수정에 필요한 모든 필드를 포함합니다.\n */\nexport class UpdateCommentsDto extends CreateCommentsDto {\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                게시물 수정 데이터 전송 객체\n게시물 수정 요청 시 필요한 데이터 구조를 정의합니다.\nCreatePostDto를 부분적으로 상속받아 모든 필드를 선택적으로 만듭니다.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: stringValidationMessage})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:35\n                        \n                    \n\n            \n                \n                    게시물 내용\n수정할 게시물의 새로운 내용입니다.\n문자열 형태여야 하며 선택적 필드입니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: stringValidationMessage})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:23\n                        \n                    \n\n            \n                \n                    게시물 제목\n수정할 게시물의 새로운 제목입니다.\n문자열 형태여야 하며 선택적 필드입니다.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreatePostDto } from \"./create-post.dto\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { stringValidationMessage } from \"src/common/validation-message/string-validation.message\";\n\n/**\n * 게시물 수정 데이터 전송 객체\n * \n * 게시물 수정 요청 시 필요한 데이터 구조를 정의합니다.\n * CreatePostDto를 부분적으로 상속받아 모든 필드를 선택적으로 만듭니다.\n */\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\n    /**\n     * 게시물 제목\n     * \n     * 수정할 게시물의 새로운 제목입니다.\n     * 문자열 형태여야 하며 선택적 필드입니다.\n     */\n    @IsString({\n        message: stringValidationMessage,\n    })\n    @IsOptional()\n    title?: string;\n\n    /**\n     * 게시물 내용\n     * \n     * 수정할 게시물의 새로운 내용입니다.\n     * 문자열 형태여야 하며 선택적 필드입니다.\n     */\n    @IsString({\n        message: stringValidationMessage,\n    })\n    @IsOptional()\n    content?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserFollowersModel.html":{"url":"entities/UserFollowersModel.html","title":"entity - UserFollowersModel","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserFollowersModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/user-followers.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                사용자 팔로워 관계 엔티티 (UserFollowersModel)\n사용자 간의 팔로우 관계를 나타내는 중간 테이블 엔티티입니다.\nBaseModel을 상속받습니다.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                followee\n                            \n                            \n                                    \n                                follower\n                            \n                            \n                                    \n                                isConfirmed\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        followee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followees)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-followers.entity.ts:31\n                        \n                    \n\n            \n                \n                    팔로우를 받는 사용자 (팔로이)\nUsersModel과의 다대일(ManyToOne) 관계입니다.\n이 관계에서 'followee'는 팔로우 대상이 되는 주체를 나타냅니다.\nUsersModel의 'followees' 필드와 연결됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        follower\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.followers)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-followers.entity.ts:21\n                        \n                    \n\n            \n                \n                    팔로우를 하는 사용자 (팔로워)\nUsersModel과의 다대일(ManyToOne) 관계입니다.\n이 관계에서 'follower'는 팔로우를 신청하거나 팔로우하고 있는 주체를 나타냅니다.\nUsersModel의 'followers' 필드와 연결됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user-followers.entity.ts:43\n                        \n                    \n\n            \n                \n                    팔로우 확정 여부\n팔로우 요청이 수락되었는지 여부를 나타냅니다.\n기본값은 false (미확정) 입니다.\n비공개 계정의 팔로우 요청/수락 기능 등에 사용될 수 있습니다.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BaseModel } from \"src/common/entity/base.entity\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { UsersModel } from \"./users.entity\";\n\n/**\n * 사용자 팔로워 관계 엔티티 (UserFollowersModel)\n * \n * 사용자 간의 팔로우 관계를 나타내는 중간 테이블 엔티티입니다.\n * BaseModel을 상속받습니다.\n */\n@Entity()\nexport class UserFollowersModel extends BaseModel {\n    /**\n     * 팔로우를 하는 사용자 (팔로워)\n     * \n     * UsersModel과의 다대일(ManyToOne) 관계입니다.\n     * 이 관계에서 'follower'는 팔로우를 신청하거나 팔로우하고 있는 주체를 나타냅니다.\n     * UsersModel의 'followers' 필드와 연결됩니다.\n     */\n    @ManyToOne(() => UsersModel, (user) => user.followers)\n    follower: UsersModel;\n\n    /**\n     * 팔로우를 받는 사용자 (팔로이)\n     * \n     * UsersModel과의 다대일(ManyToOne) 관계입니다.\n     * 이 관계에서 'followee'는 팔로우 대상이 되는 주체를 나타냅니다.\n     * UsersModel의 'followees' 필드와 연결됩니다.\n     */\n    @ManyToOne(() => UsersModel, (user) => user.followees)\n    followee: UsersModel;\n\n    /**\n     * 팔로우 확정 여부\n     * \n     * 팔로우 요청이 수락되었는지 여부를 나타냅니다.\n     * 기본값은 false (미확정) 입니다.\n     * 비공개 계정의 팔로우 요청/수락 기능 등에 사용될 수 있습니다.\n     */\n    @Column({\n        default: false,\n    })\n    isConfirmed: boolean;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                사용자 관련 API 엔드포인트를 제공하는 컨트롤러\n사용자 조회, 팔로우 관리 등의 엔드포인트를 처리합니다.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteFollow\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteFollowCancel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getFollow\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getRequestsFollow\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                patchFollowConfirm\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                postFollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteFollow\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFollow(userId: number, followeeId: number, qr: QueryRunner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('follow/:id')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '언팔로우', description: '내가 팔로우 중인 사용자를 언팔로우합니다.'})@UseInterceptors(TransactionInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:171\n                        \n                    \n\n\n            \n                \n                        팔로우 관계를 삭제합니다 (언팔로우)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                        \n                                                followeeId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    언팔로우할 사용자 ID\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    QueryRunner 인스턴스\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                성공 여부\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteFollowCancel\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFollowCancel(userId: number, followeeId: number, qr: QueryRunner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('follow/:id/cancel')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '팔로우 요청 취소', description: '내가 요청한 팔로우를 취소합니다.'})@UseInterceptors(TransactionInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:90\n                        \n                    \n\n\n            \n                \n                        팔로우 요청을 취소합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                        \n                                                followeeId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    팔로우 요청을 취소할 사용자 ID\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    QueryRunner 인스턴스\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                성공 여부\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getFollow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFollow(userId: number, includeNotConfirmed: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('follow/me')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '팔로우한 사용자 불러오기', description: '나를 팔로우한 사용자들을 불러옵니다. includeNotConfirmed가 true인 경우 -> 내가 아직 수락하지 않은 팔로우들입니다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        사용자의 팔로워 목록을 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                        \n                                                includeNotConfirmed\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    미확인 팔로우 포함 여부\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                팔로워 목록\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getRequestsFollow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestsFollow(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('follow/me/requests')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '팔로우 요청 보기', description: '내가 요청한 미수락된 팔로우들을 확인합니다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        사용자가 요청한 팔로우 목록을 조회합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                팔로우 요청 목록\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '모든 사용자 불러오기', description: 'DB에 등록된 모든 사용자를 불러옵니다.'})@Roles(RoleEnum.ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        모든 사용자 목록을 조회합니다\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                모든 사용자 목록\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        patchFollowConfirm\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchFollowConfirm(userId: number, followerId: number, qr: QueryRunner)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('follow/:id/confirm')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '팔로우 수락', description: '나에게 팔로우 요청한 사용자를 수락합니다.'})@UseInterceptors(TransactionInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:133\n                        \n                    \n\n\n            \n                \n                        팔로우 요청을 수락합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                        \n                                                followerId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    팔로우를 요청한 사용자 ID\n\n                                            \n                                        \n                                        \n                                                qr\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    QueryRunner 인스턴스\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                성공 여부\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        postFollow\n                        \n                    \n                \n            \n            \n                \n                        \n                    postFollow(userId: number, followeeId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('follow/:id')@ApiBearerAuth(AuthScheme.ACCESS)@ApiOperation({summary: '팔로우 요청', description: 'User Id에 해당하는 사용자에게 팔로우 요청하기'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        특정 사용자를 팔로우합니다\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    로그인된 사용자 ID\n\n                                            \n                                        \n                                        \n                                                followeeId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    팔로우할 사용자 ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                성공 여부\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, DefaultValuePipe, Delete, Get, Param, ParseBoolPipe, ParseIntPipe, Patch, Post, Query, UseInterceptors } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Roles } from './decorator/roles.decorator';\nimport { RoleEnum } from './entity/users.entity';\nimport { User } from './decorator/user.decorator';\nimport { TransactionInterceptor } from 'src/common/interceptor/transaction.interceptor';\nimport { QueryRunnerDecorator } from 'src/common/decorator/query-runner.decorator';\nimport { QueryRunner } from 'typeorm';\nimport { ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { AuthScheme } from 'src/common/const/auth-schema.const';\n\n/**\n * 사용자 관련 API 엔드포인트를 제공하는 컨트롤러\n * \n * 사용자 조회, 팔로우 관리 등의 엔드포인트를 처리합니다.\n */\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * 모든 사용자 목록을 조회합니다\n   * @returns 모든 사용자 목록\n   */\n  @Get()\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '모든 사용자 불러오기', \n      description: 'DB에 등록된 모든 사용자를 불러옵니다.' \n  })\n  @Roles(RoleEnum.ADMIN)\n  getUsers() {\n    return this.usersService.getAllUsers();\n  }\n\n  /**\n   * 사용자의 팔로워 목록을 조회합니다\n   * @param userId 로그인된 사용자 ID\n   * @param includeNotConfirmed 미확인 팔로우 포함 여부\n   * @returns 팔로워 목록\n   */\n  @Get('follow/me')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '팔로우한 사용자 불러오기', \n      description: '나를 팔로우한 사용자들을 불러옵니다. includeNotConfirmed가 true인 경우 -> 내가 아직 수락하지 않은 팔로우들입니다.' \n  })\n  async getFollow(\n    @User('id') userId: number,\n    @Query('includeNotConfirmed', new DefaultValuePipe(false), ParseBoolPipe) includeNotConfirmed: boolean,\n  ) {\n    return this.usersService.getFollowers(userId, includeNotConfirmed);\n  }\n\n  /**\n   * 특정 사용자를 팔로우합니다\n   * @param userId 로그인된 사용자 ID\n   * @param followeeId 팔로우할 사용자 ID\n   * @returns 성공 여부\n   */\n  @Post('follow/:id')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '팔로우 요청', \n      description: 'User Id에 해당하는 사용자에게 팔로우 요청하기' \n  })\n  async postFollow(\n    @User('id') userId: number,\n    @Param('id', ParseIntPipe) followeeId: number,\n  ) {\n    await this.usersService.followUser(userId, followeeId);\n\n    return true;\n  }\n\n  /**\n   * 팔로우 요청을 취소합니다\n   * @param userId 로그인된 사용자 ID\n   * @param followeeId 팔로우 요청을 취소할 사용자 ID\n   * @param qr QueryRunner 인스턴스\n   * @returns 성공 여부\n   */\n  @Delete('follow/:id/cancel')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '팔로우 요청 취소', \n      description: '내가 요청한 팔로우를 취소합니다.' \n  })\n  @UseInterceptors(TransactionInterceptor)\n  async deleteFollowCancel(\n    @User('id') userId: number,\n    @Param('id', ParseIntPipe) followeeId: number,\n    @QueryRunnerDecorator() qr: QueryRunner,\n  ) {\n    await this.usersService.deleteFollow(userId, followeeId, qr, false);\n\n    return true;\n  }\n\n  /**\n   * 사용자가 요청한 팔로우 목록을 조회합니다\n   * @param userId 로그인된 사용자 ID\n   * @returns 팔로우 요청 목록\n   */\n  @Get('follow/me/requests')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '팔로우 요청 보기', \n      description: '내가 요청한 미수락된 팔로우들을 확인합니다.' \n  })\n  async getRequestsFollow(\n    @User('id') userId: number,\n  ) {\n    const existing = await this.usersService.getRequestAllFollowee(userId);\n\n    return existing;\n  }\n\n  /**\n   * 팔로우 요청을 수락합니다\n   * @param userId 로그인된 사용자 ID\n   * @param followerId 팔로우를 요청한 사용자 ID\n   * @param qr QueryRunner 인스턴스\n   * @returns 성공 여부\n   */\n  @Patch('follow/:id/confirm')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '팔로우 수락', \n      description: '나에게 팔로우 요청한 사용자를 수락합니다.' \n  })\n  @UseInterceptors(TransactionInterceptor)\n  async patchFollowConfirm(\n    @User('id') userId: number,\n    @Param('id', ParseIntPipe) followerId: number,\n    @QueryRunnerDecorator() qr: QueryRunner,\n  ) {\n    await this.usersService.confirmFollow(followerId, userId, qr);\n\n    await this.usersService.incrementFollowerCount(\n      userId,\n      'followerCount',\n      1,\n      qr,\n    );\n\n    await this.usersService.incrementFollowerCount(\n      followerId,\n      'followeeCount',\n      1,\n      qr,\n    );\n\n    return true;\n  }\n\n  /**\n   * 팔로우 관계를 삭제합니다 (언팔로우)\n   * @param userId 로그인된 사용자 ID\n   * @param followeeId 언팔로우할 사용자 ID\n   * @param qr QueryRunner 인스턴스\n   * @returns 성공 여부\n   */\n  @Delete('follow/:id')\n  @ApiBearerAuth(AuthScheme.ACCESS)\n  @ApiOperation({ \n      summary: '언팔로우', \n      description: '내가 팔로우 중인 사용자를 언팔로우합니다.' \n  })\n  @UseInterceptors(TransactionInterceptor)\n  async deleteFollow(\n    @User('id') userId: number,\n    @Param('id', ParseIntPipe) followeeId: number,\n    @QueryRunnerDecorator() qr: QueryRunner,\n  ) {\n    await this.usersService.deleteFollow(userId, followeeId);\n\n    await this.usersService.decrementFollowerCount(\n      userId,\n      'followeeCount',\n      1,\n      qr,\n    );\n\n    await this.usersService.decrementFollowerCount(\n      followeeId,\n      'followerCount',\n      1,\n      qr,\n    );\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UsersModel.html":{"url":"entities/UsersModel.html","title":"entity - UsersModel","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UsersModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/users.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                사용자 엔티티 모델\n시스템의 사용자 정보를 저장하고 관리하는 메인 엔티티입니다.\nBaseModel을 상속받아 기본 필드들(id, createdAt, updatedAt)을 포함합니다.\nGraphQL의 ObjectType으로도 사용되며, TypeORM Entity로 데이터베이스 테이블과 매핑됩니다.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                chats\n                            \n                            \n                                    \n                                comments\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                followeeCount\n                            \n                            \n                                    \n                                followees\n                            \n                            \n                                    \n                                    \n                                followerCount\n                            \n                            \n                                    \n                                followers\n                            \n                            \n                                    \n                                    \n                                    \n                                google\n                            \n                            \n                                    \n                                    \n                                    \n                                kakao\n                            \n                            \n                                    \n                                messages\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                nickname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                whisperMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        chats\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatsModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, chat => chat.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:188\n                        \n                    \n\n            \n                \n                    사용자가 참여 중인 채팅방 목록\nChatsModel과의 다대다 관계입니다.\n한 사용자는 여러 채팅방에 참여할 수 있고, 한 채팅방에는 여러 사용자가 참여할 수 있습니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommentsModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:224\n                        \n                    \n\n            \n                \n                    사용자가 작성한 댓글 목록\nCommentsModel과의 일대다 관계입니다.\n한 사용자는 여러 개의 댓글을 작성할 수 있습니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({unique: true})@IsString({message: stringValidationMessage})@IsEmail({}, {message: emailValidationMessage})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:122\n                        \n                    \n\n            \n                \n                    사용자 이메일 주소\n사용자의 이메일 주소로, 로그인 및 인증에 사용됩니다.\n시스템 내에서 고유해야 하며, 유효한 이메일 형식이어야 합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        followeeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:280\n                        \n                    \n\n            \n                \n                    팔로잉 수\n이 사용자가 팔로우하는 사람들의 총 개수입니다.\n기본값은 0이며, 팔로우 관계가 생성/삭제될 때 업데이트됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        followees\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserFollowersModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ufm => ufm.followee)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:250\n                        \n                    \n\n            \n                \n                    이 사용자가 팔로우하는 사용자들의 관계 정보\nUserFollowersModel과의 일대다 관계입니다.\n이 사용자가 팔로우하는 다른 사용자들과의 관계를 나타냅니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        followerCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:265\n                        \n                    \n\n            \n                \n                    팔로워 수\n이 사용자를 팔로우하는 사람들의 총 개수입니다.\n기본값은 0이며, 팔로우 관계가 생성/삭제될 때 업데이트됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        followers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserFollowersModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, ufm => ufm.follower)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:237\n                        \n                    \n\n            \n                \n                    이 사용자를 팔로우하는 사용자들의 관계 정보\nUserFollowersModel과의 일대다 관계입니다.\n이 사용자를 팔로우하는 다른 사용자들과의 관계를 나타냅니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        google\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({unique: true, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:62\n                        \n                    \n\n            \n                \n                    Google OAuth 식별자\nGoogle 소셜 로그인을 통해 가입한 사용자의 고유 식별자입니다.\nnull 값을 허용하며, 시스템 내에서 고유해야 합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        kakao\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@Column({unique: true, nullable: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:79\n                        \n                    \n\n            \n                \n                    Kakao OAuth 식별자\nKakao 소셜 로그인을 통해 가입한 사용자의 고유 식별자입니다.\nnull 값을 허용하며, 시스템 내에서 고유해야 합니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MessagesModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, message => message.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:200\n                        \n                    \n\n            \n                \n                    사용자가 전송한 메시지 목록\nMessagesModel과의 일대다 관계입니다.\n한 사용자는 여러 개의 메시지를 보낼 수 있습니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column({length: 20, unique: true})@IsString({message: stringValidationMessage})@Length(1, 20, {message: lengthValidationMessage})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:101\n                        \n                    \n\n            \n                \n                    사용자 닉네임\n사용자가 설정한 별명으로, 시스템 내에서 고유해야 합니다.\n최소 1자에서 최대 20자까지 허용됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@Column()@IsString({message: stringValidationMessage})@Length(3, 8, {message: lengthValidationMessage})@Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:146\n                        \n                    \n\n            \n                \n                    사용자 비밀번호\n사용자 계정의 비밀번호입니다.\n요청 시에는 받지만 응답 시에는 보안상 제외됩니다.\n최소 3자에서 최대 8자까지 허용됩니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostsModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:175\n                        \n                    \n\n            \n                \n                    사용자가 작성한 게시물 목록\nPostsModel과의 일대다 관계입니다.\n한 사용자는 여러 개의 게시물을 작성할 수 있습니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)@Column({type: 'enum', enum: RoleEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:163\n                        \n                    \n\n            \n                \n                    사용자 역할\n사용자의 시스템 내 권한 수준을 나타냅니다.\nRoleEnum 타입을 사용하며, 기본값은 일반 사용자(USER)입니다.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        whisperMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MessagesModel[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, message => message.whisperTargetUser)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/users.entity.ts:212\n                        \n                    \n\n            \n                \n                    사용자가 받은 귓속말 메시지 목록\nMessagesModel과의 일대다 관계입니다.\n특정 사용자를 대상으로 하는 개인 메시지들을 나타냅니다.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from \"class-transformer\";\nimport { IsEmail, IsString, Length } from \"class-validator\";\nimport { MessagesModel } from \"src/chats/messages/entity/messages.entity\";\nimport { ChatsModel } from \"src/chats/entity/chats.entity\";\nimport { BaseModel } from \"src/common/entity/base.entity\";\nimport { emailValidationMessage } from \"src/common/validation-message/email-validation.message\";\nimport { lengthValidationMessage } from \"src/common/validation-message/length-validation.message\";\nimport { stringValidationMessage } from \"src/common/validation-message/string-validation.message\";\nimport { PostsModel } from \"src/posts/entity/posts.entity\";\nimport { Column, Entity, JoinTable, ManyToMany, OneToMany } from \"typeorm\";\nimport { CommentsModel } from \"src/posts/comments/entity/comments.entity\";\nimport { UserFollowersModel } from \"./user-followers.entity\";\nimport { Field, ObjectType, registerEnumType } from \"@nestjs/graphql\";\n\n/**\n * 사용자 역할 열거형\n * \n * 시스템 내에서 사용자가 가질 수 있는 역할을 정의합니다.\n * \n * @enum {string}\n */\nexport enum RoleEnum {\n    /** 일반 사용자 */\n    USER = 'user',\n    /** 관리자 */\n    ADMIN = 'admin',\n}\n\nregisterEnumType(RoleEnum, {\n    name: 'RoleEnum', // GraphQL 스키마에 표시될 Enum의 이름\n    description: 'User roles', // 선택적 설명\n});\n\n/**\n * 사용자 엔티티 모델\n * \n * 시스템의 사용자 정보를 저장하고 관리하는 메인 엔티티입니다.\n * BaseModel을 상속받아 기본 필드들(id, createdAt, updatedAt)을 포함합니다.\n * GraphQL의 ObjectType으로도 사용되며, TypeORM Entity로 데이터베이스 테이블과 매핑됩니다.\n * \n * @class UsersModel\n * @extends BaseModel\n */\n@ObjectType()\n@Entity()\nexport class UsersModel extends BaseModel {\n    /**\n     * Google OAuth 식별자\n     * \n     * Google 소셜 로그인을 통해 가입한 사용자의 고유 식별자입니다.\n     * null 값을 허용하며, 시스템 내에서 고유해야 합니다.\n     * \n     * @type {string}\n     * @memberof UsersModel\n     */\n    @Field({ nullable: true })\n    @Column({\n        unique: true,\n        nullable: true,\n    })\n    @IsString()\n    google: string;\n\n    /**\n     * Kakao OAuth 식별자\n     * \n     * Kakao 소셜 로그인을 통해 가입한 사용자의 고유 식별자입니다.\n     * null 값을 허용하며, 시스템 내에서 고유해야 합니다.\n     * \n     * @type {string}\n     * @memberof UsersModel\n     */\n    @Field({ nullable: true })\n    @Column({\n        unique: true,\n        nullable: true,\n    })\n    @IsString()\n    kakao: string;\n\n    /**\n     * 사용자 닉네임\n     * \n     * 사용자가 설정한 별명으로, 시스템 내에서 고유해야 합니다.\n     * 최소 1자에서 최대 20자까지 허용됩니다.\n     * \n     * @type {string}\n     * @memberof UsersModel\n     */\n    @Field()\n    @Column({\n        length: 20,\n        unique: true,\n    })\n    @IsString({\n        message: stringValidationMessage,\n    })\n    @Length(1, 20, {\n        message: lengthValidationMessage,\n    })\n    nickname: string;\n\n    /**\n     * 사용자 이메일 주소\n     * \n     * 사용자의 이메일 주소로, 로그인 및 인증에 사용됩니다.\n     * 시스템 내에서 고유해야 하며, 유효한 이메일 형식이어야 합니다.\n     * \n     * @type {string}\n     * @memberof UsersModel\n     */\n    @Field()\n    @Column({\n        unique: true,\n    })\n    @IsString({\n        message: stringValidationMessage,\n    })\n    @IsEmail({}, {\n        message: emailValidationMessage,\n    })\n    email: string;\n\n    /**\n     * 사용자 비밀번호\n     * \n     * 사용자 계정의 비밀번호입니다.\n     * 요청 시에는 받지만 응답 시에는 보안상 제외됩니다.\n     * 최소 3자에서 최대 8자까지 허용됩니다.\n     * \n     * @type {string}\n     * @memberof UsersModel\n     */\n    @Field()\n    @Column()\n    @IsString({\n        message: stringValidationMessage,\n    })\n    @Length(3, 8, {\n        message: lengthValidationMessage,\n    })\n    \n    @Exclude({\n        toPlainOnly: true,\n    })\n    password: string;\n\n    /**\n     * 사용자 역할\n     * \n     * 사용자의 시스템 내 권한 수준을 나타냅니다.\n     * RoleEnum 타입을 사용하며, 기본값은 일반 사용자(USER)입니다.\n     * \n     * @type {RoleEnum}\n     * @memberof UsersModel\n     */\n    @Field(() => RoleEnum)\n    @Column({\n        type: 'enum',\n        enum: RoleEnum,\n        default: RoleEnum.USER,\n    })\n    role: RoleEnum;\n\n    /**\n     * 사용자가 작성한 게시물 목록\n     * \n     * PostsModel과의 일대다 관계입니다.\n     * 한 사용자는 여러 개의 게시물을 작성할 수 있습니다.\n     * \n     * @type {PostsModel[]}\n     * @memberof UsersModel\n     */\n    @OneToMany(() => PostsModel, (post) => post.author)\n    posts: PostsModel[]\n\n    /**\n     * 사용자가 참여 중인 채팅방 목록\n     * \n     * ChatsModel과의 다대다 관계입니다.\n     * 한 사용자는 여러 채팅방에 참여할 수 있고, 한 채팅방에는 여러 사용자가 참여할 수 있습니다.\n     * \n     * @type {ChatsModel[]}\n     * @memberof UsersModel\n     */\n    @ManyToMany(() => ChatsModel, (chat) => chat.users)\n    @JoinTable()\n    chats: ChatsModel[];\n\n    /**\n     * 사용자가 전송한 메시지 목록\n     * \n     * MessagesModel과의 일대다 관계입니다.\n     * 한 사용자는 여러 개의 메시지를 보낼 수 있습니다.\n     * \n     * @type {MessagesModel[]}\n     * @memberof UsersModel\n     */\n    @OneToMany(() => MessagesModel, (message) => message.author)\n    messages: MessagesModel[];\n\n    /**\n     * 사용자가 받은 귓속말 메시지 목록\n     * \n     * MessagesModel과의 일대다 관계입니다.\n     * 특정 사용자를 대상으로 하는 개인 메시지들을 나타냅니다.\n     * \n     * @type {MessagesModel[]}\n     * @memberof UsersModel\n     */\n    @OneToMany(() => MessagesModel, (message) => message.whisperTargetUser)\n    whisperMessages : MessagesModel[];\n\n    /**\n     * 사용자가 작성한 댓글 목록\n     * \n     * CommentsModel과의 일대다 관계입니다.\n     * 한 사용자는 여러 개의 댓글을 작성할 수 있습니다.\n     * \n     * @type {CommentsModel[]}\n     * @memberof UsersModel\n     */\n    @OneToMany(() => CommentsModel, (comment) => comment.author)\n    comments: CommentsModel[];\n\n    /**\n     * 이 사용자를 팔로우하는 사용자들의 관계 정보\n     * \n     * UserFollowersModel과의 일대다 관계입니다.\n     * 이 사용자를 팔로우하는 다른 사용자들과의 관계를 나타냅니다.\n     * \n     * @type {UserFollowersModel[]}\n     * @memberof UsersModel\n     */\n    // 나를 팔로우하고 있는 사람들\n    @OneToMany(() => UserFollowersModel, (ufm) => ufm.follower)\n    followers: UserFollowersModel[];\n\n    /**\n     * 이 사용자가 팔로우하는 사용자들의 관계 정보\n     * \n     * UserFollowersModel과의 일대다 관계입니다.\n     * 이 사용자가 팔로우하는 다른 사용자들과의 관계를 나타냅니다.\n     * \n     * @type {UserFollowersModel[]}\n     * @memberof UsersModel\n     */\n    // 내가 팔로우하고 있는 사람들\n    @OneToMany(() => UserFollowersModel, (ufm) => ufm.followee)\n    followees: UserFollowersModel[];\n\n    /**\n     * 팔로워 수\n     * \n     * 이 사용자를 팔로우하는 사람들의 총 개수입니다.\n     * 기본값은 0이며, 팔로우 관계가 생성/삭제될 때 업데이트됩니다.\n     * \n     * @type {number}\n     * @memberof UsersModel\n     */\n    @Field()\n    @Column({\n        default: 0,\n    })\n    followerCount: number;\n\n    /**\n     * 팔로잉 수\n     * \n     * 이 사용자가 팔로우하는 사람들의 총 개수입니다.\n     * 기본값은 0이며, 팔로우 관계가 생성/삭제될 때 업데이트됩니다.\n     * \n     * @type {number}\n     * @memberof UsersModel\n     */\n    @Field()\n    @Column({\n        default: 0,\n    })\n    followeeCount: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModel } from './entity/users.entity';\nimport { UserFollowersModel } from './entity/user-followers.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UsersModel, UserFollowersModel])],\n  exports: [UsersService],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WsErrorFilter.html":{"url":"classes/WsErrorFilter.html","title":"class - WsErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WsErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception-filter/ws.exception-filter.ts\n        \n\n\n            \n                Description\n            \n            \n                WebSocket 예외 필터\nWebSocket 통신 중 발생하는 HTTP 예외를 처리합니다.\n예외 정보를 클라이언트에게 'exception' 이벤트로 전달합니다.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exception-filter/ws.exception-filter.ts:21\n                        \n                    \n\n\n            \n                \n                        예외 처리 메서드\nWebSocket 연결에서 발생한 HTTP 예외를 처리하고\n클라이언트에게 예외 정보를 전달합니다.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    발생한 HTTP 예외\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    실행 컨텍스트 호스트\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport {  BaseWsExceptionFilter } from '@nestjs/websockets';\n\n/**\n * WebSocket 예외 필터\n * \n * WebSocket 통신 중 발생하는 HTTP 예외를 처리합니다.\n * 예외 정보를 클라이언트에게 'exception' 이벤트로 전달합니다.\n */\n@Catch(HttpException)\nexport class WsErrorFilter extends BaseWsExceptionFilter {\n  /**\n   * 예외 처리 메서드\n   * \n   * WebSocket 연결에서 발생한 HTTP 예외를 처리하고\n   * 클라이언트에게 예외 정보를 전달합니다.\n   * \n   * @param exception 발생한 HTTP 예외\n   * @param host 실행 컨텍스트 호스트\n   */\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const socket = host.switchToWs().getClient();\n\n    socket.emit(\n        'exception',\n        {\n            data: exception.getResponse(),\n        }\n    )\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                90 %\n                (10/11)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/guard/basic-token.guard.ts\n            \n            guard\n            BasicTokenGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            guard\n            BearerTokenGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/guard/google-auth.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/guard/kakao-auth.guard.ts\n            \n            injectable\n            KakaoAuthGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/guard/socket/socket-bearer-token.guard.ts\n            \n            guard\n            SocketBearerTokenGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/pipe/password.pipe.ts\n            \n            injectable\n            MaxLengthPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/pipe/password.pipe.ts\n            \n            injectable\n            MinLengthPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/pipe/password.pipe.ts\n            \n            injectable\n            PasswordPipe\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/kakao.strategy.ts\n            \n            injectable\n            KakaoStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/chats/chats.controller.ts\n            \n            controller\n            ChatsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/chats/chats.gateway.ts\n            \n            class\n            ChatsGateway\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/chats/chats.service.ts\n            \n            injectable\n            ChatsService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/chats/dto/create-chat.dto.ts\n            \n            class\n            CreateChatDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/chats/dto/enter-chat.dto.ts\n            \n            class\n            EnterChatDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/chats/dto/paginate-chat.dto.ts\n            \n            class\n            PaginateChatDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/chats/entity/chats.entity.ts\n            \n            entity\n            ChatsModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chats/messages/dto/create-messages.dto.ts\n            \n            class\n            CreateMessagesDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/chats/messages/entity/messages.entity.ts\n            \n            entity\n            MessagesModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chats/messages/messages.controller.ts\n            \n            controller\n            MessagesController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/chats/messages/messages.service.ts\n            \n            injectable\n            ChatsMessagesService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/chats/messages/messages.service.ts\n            \n            interface\n            SavePayload\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/common/common.controller.ts\n            \n            controller\n            CommonController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/common.service.ts\n            \n            injectable\n            CommonService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                        src/common/const/filter-mapper.const.ts\n            \n            variable\n            FILTER_MAPPER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/common/const/path.const.ts\n            \n            variable\n            POST_IMAGE_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/const/path.const.ts\n            \n            variable\n            POST_PUBLIC_IMAGE_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/const/path.const.ts\n            \n            variable\n            POSTS_FOLDER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/const/path.const.ts\n            \n            variable\n            PROJECT_ROOT_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/const/path.const.ts\n            \n            variable\n            PUBLIC_FOLDER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/const/path.const.ts\n            \n            variable\n            PUBLIC_FOLDER_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/const/path.const.ts\n            \n            variable\n            TEMP_FOLDER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/const/path.const.ts\n            \n            variable\n            TEMP_FOLDER_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/is-public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/is-public.decorator.ts\n            \n            variable\n            IsPublic\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/query-runner.decorator.ts\n            \n            variable\n            QueryRunnerDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/rate-limiter.decorator.ts\n            \n            interface\n            RateLimitOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/common/decorator/rate-limiter.decorator.ts\n            \n            variable\n            RATE_LIMITER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/common/decorator/rate-limiter.decorator.ts\n            \n            variable\n            RateLimiter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/dto/base-pagination.dto.ts\n            \n            class\n            BasePaginationDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/common/entity/base.entity.ts\n            \n            class\n            BaseModel\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/entity/image.entity.ts\n            \n            entity\n            ImageModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exception-filter/http.exception-filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/exception-filter/ws.exception-filter.ts\n            \n            class\n            WsErrorFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/guards/rate-limiter.guard.ts\n            \n            guard\n            RateLimiterGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/interceptor/log.interceptor.ts\n            \n            injectable\n            LogInterceptor\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/interceptor/transaction.interceptor.ts\n            \n            injectable\n            TransactionInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interfaces/provider-data.interface.ts\n            \n            interface\n            ProviderData\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/common/middleware/log.middleware.ts\n            \n            injectable\n            LogMiddleware\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/common/validation-message/email-validation.message.ts\n            \n            variable\n            emailValidationMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/validation-message/length-validation.message.ts\n            \n            variable\n            lengthValidationMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/validation-message/string-validation.message.ts\n            \n            variable\n            stringValidationMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeds/create-posts.seeder.ts\n            \n            class\n            CreatePostsSeeder\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/posts/comments/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                        src/posts/comments/const/default-comment-find-options.const.ts\n            \n            variable\n            DEFAULT_COMMENT_FIND_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/comments/dto/create-comments.dto.ts\n            \n            class\n            CreateCommentsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/comments/dto/paginate-comments.dto.ts\n            \n            class\n            PaginateCommentsDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/posts/comments/dto/update-comments.dto.ts\n            \n            class\n            UpdateCommentsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/comments/entity/comments.entity.ts\n            \n            entity\n            CommentsModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/comments/guard/is-comment-mine-or-admin.guard.ts\n            \n            guard\n            IsCommentMineOrAdminGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/posts/comments/middleware/post-exists.middleware.ts\n            \n            injectable\n            PostExistsMiddleware\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/posts/const/default-post-find-options.const.ts\n            \n            variable\n            DEFAULT_POST_FIND_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/posts/dto/paginate-post.dto.ts\n            \n            class\n            PaginatePostDto\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/entity/posts.entity.ts\n            \n            entity\n            PostsModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/entity/posts.entity.ts\n            \n            class\n            PostsModel\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/posts/guard/is-post-mine-or-admin.guard.ts\n            \n            guard\n            IsPostMineOrAdminGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/image/dto/create-image.dto.ts\n            \n            class\n            CreatePostImageDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/image/images.service.ts\n            \n            injectable\n            PostsImagesService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                93 %\n                (15/16)\n            \n        \n        \n            \n                \n                        src/posts/posts.service.ts\n            \n            type alias\n            PostsResult\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/resolver/posts.resolver.ts\n            \n            class\n            PostsResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/redis/redis.constants.ts\n            \n            variable\n            IORedisToken\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/redis/redis.constants.ts\n            \n            variable\n            KEYV_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/redis/redis.keys-mapper.ts\n            \n            variable\n            REDIS_KEYS_MAPPER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                        src/users/decorator/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/decorator/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/users/decorator/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entity/user-followers.entity.ts\n            \n            entity\n            UserFollowersModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/entity/users.entity.ts\n            \n            entity\n            UsersModel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/entity/users.entity.ts\n            \n            class\n            UsersModel\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/users/guard/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                94 %\n                (18/19)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/server : ^4.12.1\n        \n            @nestjs/apollo : ^13.1.0\n        \n            @nestjs/common : ^11.0.19\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/graphql : ^13.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/platform-socket.io : ^11.0.11\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.1.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.0.11\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/cache-manager-redis-store : ^2.0.4\n        \n            @types/multer : ^1.4.12\n        \n            @types/uuid : ^10.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cross-env : ^7.0.3\n        \n            express-basic-auth : ^1.2.1\n        \n            graphql : ^16.11.0\n        \n            graphql-depth-limit : ^1.1.0\n        \n            graphql-query-complexity : ^1.1.0\n        \n            ioredis : ^5.6.1\n        \n            keyv : ^5.3.2\n        \n            keyv-redis : ^1.3.4\n        \n            multer : ^1.4.5-lts.1\n        \n            passport : ^0.7.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-kakao : ^1.0.1\n        \n            pg : ^8.13.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthProvider   (src/.../auth-provider.enum.ts)\n                        \n                        \n                            AuthScheme   (src/.../auth-schema.const.ts)\n                        \n                        \n                            ImageModelType   (src/.../image.entity.ts)\n                        \n                        \n                            IsPublicEnum   (src/.../is-public.const.ts)\n                        \n                        \n                            RoleEnum   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/auth-provider.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthProvider\n                    \n                \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n                        \n                            \n                                 KAKAO\n                            \n                        \n                        \n                            \n                                Value : kakao\n                            \n                        \n            \n        \n\n    src/common/const/auth-schema.const.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthScheme\n                    \n                \n                        \n                            \n                                 ACCESS\n                            \n                        \n                        \n                            \n                                Value : access\n                            \n                        \n                        \n                            \n                                 REFRESH\n                            \n                        \n                        \n                            \n                                Value : refresh\n                            \n                        \n            \n        \n\n    src/common/entity/image.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ImageModelType\n                    \n                \n                    \n                        \n                            이미지 모델 타입 열거형 (ImageModelType)\n이미지의 종류를 구분하기 위한 열거형입니다.\n현재는 POST_IMAGE (게시물 이미지)만 정의되어 있습니다.\n\n                        \n                    \n                        \n                            \n                                 POST_IMAGE\n                            \n                        \n            \n        \n\n    src/common/const/is-public.const.ts\n    \n        \n            \n                \n                    \n                        \n                        IsPublicEnum\n                    \n                \n                        \n                            \n                                 IS_PUBLIC\n                            \n                        \n                        \n                            \n                                Value : ISPUBLIC\n                            \n                        \n                        \n                            \n                                 IS_REFRESH_TOKEN\n                            \n                        \n                        \n                            \n                                Value : ISREFRESHTOKEN\n                            \n                        \n            \n        \n\n    src/users/entity/users.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        RoleEnum\n                    \n                \n                    \n                        \n                            사용자 역할 열거형\n시스템 내에서 사용자가 가질 수 있는 역할을 정의합니다.\n\n                        \n                    \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatsModule\n\n\n\ncluster_ChatsModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nChatsModule\n\nChatsModule\n\nChatsModule -->\n\nAuthModule->ChatsModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nAuthModule->CommentsModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nAuthModule->CommonModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nAuthModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nChatsModule->AppModule\n\n\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\nChatsModule -->\n\nCommonModule->ChatsModule\n\n\n\nCommentsModule -->\n\nCommonModule->CommentsModule\n\n\n\nPostsModule -->\n\nCommonModule->PostsModule\n\n\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nCommonService \n\nCommonService \n\nCommonService  -->\n\nCommonModule->CommonService \n\n\n\nCommentsModule -->\n\nPostsModule->CommentsModule\n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nChatsModule -->\n\nUsersModule->ChatsModule\n\n\n\nCommentsModule -->\n\nUsersModule->CommentsModule\n\n\n\nCommonModule -->\n\nUsersModule->CommonModule\n\n\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nKakaoStrategy\n\nKakaoStrategy\n\nAuthModule -->\n\nKakaoStrategy->AuthModule\n\n\n\n\n\nChatsMessagesService\n\nChatsMessagesService\n\nChatsModule -->\n\nChatsMessagesService->ChatsModule\n\n\n\n\n\nChatsService\n\nChatsService\n\nChatsModule -->\n\nChatsService->ChatsModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nCommonService\n\nCommonService\n\nCommonModule -->\n\nCommonService->CommonModule\n\n\n\n\n\nPostsImagesService\n\nPostsImagesService\n\nPostsModule -->\n\nPostsImagesService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    23 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostsResult   (src/.../posts.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/posts.service.ts\n    \n    \n        \n            \n                \n                    \n                    PostsResult\n                \n            \n            \n                \n                    게시물 데이터 응답 타입\n\n                \n            \n            \n                \n                        literal type | literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DEFAULT_COMMENT_FIND_OPTIONS   (src/.../default-comment-find-options.const.ts)\n                        \n                        \n                            DEFAULT_POST_FIND_OPTIONS   (src/.../default-post-find-options.const.ts)\n                        \n                        \n                            emailValidationMessage   (src/.../email-validation.message.ts)\n                        \n                        \n                            FILTER_MAPPER   (src/.../filter-mapper.const.ts)\n                        \n                        \n                            IORedisToken   (src/.../redis.constants.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../is-public.decorator.ts)\n                        \n                        \n                            IsPublic   (src/.../is-public.decorator.ts)\n                        \n                        \n                            KEYV_TOKEN   (src/.../redis.constants.ts)\n                        \n                        \n                            lengthValidationMessage   (src/.../length-validation.message.ts)\n                        \n                        \n                            POST_IMAGE_PATH   (src/.../path.const.ts)\n                        \n                        \n                            POST_PUBLIC_IMAGE_PATH   (src/.../path.const.ts)\n                        \n                        \n                            POSTS_FOLDER_NAME   (src/.../path.const.ts)\n                        \n                        \n                            PROJECT_ROOT_PATH   (src/.../path.const.ts)\n                        \n                        \n                            PUBLIC_FOLDER_NAME   (src/.../path.const.ts)\n                        \n                        \n                            PUBLIC_FOLDER_PATH   (src/.../path.const.ts)\n                        \n                        \n                            QueryRunnerDecorator   (src/.../query-runner.decorator.ts)\n                        \n                        \n                            RATE_LIMITER_KEY   (src/.../rate-limiter.decorator.ts)\n                        \n                        \n                            RateLimiter   (src/.../rate-limiter.decorator.ts)\n                        \n                        \n                            REDIS_KEYS_MAPPER   (src/.../redis.keys-mapper.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            stringValidationMessage   (src/.../string-validation.message.ts)\n                        \n                        \n                            TEMP_FOLDER_NAME   (src/.../path.const.ts)\n                        \n                        \n                            TEMP_FOLDER_PATH   (src/.../path.const.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/comments/const/default-comment-find-options.const.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_COMMENT_FIND_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FindManyOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    relations: {\n        author: true,\n        post: true,\n    },\n    select: {\n        author: {\n            id: true,\n            nickname: true,\n        },\n        post: {\n            id: true,\n        }\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/posts/const/default-post-find-options.const.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_POST_FIND_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FindManyOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    relations: {\n        author: true,\n        images: true,\n        comments: true,\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/common/validation-message/email-validation.message.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        emailValidationMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (args: ValidationArguments) => {\n    return `${args.property}에 정확한 이메일을 입력해주세요.`;\n}\n                    \n                \n\n\n        \n    \n\n    src/common/const/filter-mapper.const.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILTER_MAPPER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    not: Not,\n    less_than: LessThan,\n    less_than_or_equal: LessThanOrEqual,\n    more_than: MoreThan,\n    more_than_or_equal: MoreThanOrEqual,\n    equal: Equal,\n    like: Like,\n    i_like: ILike,\n    between: Between,\n    in: In,\n    any: Any,\n    is_null: IsNull,\n    array_contains: ArrayContains,\n    array_contained_by: ArrayContainedBy,\n    array_overlap: ArrayOverlap,\n}\n                    \n                \n\n            \n                \n                    where__id_not\n{\n where: {\n     id: Not(value),\n }\n}\n\n                \n            \n\n        \n    \n\n    src/redis/redis.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IORedisToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'IORedisClient'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        KEYV_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'KEYV_CLIENT'\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/is-public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'is_public'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsPublic\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (status: IsPublicEnum) => SetMetadata(IS_PUBLIC_KEY, status)\n                    \n                \n\n\n        \n    \n\n    src/common/validation-message/length-validation.message.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        lengthValidationMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (args: ValidationArguments) => {\n    /**\n     * ValidationArguments의 프로퍼티들\n     * \n     * 1) value -> 입력된 값\n     * 2) constraints -> 파라미터에 입력된 제한 사항들\n     *      args.constraints[0] -> 1\n     *      args.constraints[1] -> 20\n     * 3) targetName -> 검증하고 있는 클래스의 이름\n     * 4) object -> 검증하고 있는 객체\n     * 5) property -> 검증되고 있는 프로퍼티의 이름\n     */\n\n    if(args.constraints.length === 2) {\n        return `${args.property}은 ${args.constraints[0]}~${args.constraints[1]}글자를 입력해주세요.`;\n    } else {\n        return `${args.property}는 최소 ${args.constraints[0]}글자를 입력해주세요.`;\n    }\n}\n                    \n                \n\n\n        \n    \n\n    src/common/const/path.const.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        POST_IMAGE_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(\n    PUBLIC_FOLDER_PATH,\n    POSTS_FOLDER_NAME,\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_PUBLIC_IMAGE_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(\n    PUBLIC_FOLDER_NAME,\n    POSTS_FOLDER_NAME,\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POSTS_FOLDER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'posts'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PROJECT_ROOT_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.cwd()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUBLIC_FOLDER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUBLIC_FOLDER_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(\n    PROJECT_ROOT_PATH,\n    PUBLIC_FOLDER_NAME,\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEMP_FOLDER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'temp'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEMP_FOLDER_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(\n    PUBLIC_FOLDER_PATH,\n    TEMP_FOLDER_NAME,\n)\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/query-runner.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        QueryRunnerDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data, context: ExecutionContext) => {\n    const req = context.switchToHttp().getRequest();\n\n    if(!req.queryRunner) {\n        throw new InternalServerErrorException(\n            `QueryRunner Decorator를 사용하려면 TransactionInterceptor를 적용해야 합니다.`\n        );\n    }\n\n    return req.queryRunner as QueryRunner;\n})\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/rate-limiter.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RATE_LIMITER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'rate_limiter_options'\n                    \n                \n\n            \n                \n                    속도 제한 메타데이터 키\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RateLimiter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (options: RateLimitOptions = {}) =>\n  applyDecorators(\n    SetMetadata(RATE_LIMITER_KEY, options),\n    UseGuards(RateLimiterGuard),\n  )\n                    \n                \n\n            \n                \n                    속도 제한 데코레이터\n토큰 버켓 알고리즘을 사용하여 API 엔드포인트에 속도 제한을 적용합니다.\n인증된 사용자는 사용자 ID 기반으로, 비인증 사용자는 IP 기반으로 제한됩니다.\n\n                \n            \n\n        \n    \n\n    src/redis/redis.keys-mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REDIS_KEYS_MAPPER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    followingPosts: (userId: number) => `following-posts/${userId}`,\n}\n                    \n                \n\n\n        \n    \n\n    src/users/decorator/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: RoleEnum) => SetMetadata(ROLES_KEY, role)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user_roles'\n                    \n                \n\n\n        \n    \n\n    src/common/validation-message/string-validation.message.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        stringValidationMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (args: ValidationArguments) => {\n    return `${args.property}에 String을 입력해주세요.`;\n}\n                    \n                \n\n\n        \n    \n\n    src/users/decorator/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: keyof UsersModel | undefined, context: ExecutionContext) => {\n    const req = context.switchToHttp().getRequest();\n\n    const user = req.user as UsersModel;\n\n    /**\n     * User Decorator는 AccessTokenGuard와 같이 사용하므로\n     * user가 없는 경우는 서버측에 문제가 있는 경우이다.\n     */\n    if(!user) {\n        throw new InternalServerErrorException('User 데코레이터는 AccessTokenGuard와 함께 사용해야 합니다. Request에 user 프로퍼티가 존재하지 않습니다.');\n    }\n\n    if(data) {\n        return user[data];\n    }\n\n    return user;\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
